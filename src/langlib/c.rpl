-------------------------------
--String Literals
--
--Currently matches for typical c string and character literals.
--Does allow for escaped single and double quotes
--A "aliased" version is provided to allow for suppressed output in other patterns
-- Run: rosie -wholefile c.strings <c-source-file>
-- Structure: c.strings                      // Parent pattern to extract all strings from file
--              \- c.string                  // Matches a single c string
--            c.characters                   // Parent pattern to match all character literals from file
--              \- c.character               // Matches a single c character
-- NOTE c.strings and c.characters are defined AFTER comments to allow for
--      commented strings to be ignored.
-------------------------------
alias c.alias_string = ["] {([\\] / !["]) .}* ["]
c.string = ["] {([\\] / !["]) .}* ["]

alias c.alias_character = ['] {([\\] / ![']) .} [']
c.character =  ['] {([\\] / ![']) .} [']

-------------------------------
-- Inline Comments
--
-- Matches in line comments starting with a '//'. Also
-- captures the code preceding the comment on the same line.
--
-- Run: rosie -wholefile c.line_comments <c-source-file>
-- Structure: c.line_comments                      // Parent pattern to extract all comments from file
--                \- c.line_comment                // Matches a single line comment
--                    \- c.line_comment_context    // The code on the line preceding the comment
--                    \- c.line_comment_body       // Matches the whole comment text
--                        \- c.line_comment_text   // The text of the comment
-------------------------------
alias c.line_comment_start= "//"
c.line_comment_text= {!line_end .}*
alias c.line_comment_pre= {!c.line_comment_start !line_end .}*
c.line_comment_context= {!c.line_comment_start !line_end .}*
c.line_comment_body= {c.line_comment_start c.line_comment_text}
c.line_comment= {c.line_comment_context c.line_comment_body}
c.line_comments= {{c.line_comment / c.line_comment_body / c.line_comment_pre} .}*

alias c.alias_line_comment_start = "//"
alias c.alias_line_comment_text = {!line_end .}*
alias c.alias_line_comment_pre = {!c.alias_line_comment_start !line_end .}*
alias c.alias_line_comment_context = {!c.alias_line_comment_start !line_end .}*
alias c.alias_line_comment_body = {c.alias_line_comment_start c.alias_line_comment_text}
alias c.alias_line_comment = {c.alias_line_comment_context c.alias_line_comment_body}
alias c.alias_line_comment = {c.alias_line_comment_context c.alias_line_comment_body}
alias c.alias_line_comments = {{c.alias_line_comment / c.alias_line_comment_body / c.alias_line_comment_pre} .}*


-------------------------------
-- Block Comments
--
-- Matches block comments. Block comments in c
-- start with /* and end with */
--
-- Run: rosie -wholefile c.block_comments <c-source-file>
-- Structure: c.block_comments                  // Parent pattern to match all block comments
--                \- c.block_comment            // Matches a single block comment
--                    \- c.block_comment_body   // Matches the body of a block comment
-------------------------------

alias c.block_comment_start = "/*"
alias c.block_comment_end = "*/"
alias c.block_comment_pre= {!c.block_comment_start .}*
alias c.block_comment_body_a = {!c.block_comment_end .}*
c.block_comment_body= {!c.block_comment_end .}*
alias c.block_comment_a = { c.block_comment_start c.block_comment_body_a c.block_comment_end}
c.block_comment= {c.block_comment_start c.block_comment_body c.block_comment_end}
c.block_comments= {c.block_comment_pre c.block_comment}*

alias c.alias_block_comment_start = "/*"
alias c.alias_block_comment_end = "*/"
alias c.alias_block_comment_pre = {!c.block_comment_start.}*

alias c.alias_block_comment_body = {!c.alias_block_comment_end .}*
alias c.alias_block_comment = { c.alias_block_comment_start c.alias_block_comment_body c.alias_block_comment_end}
alias c.alias_block_comment = { c.alias_block_comment_start c.alias_block_comment_body c.alias_block_comment_end}

alias c.alias_block_comments = {c.alias_block_comment_pre c.alias_block_comment }*

c.strings = {c.alias_line_comment / c.alias_block_comment / c.string / .}*
c.characters = {c.alias_line_comment / c.alias_block_comment / c.character / .}*

-------------------------------
-- Dependencies
--
-- Matches dependencies declared with "include" 
--
-- Run: rosie -wholefile c.dependencies <c-source-file>
-- Structure: c.dependencies                  // Parent pattern to match all dependencies in a file
--                \- c.dependency             // Matches a single import
-------------------------------
alias c.include = "#include "
c.header = {{!">" !["]} .}*
alias import_lit = {"<" / ["]} c.header
c.dependency = {c.include import_lit {">" / ["]}}
alias c.dependencies_pre = {!c.include !line_end .}*

c.dependencies = {{c.dependency / c.dependencies_pre} line_end}*

-------------------------------
-- Functions
--
-- Pattern to match function definitions. This does not
-- capture the functions body.
--
-- Run: rosie -wholefile c.functions <c-source-file>
-- Structure: c.functions                       // Parent pattern that matches all function definitions
--                \- c.function                 // Matches an entire function definition
--                    \- c.function_call        // Matches a c function call definition
--                        \- c.static           // Matches if the function call is defined as static
--                        \- c.return_type      // Matches the return type of the function
--                        \- c.pointer          // Matches wether or not the functions return type is a pointer
--                        \- c.function_name    // Matches the functions defined name
--                        \- c.parameters       // Matches the functions list of parameters
--                            \- c.single_param // Matches a single parameter in a function call.
--------------------------------
alias c.seperator = ","
alias c.start_paren = "("
alias c.end_paren = ")"
alias c.start_block = "{"
alias c.end_block = "}"
alias c.pointer = "*"
alias c.invalid_identifier = [^[A-Z][a-z][0-9][_][&][<][>]]
alias c.keywords = {"if" / "for" / "switch" / "catch" / "try" / "do" / "while" / "else" / "else if" / "} else if"}
alias c.whitespace = [:space:]
alias c.const = "const"
c.static = "static"
c.inline = "inline"
c.return_type = !c.keywords c.const? "struct"? {!c.invalid_identifier .}+ c.pointer*
c.function_name = !c.keywords {!line_end !c.start_paren .}+

c.single_param = {!c.end_paren ![,] .}*
alias c.multi_param = {[,] c.single_param}*
c.parameters = {c.start_paren c.single_param c.multi_param c.end_paren c.whitespace+}

c.function = c.whitespace? c.static? c.inline? c.return_type !c.keywords c.function_name !c.keywords c.parameters c.const? "{"
c.functions = {c.function / .}*

-------------------------------
-- Structs
--
-- Pattern to match struct definitions. Does not
-- capture struct bodies.
--
-- Run: rosie -wholefile c.structs <c-source-file>
-- Structure: c.structs                     // Parent pattern that matches all struct definitions
--                \- c.struct           // Matches an entire struct definition
--                    \- c.struct_name      // Name of the struct
-------------------------------

alias c.typedef = "typedef "
alias c.struct = "struct " 
alias c.enum = "enum"
alias c.class = {c.whitespace "class" c.whitespace}
c.type = {{!c.invalid_identifier .}+ " "}+

c.struct_name = {!c.start_block .}*

c.struct = c.typedef? c.struct c.type?  c.struct_name
c.structs = {{c.alias_line_comment / c.alias_block_comment}? c.struct / .}*

c.file = {c.block_comment / c.line_comment / c.dependency / c.function / c.struct / .}*