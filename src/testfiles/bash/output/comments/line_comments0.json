{"b.line_comments":{"subs":[{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"  ","pos":1670}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" define the open command","pos":1673}}],"text":"# define the open command","pos":1672}}],"text":"  # define the open command","pos":1670}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"  ","pos":1962}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" don't use nohup on OSX","pos":1965}}],"text":"# don't use nohup on OSX","pos":1964}}],"text":"  # don't use nohup on OSX","pos":1962}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":2110}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"","pos":2111}}],"text":"#","pos":2110}}],"text":"#","pos":2110}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":2112}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" Get the value of an alias.","pos":2113}}],"text":"# Get the value of an alias.","pos":2112}}],"text":"# Get the value of an alias.","pos":2112}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":2141}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"","pos":2142}}],"text":"#","pos":2141}}],"text":"#","pos":2141}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":2143}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" Arguments:","pos":2144}}],"text":"# Arguments:","pos":2143}}],"text":"# Arguments:","pos":2143}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":2156}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"    1. alias - The alias to get its value from","pos":2157}}],"text":"#    1. alias - The alias to get its value from","pos":2156}}],"text":"#    1. alias - The alias to get its value from","pos":2156}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":2204}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" STDOUT:","pos":2205}}],"text":"# STDOUT:","pos":2204}}],"text":"# STDOUT:","pos":2204}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":2214}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"    The value of alias $1 (if it has one).","pos":2215}}],"text":"#    The value of alias $1 (if it has one).","pos":2214}}],"text":"#    The value of alias $1 (if it has one).","pos":2214}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":2258}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" Return value:","pos":2259}}],"text":"# Return value:","pos":2258}}],"text":"# Return value:","pos":2258}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":2274}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"    0 if the alias was found,","pos":2275}}],"text":"#    0 if the alias was found,","pos":2274}}],"text":"#    0 if the alias was found,","pos":2274}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":2305}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"    1 if it does not exist","pos":2306}}],"text":"#    1 if it does not exist","pos":2305}}],"text":"#    1 if it does not exist","pos":2305}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":2333}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"","pos":2334}}],"text":"#","pos":2333}}],"text":"#","pos":2333}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":2429}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"","pos":2430}}],"text":"#","pos":2429}}],"text":"#","pos":2429}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":2431}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" Try to get the value of an alias,","pos":2432}}],"text":"# Try to get the value of an alias,","pos":2431}}],"text":"# Try to get the value of an alias,","pos":2431}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":2467}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" otherwise return the input.","pos":2468}}],"text":"# otherwise return the input.","pos":2467}}],"text":"# otherwise return the input.","pos":2467}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":2497}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"","pos":2498}}],"text":"#","pos":2497}}],"text":"#","pos":2497}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":2499}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" Arguments:","pos":2500}}],"text":"# Arguments:","pos":2499}}],"text":"# Arguments:","pos":2499}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":2512}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"    1. alias - The alias to get its value from","pos":2513}}],"text":"#    1. alias - The alias to get its value from","pos":2512}}],"text":"#    1. alias - The alias to get its value from","pos":2512}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":2560}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" STDOUT:","pos":2561}}],"text":"# STDOUT:","pos":2560}}],"text":"# STDOUT:","pos":2560}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":2570}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"    The value of alias $1, or $1 if there is no alias $1.","pos":2571}}],"text":"#    The value of alias $1, or $1 if there is no alias $1.","pos":2570}}],"text":"#    The value of alias $1, or $1 if there is no alias $1.","pos":2570}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":2629}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" Return value:","pos":2630}}],"text":"# Return value:","pos":2629}}],"text":"# Return value:","pos":2629}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":2645}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"    Always 0","pos":2646}}],"text":"#    Always 0","pos":2645}}],"text":"#    Always 0","pos":2645}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":2659}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"","pos":2660}}],"text":"#","pos":2659}}],"text":"#","pos":2659}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":2727}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"","pos":2728}}],"text":"#","pos":2727}}],"text":"#","pos":2727}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":2729}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" Set variable \"$1\" to default value \"$2\" if \"$1\" is not yet defined.","pos":2730}}],"text":"# Set variable \"$1\" to default value \"$2\" if \"$1\" is not yet defined.","pos":2729}}],"text":"# Set variable \"$1\" to default value \"$2\" if \"$1\" is not yet defined.","pos":2729}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":2799}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"","pos":2800}}],"text":"#","pos":2799}}],"text":"#","pos":2799}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":2801}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" Arguments:","pos":2802}}],"text":"# Arguments:","pos":2801}}],"text":"# Arguments:","pos":2801}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":2814}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"    1. name - The variable to set","pos":2815}}],"text":"#    1. name - The variable to set","pos":2814}}],"text":"#    1. name - The variable to set","pos":2814}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":2849}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"    2. val  - The default value","pos":2850}}],"text":"#    2. val  - The default value","pos":2849}}],"text":"#    2. val  - The default value","pos":2849}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":2882}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" Return value:","pos":2883}}],"text":"# Return value:","pos":2882}}],"text":"# Return value:","pos":2882}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":2898}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"    0 if the variable exists, 3 if it was set","pos":2899}}],"text":"#    0 if the variable exists, 3 if it was set","pos":2898}}],"text":"#    0 if the variable exists, 3 if it was set","pos":2898}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":2945}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"","pos":2946}}],"text":"#","pos":2945}}],"text":"#","pos":2945}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":3049}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"","pos":3050}}],"text":"#","pos":3049}}],"text":"#","pos":3049}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":3051}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" Set environment variable \"$1\" to default value \"$2\" if \"$1\" is not yet defined.","pos":3052}}],"text":"# Set environment variable \"$1\" to default value \"$2\" if \"$1\" is not yet defined.","pos":3051}}],"text":"# Set environment variable \"$1\" to default value \"$2\" if \"$1\" is not yet defined.","pos":3051}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":3133}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"","pos":3134}}],"text":"#","pos":3133}}],"text":"#","pos":3133}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":3135}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" Arguments:","pos":3136}}],"text":"# Arguments:","pos":3135}}],"text":"# Arguments:","pos":3135}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":3148}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"    1. name - The env variable to set","pos":3149}}],"text":"#    1. name - The env variable to set","pos":3148}}],"text":"#    1. name - The env variable to set","pos":3148}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":3187}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"    2. val  - The default value","pos":3188}}],"text":"#    2. val  - The default value","pos":3187}}],"text":"#    2. val  - The default value","pos":3187}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":3220}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" Return value:","pos":3221}}],"text":"# Return value:","pos":3220}}],"text":"# Return value:","pos":3220}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":3236}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"    0 if the env variable exists, 3 if it was set","pos":3237}}],"text":"#    0 if the env variable exists, 3 if it was set","pos":3236}}],"text":"#    0 if the env variable exists, 3 if it was set","pos":3236}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":3287}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"","pos":3288}}],"text":"#","pos":3287}}],"text":"#","pos":3287}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":3392}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" Required for $langinfo","pos":3393}}],"text":"# Required for $langinfo","pos":3392}}],"text":"# Required for $langinfo","pos":3392}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":3440}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" URL-encode a string","pos":3441}}],"text":"# URL-encode a string","pos":3440}}],"text":"# URL-encode a string","pos":3440}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":3462}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"","pos":3463}}],"text":"#","pos":3462}}],"text":"#","pos":3462}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":3464}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" Encodes a string using RFC 2396 URL-encoding (%-escaped).","pos":3465}}],"text":"# Encodes a string using RFC 2396 URL-encoding (%-escaped).","pos":3464}}],"text":"# Encodes a string using RFC 2396 URL-encoding (%-escaped).","pos":3464}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":3524}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" See: https:\/\/www.ietf.org\/rfc\/rfc2396.txt","pos":3525}}],"text":"# See: https:\/\/www.ietf.org\/rfc\/rfc2396.txt","pos":3524}}],"text":"# See: https:\/\/www.ietf.org\/rfc\/rfc2396.txt","pos":3524}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":3568}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"","pos":3569}}],"text":"#","pos":3568}}],"text":"#","pos":3568}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":3570}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" By default, reserved characters and unreserved \"mark\" characters are","pos":3571}}],"text":"# By default, reserved characters and unreserved \"mark\" characters are","pos":3570}}],"text":"# By default, reserved characters and unreserved \"mark\" characters are","pos":3570}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":3641}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" not escaped by this function. This allows the common usage of passing","pos":3642}}],"text":"# not escaped by this function. This allows the common usage of passing","pos":3641}}],"text":"# not escaped by this function. This allows the common usage of passing","pos":3641}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":3713}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" an entire URL in, and encoding just special characters in it, with","pos":3714}}],"text":"# an entire URL in, and encoding just special characters in it, with","pos":3713}}],"text":"# an entire URL in, and encoding just special characters in it, with","pos":3713}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":3782}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" the expectation that reserved and mark characters are used appropriately.","pos":3783}}],"text":"# the expectation that reserved and mark characters are used appropriately.","pos":3782}}],"text":"# the expectation that reserved and mark characters are used appropriately.","pos":3782}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":3858}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" The -r and -m options turn on escaping of the reserved and mark characters,","pos":3859}}],"text":"# The -r and -m options turn on escaping of the reserved and mark characters,","pos":3858}}],"text":"# The -r and -m options turn on escaping of the reserved and mark characters,","pos":3858}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":3936}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" respectively, which allows arbitrary strings to be fully escaped for","pos":3937}}],"text":"# respectively, which allows arbitrary strings to be fully escaped for","pos":3936}}],"text":"# respectively, which allows arbitrary strings to be fully escaped for","pos":3936}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":4007}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" embedding inside URLs, where reserved characters might be misinterpreted.","pos":4008}}],"text":"# embedding inside URLs, where reserved characters might be misinterpreted.","pos":4007}}],"text":"# embedding inside URLs, where reserved characters might be misinterpreted.","pos":4007}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":4083}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"","pos":4084}}],"text":"#","pos":4083}}],"text":"#","pos":4083}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":4085}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" Prints the encoded string on stdout.","pos":4086}}],"text":"# Prints the encoded string on stdout.","pos":4085}}],"text":"# Prints the encoded string on stdout.","pos":4085}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":4124}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" Returns nonzero if encoding failed.","pos":4125}}],"text":"# Returns nonzero if encoding failed.","pos":4124}}],"text":"# Returns nonzero if encoding failed.","pos":4124}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":4162}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"","pos":4163}}],"text":"#","pos":4162}}],"text":"#","pos":4162}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":4164}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" Usage:","pos":4165}}],"text":"# Usage:","pos":4164}}],"text":"# Usage:","pos":4164}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":4173}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"  omz_urlencode [-r] [-m] [-P] <string>","pos":4174}}],"text":"#  omz_urlencode [-r] [-m] [-P] <string>","pos":4173}}],"text":"#  omz_urlencode [-r] [-m] [-P] <string>","pos":4173}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":4214}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"","pos":4215}}],"text":"#","pos":4214}}],"text":"#","pos":4214}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":4216}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"    -r causes reserved characters (;\/?:@&=+$,) to be escaped","pos":4217}}],"text":"#    -r causes reserved characters (;\/?:@&=+$,) to be escaped","pos":4216}}],"text":"#    -r causes reserved characters (;\/?:@&=+$,) to be escaped","pos":4216}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":4278}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"","pos":4279}}],"text":"#","pos":4278}}],"text":"#","pos":4278}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":4280}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"    -m causes \"mark\" characters (_.!~*''()-) to be escaped","pos":4281}}],"text":"#    -m causes \"mark\" characters (_.!~*''()-) to be escaped","pos":4280}}],"text":"#    -m causes \"mark\" characters (_.!~*''()-) to be escaped","pos":4280}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":4340}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"","pos":4341}}],"text":"#","pos":4340}}],"text":"#","pos":4340}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":4342}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"    -P causes spaces to be encoded as '%20' instead of '+'","pos":4343}}],"text":"#    -P causes spaces to be encoded as '%20' instead of '+'","pos":4342}}],"text":"#    -P causes spaces to be encoded as '%20' instead of '+'","pos":4342}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"  ","pos":4617}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" URLs must use UTF-8 encoding; convert str to UTF-8 if required","pos":4620}}],"text":"# URLs must use UTF-8 encoding; convert str to UTF-8 if required","pos":4619}}],"text":"  # URLs must use UTF-8 encoding; convert str to UTF-8 if required","pos":4617}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"  ","pos":5010}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" Use LC_CTYPE=C to process text byte-by-byte","pos":5013}}],"text":"# Use LC_CTYPE=C to process text byte-by-byte","pos":5012}}],"text":"  # Use LC_CTYPE=C to process text byte-by-byte","pos":5010}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"  ","pos":5256}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" $mark must be last because of the \"-\"","pos":5259}}],"text":"# $mark must be last because of the \"-\"","pos":5258}}],"text":"  # $mark must be last because of the \"-\"","pos":5256}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"  ","pos":5379}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" Implemented to use a single printf call and avoid subshells in the loop,","pos":5382}}],"text":"# Implemented to use a single printf call and avoid subshells in the loop,","pos":5381}}],"text":"  # Implemented to use a single printf call and avoid subshells in the loop,","pos":5379}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"  ","pos":5456}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" for performance (primarily on Windows).","pos":5459}}],"text":"# for performance (primarily on Windows).","pos":5458}}],"text":"  # for performance (primarily on Windows).","pos":5456}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"  for (( i = 1; i <= ${","pos":5519}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"str}; ++i )); do","pos":5543}}],"text":"#str}; ++i )); do","pos":5542}}],"text":"  for (( i = 1; i <= ${#str}; ++i )); do","pos":5519}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"        ord=$(( [","pos":5746}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"#16] #byte ))","pos":5764}}],"text":"##16] #byte ))","pos":5763}}],"text":"        ord=$(( [##16] #byte ))","pos":5746}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":5850}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" URL-decode a string","pos":5851}}],"text":"# URL-decode a string","pos":5850}}],"text":"# URL-decode a string","pos":5850}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":5872}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"","pos":5873}}],"text":"#","pos":5872}}],"text":"#","pos":5872}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":5874}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" Decodes a RFC 2396 URL-encoded (%-escaped) string.","pos":5875}}],"text":"# Decodes a RFC 2396 URL-encoded (%-escaped) string.","pos":5874}}],"text":"# Decodes a RFC 2396 URL-encoded (%-escaped) string.","pos":5874}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":5927}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" This decodes the '+' and '%' escapes in the input string, and leaves","pos":5928}}],"text":"# This decodes the '+' and '%' escapes in the input string, and leaves","pos":5927}}],"text":"# This decodes the '+' and '%' escapes in the input string, and leaves","pos":5927}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":5998}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" other characters unchanged. Does not enforce that the input is a","pos":5999}}],"text":"# other characters unchanged. Does not enforce that the input is a","pos":5998}}],"text":"# other characters unchanged. Does not enforce that the input is a","pos":5998}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":6065}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" valid URL-encoded string. This is a convenience to allow callers to","pos":6066}}],"text":"# valid URL-encoded string. This is a convenience to allow callers to","pos":6065}}],"text":"# valid URL-encoded string. This is a convenience to allow callers to","pos":6065}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":6135}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" pass in a full URL or similar strings and decode them for human","pos":6136}}],"text":"# pass in a full URL or similar strings and decode them for human","pos":6135}}],"text":"# pass in a full URL or similar strings and decode them for human","pos":6135}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":6201}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" presentation.","pos":6202}}],"text":"# presentation.","pos":6201}}],"text":"# presentation.","pos":6201}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":6217}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"","pos":6218}}],"text":"#","pos":6217}}],"text":"#","pos":6217}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":6219}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" Outputs the encoded string on stdout.","pos":6220}}],"text":"# Outputs the encoded string on stdout.","pos":6219}}],"text":"# Outputs the encoded string on stdout.","pos":6219}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":6259}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" Returns nonzero if encoding failed.","pos":6260}}],"text":"# Returns nonzero if encoding failed.","pos":6259}}],"text":"# Returns nonzero if encoding failed.","pos":6259}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":6297}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"","pos":6298}}],"text":"#","pos":6297}}],"text":"#","pos":6297}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":6299}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" Usage:","pos":6300}}],"text":"# Usage:","pos":6299}}],"text":"# Usage:","pos":6299}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"","pos":6308}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":"   omz_urldecode <urlstring>  - prints decoded string followed by a newline","pos":6309}}],"text":"#   omz_urldecode <urlstring>  - prints decoded string followed by a newline","pos":6308}}],"text":"#   omz_urldecode <urlstring>  - prints decoded string followed by a newline","pos":6308}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"  ","pos":6451}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" Work bytewise, since URLs escape UTF-8 octets","pos":6454}}],"text":"# Work bytewise, since URLs escape UTF-8 octets","pos":6453}}],"text":"  # Work bytewise, since URLs escape UTF-8 octets","pos":6451}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"  ","pos":6578}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" Change + back to ' '","pos":6581}}],"text":"# Change + back to ' '","pos":6580}}],"text":"  # Change + back to ' '","pos":6578}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"  ","pos":6638}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" Protect other escapes to pass through the printf unchanged","pos":6641}}],"text":"# Protect other escapes to pass through the printf unchanged","pos":6640}}],"text":"  # Protect other escapes to pass through the printf unchanged","pos":6638}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"  ","pos":6726}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" Handle %-escapes by turning them into `\\xXX` printf escapes","pos":6729}}],"text":"# Handle %-escapes by turning them into `\\xXX` printf escapes","pos":6728}}],"text":"  # Handle %-escapes by turning them into `\\xXX` printf escapes","pos":6726}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"  ","pos":6856}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" Now we have a UTF-8 encoded string in the variable. We need to re-encode","pos":6859}}],"text":"# Now we have a UTF-8 encoded string in the variable. We need to re-encode","pos":6858}}],"text":"  # Now we have a UTF-8 encoded string in the variable. We need to re-encode","pos":6856}},{"b.line_comment":{"subs":[{"b.line_comment_context":{"text":"  ","pos":6933}},{"b.line_comment_body":{"subs":[{"b.line_comment_text":{"text":" it if caller is in a non-UTF-8 locale.","pos":6936}}],"text":"# it if caller is in a non-UTF-8 locale.","pos":6935}}],"text":"  # it if caller is in a non-UTF-8 locale.","pos":6933}}],"text":"<<COMMENT\nThe MIT License (MIT)\n\nCopyright (c) 2009-2017 Robby Russell and contributors\nSee the full list at https:\/\/github.com\/robbyrussell\/oh-my-zsh\/contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and\/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\nCOMMENT\n\nfunction zsh_stats() {\n  fc -l 1 | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] \" \" CMD[a]\/count*100 \"% \" a;}' | grep -v \".\/\" | column -c3 -s \" \" -t | sort -nr | nl |  head -n20\n}\n\nfunction uninstall_oh_my_zsh() {\n  env ZSH=$ZSH sh $ZSH\/tools\/uninstall.sh\n}\n\nfunction upgrade_oh_my_zsh() {\n  env ZSH=$ZSH sh $ZSH\/tools\/upgrade.sh\n}\n\nfunction take() {\n  mkdir -p $1\n  cd $1\n}\n\nfunction open_command() {\n  emulate -L zsh\n  setopt shwordsplit\n\n  local open_cmd\n\n  # define the open command\n  case \"$OSTYPE\" in\n    darwin*)  open_cmd='open' ;;\n    cygwin*)  open_cmd='cygstart' ;;\n    linux*)   open_cmd='xdg-open' ;;\n    msys*)    open_cmd='start \"\"' ;;\n    *)        echo \"Platform $OSTYPE not supported\"\n              return 1\n              ;;\n  esac\n\n  # don't use nohup on OSX\n  if [[ \"$OSTYPE\" == darwin* ]]; then\n    $open_cmd \"$@\" &>\/dev\/null\n  else\n    nohup $open_cmd \"$@\" &>\/dev\/null\n  fi\n}\n\n#\n# Get the value of an alias.\n#\n# Arguments:\n#    1. alias - The alias to get its value from\n# STDOUT:\n#    The value of alias $1 (if it has one).\n# Return value:\n#    0 if the alias was found,\n#    1 if it does not exist\n#\nfunction alias_value() {\n    alias \"$1\" | sed \"s\/^$1='\\(.*\\)'$\/\\1\/\"\n    test $(alias \"$1\")\n}\n\n#\n# Try to get the value of an alias,\n# otherwise return the input.\n#\n# Arguments:\n#    1. alias - The alias to get its value from\n# STDOUT:\n#    The value of alias $1, or $1 if there is no alias $1.\n# Return value:\n#    Always 0\n#\nfunction try_alias_value() {\n    alias_value \"$1\" || echo \"$1\"\n}\n\n#\n# Set variable \"$1\" to default value \"$2\" if \"$1\" is not yet defined.\n#\n# Arguments:\n#    1. name - The variable to set\n#    2. val  - The default value\n# Return value:\n#    0 if the variable exists, 3 if it was set\n#\nfunction default() {\n    test `typeset +m \"$1\"` && return 0\n    typeset -g \"$1\"=\"$2\"   && return 3\n}\n\n#\n# Set environment variable \"$1\" to default value \"$2\" if \"$1\" is not yet defined.\n#\n# Arguments:\n#    1. name - The env variable to set\n#    2. val  - The default value\n# Return value:\n#    0 if the env variable exists, 3 if it was set\n#\nfunction env_default() {\n    env | grep -q \"^$1=\" && return 0\n    export \"$1=$2\"       && return 3\n}\n\n\n# Required for $langinfo\nzmodload zsh\/langinfo\n\n# URL-encode a string\n#\n# Encodes a string using RFC 2396 URL-encoding (%-escaped).\n# See: https:\/\/www.ietf.org\/rfc\/rfc2396.txt\n#\n# By default, reserved characters and unreserved \"mark\" characters are\n# not escaped by this function. This allows the common usage of passing\n# an entire URL in, and encoding just special characters in it, with\n# the expectation that reserved and mark characters are used appropriately.\n# The -r and -m options turn on escaping of the reserved and mark characters,\n# respectively, which allows arbitrary strings to be fully escaped for\n# embedding inside URLs, where reserved characters might be misinterpreted.\n#\n# Prints the encoded string on stdout.\n# Returns nonzero if encoding failed.\n#\n# Usage:\n#  omz_urlencode [-r] [-m] [-P] <string>\n#\n#    -r causes reserved characters (;\/?:@&=+$,) to be escaped\n#\n#    -m causes \"mark\" characters (_.!~*''()-) to be escaped\n#\n#    -P causes spaces to be encoded as '%20' instead of '+'\nfunction omz_urlencode() {\n  emulate -L zsh\n  zparseopts -D -E -a opts r m P\n\n  local in_str=$1\n  local url_str=\"\"\n  local spaces_as_plus\n  if [[ -z $opts[(r)-P] ]]; then spaces_as_plus=1; fi\n  local str=\"$in_str\"\n\n  # URLs must use UTF-8 encoding; convert str to UTF-8 if required\n  local encoding=$langinfo[CODESET]\n  local safe_encodings\n  safe_encodings=(UTF-8 utf8 US-ASCII)\n  if [[ -z ${safe_encodings[(r)$encoding]} ]]; then\n    str=$(echo -E \"$str\" | iconv -f $encoding -t UTF-8)\n    if [[ $? != 0 ]]; then\n      echo \"Error converting string from $encoding to UTF-8\" >&2\n      return 1\n    fi\n  fi\n\n  # Use LC_CTYPE=C to process text byte-by-byte\n  local i byte ord LC_ALL=C\n  export LC_ALL\n  local reserved=';\/?:@&=+$,'\n  local mark='_.!~*''()-'\n  local dont_escape=\"[A-Za-z0-9\"\n  if [[ -z $opts[(r)-r] ]]; then\n    dont_escape+=$reserved\n  fi\n  # $mark must be last because of the \"-\"\n  if [[ -z $opts[(r)-m] ]]; then\n    dont_escape+=$mark\n  fi\n  dont_escape+=\"]\"\n\n  # Implemented to use a single printf call and avoid subshells in the loop,\n  # for performance (primarily on Windows).\n  local url_str=\"\"\n  for (( i = 1; i <= ${#str}; ++i )); do\n    byte=\"$str[i]\"\n    if [[ \"$byte\" =~ \"$dont_escape\" ]]; then\n      url_str+=\"$byte\"\n    else\n      if [[ \"$byte\" == \" \" && -n $spaces_as_plus ]]; then\n        url_str+=\"+\"\n      else\n        ord=$(( [##16] #byte ))\n        url_str+=\"%$ord\"\n      fi\n    fi\n  done\n  echo -E \"$url_str\"\n}\n\n# URL-decode a string\n#\n# Decodes a RFC 2396 URL-encoded (%-escaped) string.\n# This decodes the '+' and '%' escapes in the input string, and leaves\n# other characters unchanged. Does not enforce that the input is a\n# valid URL-encoded string. This is a convenience to allow callers to\n# pass in a full URL or similar strings and decode them for human\n# presentation.\n#\n# Outputs the encoded string on stdout.\n# Returns nonzero if encoding failed.\n#\n# Usage:\n#   omz_urldecode <urlstring>  - prints decoded string followed by a newline\nfunction omz_urldecode {\n  emulate -L zsh\n  local encoded_url=$1\n\n  # Work bytewise, since URLs escape UTF-8 octets\n  local caller_encoding=$langinfo[CODESET]\n  local LC_ALL=C\n  export LC_ALL\n\n  # Change + back to ' '\n  local tmp=${encoded_url:gs\/+\/ \/}\n  # Protect other escapes to pass through the printf unchanged\n  tmp=${tmp:gs\/\\\\\/\\\\\\\\\/}\n  # Handle %-escapes by turning them into `\\xXX` printf escapes\n  tmp=${tmp:gs\/%\/\\\\x\/}\n  local decoded\n  eval \"decoded=\\$'$tmp'\"\n\n  # Now we have a UTF-8 encoded string in the variable. We need to re-encode\n  # it if caller is in a non-UTF-8 locale.\n  local safe_encodings\n  safe_encodings=(UTF-8 utf8 US-ASCII)\n  if [[ -z ${safe_encodings[(r)$caller_encoding]} ]]; then\n    decoded=$(echo -E \"$decoded\" | iconv -f UTF-8 -t $caller_encoding)\n    if [[ $? != 0 ]]; then\n      echo \"Error converting string from UTF-8 to $caller_encoding\" >&2\n      return 1\n    fi\n  fi\n\n  echo -E \"$decoded\"\n}\n","pos":1}}
