{"b.strings":{"pos":1,"text":"#!\/usr\/bin\/env bash\n\n# Create a new directory and enter it\nfunction mkd() {\n\tmkdir -p \"$@\" && cd \"$_\";\n}\n\n# Change working directory to the top-most Finder window location\nfunction cdf() { # short for `cdfinder`\n\tcd \"$(osascript -e 'tell app \"Finder\" to POSIX path of (insertion location as alias)')\";\n}\n\n# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression\nfunction targz() {\n\tlocal tmpFile=\"${@%\/}.tar\";\n\ttar -cvf \"${tmpFile}\" --exclude=\".DS_Store\" \"${@}\" || return 1;\n\n\tsize=$(\n\t\tstat -f\"%z\" \"${tmpFile}\" 2> \/dev\/null; # macOS `stat`\n\t\tstat -c\"%s\" \"${tmpFile}\" 2> \/dev\/null;  # GNU `stat`\n\t);\n\n\tlocal cmd=\"\";\n\tif (( size < 52428800 )) && hash zopfli 2> \/dev\/null; then\n\t\t# the .tar file is smaller than 50 MB and Zopfli is available; use it\n\t\tcmd=\"zopfli\";\n\telse\n\t\tif hash pigz 2> \/dev\/null; then\n\t\t\tcmd=\"pigz\";\n\t\telse\n\t\t\tcmd=\"gzip\";\n\t\tfi;\n\tfi;\n\n\techo \"Compressing .tar ($((size \/ 1000)) kB) using \\`${cmd}\\`…\";\n\t\"${cmd}\" -v \"${tmpFile}\" || return 1;\n\t[ -f \"${tmpFile}\" ] && rm \"${tmpFile}\";\n\n\tzippedSize=$(\n\t\tstat -f\"%z\" \"${tmpFile}.gz\" 2> \/dev\/null; # macOS `stat`\n\t\tstat -c\"%s\" \"${tmpFile}.gz\" 2> \/dev\/null; # GNU `stat`\n\t);\n\n\techo \"${tmpFile}.gz ($((zippedSize \/ 1000)) kB) created successfully.\";\n}\n\n# Determine size of a file or total size of a directory\nfunction fs() {\n\tif du -b \/dev\/null > \/dev\/null 2>&1; then\n\t\tlocal arg=-sbh;\n\telse\n\t\tlocal arg=-sh;\n\tfi\n\tif [[ -n \"$@\" ]]; then\n\t\tdu $arg -- \"$@\";\n\telse\n\t\tdu $arg .[^.]* .\/*;\n\tfi;\n}\n\n# Use Git’s colored diff when available\nhash git &>\/dev\/null;\nif [ $? -eq 0 ]; then\n\tfunction diff() {\n\t\tgit diff --no-index --color-words \"$@\";\n\t}\nfi;\n\n# Create a data URL from a file\nfunction dataurl() {\n\tlocal mimeType=$(file -b --mime-type \"$1\");\n\tif [[ $mimeType == text\/* ]]; then\n\t\tmimeType=\"${mimeType};charset=utf-8\";\n\tfi\n\techo \"data:${mimeType};base64,$(openssl base64 -in \"$1\" | tr -d '\\n')\";\n}\n\n# Create a git.io short URL\nfunction gitio() {\n\tif [ -z \"${1}\" -o -z \"${2}\" ]; then\n\t\techo \"Usage: \\`gitio slug url\\`\";\n\t\treturn 1;\n\tfi;\n\tcurl -i https:\/\/git.io\/ -F \"url=${2}\" -F \"code=${1}\";\n}\n\n# Start an HTTP server from a directory, optionally specifying the port\nfunction server() {\n\tlocal port=\"${1:-8000}\";\n\tsleep 1 && open \"http:\/\/localhost:${port}\/\" &\n\t# Set the default Content-Type to `text\/plain` instead of `application\/octet-stream`\n\t# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)\n\tpython -c $'import SimpleHTTPServer;\\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\\nmap[\"\"] = \"text\/plain\";\\nfor key, value in map.items():\\n\\tmap[key] = value + \";charset=UTF-8\";\\nSimpleHTTPServer.test();' \"$port\";\n}\n\n# Start a PHP server from a directory, optionally specifying the port\n# (Requires PHP 5.4.0+.)\nfunction phpserver() {\n\tlocal port=\"${1:-4000}\";\n\tlocal ip=$(ipconfig getifaddr en1);\n\tsleep 1 && open \"http:\/\/${ip}:${port}\/\" &\n\tphp -S \"${ip}:${port}\";\n}\n\n# Compare original and gzipped file size\nfunction gz() {\n\tlocal origsize=$(wc -c < \"$1\");\n\tlocal gzipsize=$(gzip -c \"$1\" | wc -c);\n\tlocal ratio=$(echo \"$gzipsize * 100 \/ $origsize\" | bc -l);\n\tprintf \"orig: %d bytes\\n\" \"$origsize\";\n\tprintf \"gzip: %d bytes (%2.2f%%)\\n\" \"$gzipsize\" \"$ratio\";\n}\n\n# Syntax-highlight JSON strings or files\n# Usage: `json '{\"foo\":42}'` or `echo '{\"foo\":42}' | json`\nfunction json() {\n\tif [ -t 0 ]; then # argument\n\t\tpython -mjson.tool <<< \"$*\" | pygmentize -l javascript;\n\telse # pipe\n\t\tpython -mjson.tool | pygmentize -l javascript;\n\tfi;\n}\n\n# Run `dig` and display the most useful info\nfunction digga() {\n\tdig +nocmd \"$1\" any +multiline +noall +answer;\n}\n\n# UTF-8-encode a string of Unicode symbols\nfunction escape() {\n\tprintf \"\\\\\\x%s\" $(printf \"$@\" | xxd -p -c1 -u);\n\t# print a newline unless we’re piping the output to another program\n\tif [ -t 1 ]; then\n\t\techo \"\"; # newline\n\tfi;\n}\n\n# Decode \\x{ABCD}-style Unicode escape sequences\nfunction unidecode() {\n\tperl -e \"binmode(STDOUT, ':utf8'); print \\\"$@\\\"\";\n\t# print a newline unless we’re piping the output to another program\n\tif [ -t 1 ]; then\n\t\techo \"\"; # newline\n\tfi;\n}\n\n# Get a character’s Unicode code point\nfunction codepoint() {\n\tperl -e \"use utf8; print sprintf('U+%04X', ord(\\\"$@\\\"))\";\n\t# print a newline unless we’re piping the output to another program\n\tif [ -t 1 ]; then\n\t\techo \"\"; # newline\n\tfi;\n}\n\n# Show all the names (CNs and SANs) listed in the SSL certificate\n# for a given domain\nfunction getcertnames() {\n\tif [ -z \"${1}\" ]; then\n\t\techo \"ERROR: No domain specified.\";\n\t\treturn 1;\n\tfi;\n\n\tlocal domain=\"${1}\";\n\techo \"Testing ${domain}…\";\n\techo \"\"; # newline\n\n\tlocal tmp=$(echo -e \"GET \/ HTTP\/1.0\\nEOT\" \\\n\t\t| openssl s_client -connect \"${domain}:443\" -servername \"${domain}\" 2>&1);\n\n\tif [[ \"${tmp}\" = *\"-----BEGIN CERTIFICATE-----\"* ]]; then\n\t\tlocal certText=$(echo \"${tmp}\" \\\n\t\t\t| openssl x509 -text -certopt \"no_aux, no_header, no_issuer, no_pubkey, \\\n\t\t\tno_serial, no_sigdump, no_signame, no_validity, no_version\");\n\t\techo \"Common Name:\";\n\t\techo \"\"; # newline\n\t\techo \"${certText}\" | grep \"Subject:\" | sed -e \"s\/^.*CN=\/\/\" | sed -e \"s\/\\\/emailAddress=.*\/\/\";\n\t\techo \"\"; # newline\n\t\techo \"Subject Alternative Name(s):\";\n\t\techo \"\"; # newline\n\t\techo \"${certText}\" | grep -A 1 \"Subject Alternative Name:\" \\\n\t\t\t| sed -e \"2s\/DNS:\/\/g\" -e \"s\/ \/\/g\" | tr \",\" \"\\n\" | tail -n +2;\n\t\treturn 0;\n\telse\n\t\techo \"ERROR: Certificate not found.\";\n\t\treturn 1;\n\tfi;\n}\n\n# `s` with no arguments opens the current directory in Sublime Text, otherwise\n# opens the given location\nfunction s() {\n\tif [ $# -eq 0 ]; then\n\t\tsubl .;\n\telse\n\t\tsubl \"$@\";\n\tfi;\n}\n\n# `a` with no arguments opens the current directory in Atom Editor, otherwise\n# opens the given location\nfunction a() {\n\tif [ $# -eq 0 ]; then\n\t\tatom .;\n\telse\n\t\tatom \"$@\";\n\tfi;\n}\n\n# `v` with no arguments opens the current directory in Vim, otherwise opens the\n# given location\nfunction v() {\n\tif [ $# -eq 0 ]; then\n\t\tvim .;\n\telse\n\t\tvim \"$@\";\n\tfi;\n}\n\n# `o` with no arguments opens the current directory, otherwise opens the given\n# location\nfunction o() {\n\tif [ $# -eq 0 ]; then\n\t\topen .;\n\telse\n\t\topen \"$@\";\n\tfi;\n}\n\n# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring\n# the `.git` directory, listing directories first. The output gets piped into\n# `less` with options to preserve color and line numbers, unless the output is\n# small enough for one screen.\nfunction tre() {\n\ttree -aC -I '.git|node_modules|bower_components' --dirsfirst \"$@\" | less -FRNX;\n}\n","subs":[{"b.string":{"pos":87,"text":"\"$@\""}},{"b.string":{"pos":98,"text":"\"$_\""}},{"b.string":{"pos":217,"text":"\"$(osascript -e 'tell app \""}},{"b.string":{"pos":250,"text":"\" to POSIX path of (insertion location as alias)')\""}},{"b.string":{"pos":417,"text":"\"${@%\/}.tar\""}},{"b.string":{"pos":441,"text":"\"${tmpFile}\""}},{"b.string":{"pos":464,"text":"\".DS_Store\""}},{"b.string":{"pos":476,"text":"\"${@}\""}},{"b.string":{"pos":633,"text":"\"\""}},{"b.string":{"pos":775,"text":"\"zopfli\""}},{"b.string":{"pos":832,"text":"\"pigz\""}},{"b.string":{"pos":854,"text":"\"gzip\""}},{"b.string":{"pos":880,"text":"\"Compressing .tar ($((size \/ 1000)) kB) using \\`${cmd}\\`…\""}},{"b.string":{"pos":943,"text":"\"${cmd}\""}},{"b.string":{"pos":955,"text":"\"${tmpFile}\""}},{"b.string":{"pos":987,"text":"\"${tmpFile}\""}},{"b.string":{"pos":1008,"text":"\"${tmpFile}\""}},{"b.string":{"pos":1165,"text":"\"${tmpFile}.gz ($((zippedSize \/ 1000)) kB) created successfully.\""}},{"b.string":{"pos":1405,"text":"\"$@\""}},{"b.string":{"pos":1432,"text":"\"$@\""}},{"b.string":{"pos":1615,"text":"\"$@\""}},{"b.string":{"pos":1720,"text":"\"$1\""}},{"b.string":{"pos":1774,"text":"\"${mimeType};charset=utf-8\""}},{"b.string":{"pos":1813,"text":"\"data:${mimeType};base64,$(openssl base64 -in \""}},{"b.string":{"pos":1862,"text":"\" | tr -d '\\n')\""}},{"b.string":{"pos":1939,"text":"\"${1}\""}},{"b.string":{"pos":1952,"text":"\"${2}\""}},{"b.string":{"pos":1974,"text":"\"Usage: \\`gitio slug url\\`\""}},{"b.string":{"pos":2048,"text":"\"url=${2}\""}},{"b.string":{"pos":2062,"text":"\"code=${1}\""}},{"b.string":{"pos":2182,"text":"\"${1:-8000}\""}},{"b.string":{"pos":2213,"text":"\"http:\/\/localhost:${port}\/\""}},{"b.string":{"pos":2457,"text":"'import SimpleHTTPServer;\\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\\nmap[\"\"] = \"text\/plain\";\\nfor key, value in map.items():\\n\\tmap[key] = value + \";charset=UTF-8\";\\nSimpleHTTPServer.test();'"}},{"b.string":{"pos":2672,"text":"\"$port\""}},{"b.string":{"pos":2814,"text":"\"${1:-4000}\""}},{"b.string":{"pos":2882,"text":"\"http:\/\/${ip}:${port}\/\""}},{"b.string":{"pos":2916,"text":"\"${ip}:${port}\""}},{"b.string":{"pos":3019,"text":"\"$1\""}},{"b.string":{"pos":3052,"text":"\"$1\""}},{"b.string":{"pos":3087,"text":"\"$gzipsize * 100 \/ $origsize\""}},{"b.string":{"pos":3135,"text":"\"orig: %d bytes\\n\""}},{"b.string":{"pos":3154,"text":"\"$origsize\""}},{"b.string":{"pos":3175,"text":"\"gzip: %d bytes (%2.2f%%)\\n\""}},{"b.string":{"pos":3204,"text":"\"$gzipsize\""}},{"b.string":{"pos":3216,"text":"\"$ratio\""}},{"b.string":{"pos":3402,"text":"\"$*\""}},{"b.string":{"pos":3581,"text":"\"$1\""}},{"b.string":{"pos":3691,"text":"\"\\\\\\x%s\""}},{"b.string":{"pos":3709,"text":"\"$@\""}},{"b.string":{"pos":3932,"text":"\"binmode(STDOUT, ':utf8'); print \\\"$@\\\"\""}},{"b.string":{"pos":4166,"text":"\"use utf8; print sprintf('U+%04X', ord(\\\"$@\\\"))\""}},{"b.string":{"pos":4457,"text":"\"${1}\""}},{"b.string":{"pos":4479,"text":"\"ERROR: No domain specified.\""}},{"b.string":{"pos":4542,"text":"\"${1}\""}},{"b.string":{"pos":4556,"text":"\"Testing ${domain}…\""}},{"b.string":{"pos":4622,"text":"\"GET \/ HTTP\/1.0\\nEOT\""}},{"b.string":{"pos":4676,"text":"\"${domain}:443\""}},{"b.string":{"pos":4704,"text":"\"${domain}\""}},{"b.string":{"pos":4731,"text":"\"${tmp}\""}},{"b.string":{"pos":4743,"text":"\"-----BEGIN CERTIFICATE-----\""}},{"b.string":{"pos":4807,"text":"\"${tmp}\""}},{"b.string":{"pos":4851,"text":"\"no_aux, no_header, no_issuer, no_pubkey, \\\n\t\t\tno_serial, no_sigdump, no_signame, no_validity, no_version\""}},{"b.string":{"pos":4967,"text":"\"Common Name:\""}},{"b.string":{"pos":5011,"text":"\"${certText}\""}},{"b.string":{"pos":5032,"text":"\"Subject:\""}},{"b.string":{"pos":5052,"text":"\"s\/^.*CN=\/\/\""}},{"b.string":{"pos":5074,"text":"\"s\/\\\/emailAddress=.*\/\/\""}},{"b.string":{"pos":5127,"text":"\"Subject Alternative Name(s):\""}},{"b.string":{"pos":5187,"text":"\"${certText}\""}},{"b.string":{"pos":5213,"text":"\"Subject Alternative Name:\""}},{"b.string":{"pos":5255,"text":"\"2s\/DNS:\/\/g\""}},{"b.string":{"pos":5271,"text":"\"s\/ \/\/g\""}},{"b.string":{"pos":5285,"text":"\",\""}},{"b.string":{"pos":5289,"text":"\"\\n\""}},{"b.string":{"pos":5333,"text":"\"ERROR: Certificate not found.\""}},{"b.string":{"pos":5553,"text":"\"$@\""}},{"b.string":{"pos":5733,"text":"\"$@\""}},{"b.string":{"pos":5903,"text":"\"$@\""}},{"b.string":{"pos":6068,"text":"\"$@\""}},{"b.string":{"pos":6380,"text":"'.git|node_modules|bower_components'"}},{"b.string":{"pos":6429,"text":"\"$@\""}}]}}
