{"r.dependencies":{"pos":1,"subs":[{"r.dependency":{"pos":1094,"subs":[{"r.library":{"pos":1094,"subs":[{"r.dependencies_text":{"pos":1102,"text":"ggplot2"}}],"text":"library(ggplot2)"}}],"text":"library(ggplot2)\n"}},{"r.dependency":{"pos":1111,"subs":[{"r.library":{"pos":1111,"subs":[{"r.dependencies_text":{"pos":1119,"text":"ggmap"}}],"text":"library(ggmap)"}}],"text":"library(ggmap)\n"}},{"r.dependency":{"pos":1126,"subs":[{"r.library":{"pos":1126,"subs":[{"r.dependencies_text":{"pos":1134,"text":"dplyr"}}],"text":"library(dplyr)"}}],"text":"library(dplyr)\n"}},{"r.dependency":{"pos":1141,"subs":[{"r.library":{"pos":1141,"subs":[{"r.dependencies_text":{"pos":1149,"text":"reshape2"}}],"text":"library(reshape2)"}}],"text":"library(reshape2)\n"}},{"r.dependency":{"pos":1159,"subs":[{"r.library":{"pos":1159,"subs":[{"r.dependencies_text":{"pos":1167,"text":"zoo"}}],"text":"library(zoo)"}}],"text":"library(zoo)\n"}},{"r.dependency":{"pos":1172,"subs":[{"r.library":{"pos":1172,"subs":[{"r.dependencies_text":{"pos":1180,"text":"scales"}}],"text":"library(scales)"}}],"text":"library(scales)\n"}},{"r.dependency":{"pos":1188,"subs":[{"r.library":{"pos":1188,"subs":[{"r.dependencies_text":{"pos":1196,"text":"extrafont"}}],"text":"library(extrafont)"}}],"text":"library(extrafont)\n"}},{"r.dependency":{"pos":1207,"subs":[{"r.library":{"pos":1207,"subs":[{"r.dependencies_text":{"pos":1215,"text":"grid"}}],"text":"library(grid)"}}],"text":"library(grid)\n"}},{"r.dependency":{"pos":1221,"subs":[{"r.library":{"pos":1221,"subs":[{"r.dependencies_text":{"pos":1229,"text":"RPostgreSQL"}}],"text":"library(RPostgreSQL)"}}],"text":"library(RPostgreSQL)\n"}},{"r.dependency":{"pos":1242,"subs":[{"r.library":{"pos":1242,"subs":[{"r.dependencies_text":{"pos":1250,"text":"rgdal"}}],"text":"library(rgdal)"}}],"text":"library(rgdal)\n"}},{"r.dependency":{"pos":1257,"subs":[{"r.library":{"pos":1257,"subs":[{"r.dependencies_text":{"pos":1265,"text":"maptools"}}],"text":"library(maptools)"}}],"text":"library(maptools)\n"}},{"r.dependency":{"pos":1290,"subs":[{"r.source":{"pos":1290,"subs":[{"r.dependencies_text":{"pos":1297,"text":"\"helpers.R\""}}],"text":"source(\"helpers.R\")"}}],"text":"source(\"helpers.R\")\n"}}],"text":"#MIT License\n#\n#Copyright (c) 2017 Todd Schneider\n#\n#Permission is hereby granted, free of charge, to any person obtaining a copy\n#of this software and associated documentation files (the \"Software\"), to deal\n#in the Software without restriction, including without limitation the rights\n#to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell\n#copies of the Software, and to permit persons to whom the Software is\n#furnished to do so, subject to the following conditions:\n#\n#The above copyright notice and this permission notice shall be included in all\n#copies or substantial portions of the Software.\n#\n#THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n#SOFTWARE.\n\nlibrary(ggplot2)\nlibrary(ggmap)\nlibrary(dplyr)\nlibrary(reshape2)\nlibrary(zoo)\nlibrary(scales)\nlibrary(extrafont)\nlibrary(grid)\nlibrary(RPostgreSQL)\nlibrary(rgdal)\nlibrary(maptools)\ngpclibPermit()\nsource(\"helpers.R\")\n\n# this script assumes that queries in prepare_analysis.sql have been run\n\n# import spatial data for census tracts and neighborhoods\ntracts = spTransform(readOGR(\"..\/nyct2010_15b\", layer = \"nyct2010\"), CRS(\"+proj=longlat +datum=WGS84\"))\ntracts@data$id = as.character(as.numeric(rownames(tracts@data)) + 1)\ntracts.points = fortify(tracts, region = \"id\")\ntracts.map = inner_join(tracts.points, tracts@data, by = \"id\")\n\nnyc_map = tracts.map\nex_staten_island_map = filter(tracts.map, BoroName != \"Staten Island\")\nmanhattan_map = filter(tracts.map, BoroName == \"Manhattan\")\n\n# NYC dot maps\npickups = query(\"SELECT * FROM trips_by_lat_long_cab_type ORDER BY count\")\npickups = mutate(pickups, cab_type_id = factor(cab_type_id))\n\nalpha_range = c(0.14, 0.75)\nsize_range = c(0.134, 0.173)\n\np = ggplot() +\n  geom_polygon(data = ex_staten_island_map,\n               aes(x = long, y = lat, group = group),\n               fill = \"#080808\", color = \"#080808\") +\n  geom_point(data = pickups,\n             aes(x = pickup_long, y = pickup_lat, alpha = count, size = count, color = cab_type_id)) +\n  scale_alpha_continuous(range = alpha_range, trans = \"log\", limits = range(pickups$count)) +\n  scale_size_continuous(range = size_range, trans = \"log\", limits = range(pickups$count)) +\n  scale_color_manual(values = c(\"#ffffff\", green_hex)) +\n  coord_map(xlim = range(ex_staten_island_map$long), ylim = range(ex_staten_island_map$lat)) +\n  title_with_subtitle(\"New York City Taxi Pickups\", \"2009–2015\") +\n  theme_dark_map(base_size = 24) +\n  theme(legend.position = \"none\")\n\nfname = \"graphs\/taxi_pickups_map.png\"\npng(filename = fname, width = 490, height = 759, bg = \"black\")\nprint(p)\nadd_credits(color = \"#dddddd\", xpos = 0.98)\ndev.off()\n\ndropoffs = query(\"SELECT * FROM dropoff_by_lat_long_cab_type ORDER BY count\")\ndropoffs = mutate(dropoffs, cab_type_id = factor(cab_type_id))\n\np = ggplot() +\n  geom_polygon(data = ex_staten_island_map,\n               aes(x = long, y = lat, group = group),\n               fill = \"#080808\", color = \"#080808\") +\n  geom_point(data = dropoffs,\n             aes(x = dropoff_long, y = dropoff_lat, alpha = count, size = count, color = cab_type_id)) +\n  scale_alpha_continuous(range = alpha_range, trans = \"log\", limits = range(dropoffs$count)) +\n  scale_size_continuous(range = size_range, trans = \"log\", limits = range(dropoffs$count)) +\n  scale_color_manual(values = c(\"#ffffff\", green_hex)) +\n  coord_map(xlim = range(ex_staten_island_map$long), ylim = range(ex_staten_island_map$lat)) +\n  title_with_subtitle(\"New York City Taxi Drop Offs\", \"2009–2015\") +\n  theme_dark_map(base_size = 24) +\n  theme(legend.position = \"none\")\n\nfname = \"graphs\/taxi_dropoffs_map.png\"\npng(filename = fname, width = 490, height = 759, bg = \"black\")\nprint(p)\nadd_credits(color = \"#dddddd\", xpos = 0.98)\ndev.off()\n\n# high resolution maps\nalpha_range = c(0.14, 0.75)\nsize_range = c(0.72, 1.02)\n\np = ggplot() +\n  geom_polygon(data = ex_staten_island_map,\n               aes(x = long, y = lat, group = group),\n               fill = \"#080808\", color = \"#080808\", size = 0) +\n  geom_point(data = pickups,\n             aes(x = pickup_long, y = pickup_lat, alpha = count, size = count, color = cab_type_id)) +\n  scale_alpha_continuous(range = alpha_range, trans = \"log\", limits = range(pickups$count)) +\n  scale_size_continuous(range = size_range, trans = \"log\", limits = range(pickups$count)) +\n  scale_color_manual(values = c(\"#ffffff\", green_hex)) +\n  coord_map(xlim = range(ex_staten_island_map$long), ylim = range(ex_staten_island_map$lat)) +\n  theme_dark_map() +\n  theme(legend.position = \"none\")\n\nfname = \"graphs\/taxi_pickups_map_hires.png\"\npng(filename = fname, width = 2880, height = 4068, bg = \"black\")\nprint(p)\ndev.off()\n\np = ggplot() +\n  geom_polygon(data = ex_staten_island_map,\n               aes(x = long, y = lat, group = group),\n               fill = \"#080808\", color = \"#080808\", size = 0) +\n  geom_point(data = dropoffs,\n             aes(x = dropoff_long, y = dropoff_lat, alpha = count, size = count, color = cab_type_id)) +\n  scale_alpha_continuous(range = alpha_range, trans = \"log\", limits = range(dropoffs$count)) +\n  scale_size_continuous(range = size_range, trans = \"log\", limits = range(dropoffs$count)) +\n  scale_color_manual(values = c(\"#ffffff\", green_hex)) +\n  coord_map(xlim = range(ex_staten_island_map$long), ylim = range(ex_staten_island_map$lat)) +\n  theme_dark_map() +\n  theme(legend.position = \"none\")\n\nfname = \"graphs\/taxi_dropoffs_map_hires.png\"\npng(filename = fname, width = 2880, height = 4068, bg = \"black\")\nprint(p)\ndev.off()\n\n# borough trends\ndaily_pickups_borough_type = query(\"\n  SELECT\n    *,\n    CASE type\n      WHEN 'uber' THEN boroname || type || EXTRACT(YEAR FROM date)\n      ELSE boroname || type\n    END AS group_for_monthly_total\n  FROM daily_pickups_by_borough_and_type\n  WHERE boroname != 'New Jersey'\n  ORDER BY boroname, type, date\n\")\n\ncab_type_levels = c(\"yellow\", \"green\", \"uber\")\ncab_type_labels = c(\"Yellow taxi\", \"Green taxi\", \"Uber car\")\n\ndaily_pickups_borough_type = daily_pickups_borough_type %>%\n  mutate(type = factor(type, levels = cab_type_levels, labels = cab_type_labels)) %>%\n  group_by(group_for_monthly_total) %>%\n  mutate(monthly = rollsum(trips, k = 28, na.pad = TRUE, align = \"right\"))\n\ndaily_dropoffs_borough = query(\"\n  SELECT *\n  FROM daily_dropoffs_by_borough\n  WHERE boroname != 'New Jersey'\n  ORDER BY boroname, date\n\")\n\ndaily_dropoffs_borough = daily_dropoffs_borough %>%\n  mutate(type = factor(type, levels = cab_type_levels[1:2], labels = cab_type_labels[1:2])) %>%\n  group_by(boroname, type) %>%\n  mutate(monthly = rollsum(trips, k = 28, na.pad = TRUE, align = \"right\"))\n\nfor (b in boroughs) {\n  p = ggplot(data = filter(daily_pickups_borough_type, type != \"Uber car\", boroname == b),\n         aes(x = date, y = monthly, color = type)) +\n        geom_line(size = 1) +\n        scale_x_date(\"\") +\n        scale_y_continuous(\"pickups, trailing 28 days\\n\", labels = comma) +\n        scale_color_manual(\"\", values = c(yellow_hex, green_hex)) +\n        title_with_subtitle(paste(b, \"Monthly Taxi Pickups\"), \"Based on NYC TLC trip data\") +\n        expand_limits(y = 0) +\n        theme_tws(base_size = 20) +\n        theme(legend.position = \"bottom\")\n\n  png(filename = paste0(\"graphs\/taxi_pickups_\", to_slug(b), \".png\"), width = 640, height = 420)\n  print(p)\n  add_credits()\n  dev.off()\n\n  p = ggplot(data = filter(daily_pickups_borough_type, date >= \"2014-01-01\" & boroname == b),\n         aes(x = date, y = monthly, color = type, group = group_for_monthly_total)) +\n        geom_line(size = 1) +\n        scale_x_date(\"\", labels = date_format(\"%m\/%y\")) +\n        scale_y_continuous(\"pickups, trailing 28 days\\n\", labels = comma) +\n        scale_color_manual(\"\", values = c(yellow_hex, green_hex, uber_hex)) +\n        title_with_subtitle(paste0(\"Uber vs. Taxi Pickups in \", b), \"Based on NYC TLC and Uber trip data\") +\n        expand_limits(y = 0) +\n        theme_tws(base_size = 20) +\n        theme(legend.position = \"bottom\")\n\n  png(filename = paste0(\"graphs\/uber_vs_taxi_pickups_\", to_slug(b), \".png\"), width = 640, height = 420)\n  print(p)\n  add_credits()\n  dev.off()\n\n  p = ggplot(data = filter(daily_dropoffs_borough, boroname == b),\n             aes(x = date, y = monthly, color = type)) +\n        geom_line(size = 1) +\n        scale_x_date(\"\") +\n        scale_y_continuous(\"drop offs, trailing 28 days\\n\", labels = comma) +\n        scale_color_manual(\"\", values = c(yellow_hex, green_hex)) +\n        title_with_subtitle(paste(b, \"Monthly Taxi Drop Offs\"), \"Based on NYC TLC trip data\") +\n        expand_limits(y = 0) +\n        theme_tws(base_size = 20) +\n        theme(legend.position = \"bottom\")\n\n  png(filename = paste0(\"graphs\/taxi_dropoffs_\", to_slug(b), \".png\"), width = 640, height = 420)\n  print(p)\n  add_credits()\n  dev.off()\n}\n\n# airport traffic\nairport = query(\"\n  SELECT *\n  FROM airport_trips_summary\n  WHERE day_of_week = 'weekday'\n    AND ntaname NOT IN ('Airport', 'Newark Airport')\n    AND ntaname NOT LIKE 'park-cemetery-etc%'\n  ORDER BY ntaname, airport_code, hour\n\")\n\nairport = airport %>%\n  mutate(timestamp_for_x_axis = as.POSIXct(hour * 3600, origin = \"1970-01-01\", tz = \"UTC\"))\n\nxlim = range(airport$timestamp_for_x_axis)\n\ntotals_by_nta = airport %>%\n  group_by(ntacode, ntaname, airport_code) %>%\n  summarize(total = sum(trips_count)) %>%\n  ungroup() %>%\n  arrange(desc(total))\n\nntas = query(\"SELECT DISTINCT ntacode, ntaname, boroname FROM nyct2010 ORDER BY ntacode\")\nnta_codes_to_calculate = unique(filter(totals_by_nta, total > 1000)$ntacode)\nntas_to_calculate = filter(ntas, ntacode %in% nta_codes_to_calculate)\n\nairports = data.frame(code = c(\"LGA\", \"JFK\", \"EWR\"),\n                      name = c(\"LaGuardia\", \"JFK\", \"Newark Airport\"),\n                      stringsAsFactors = FALSE)\n\nmin_trips = 10\n\ninsufficient_data = ggplot(data = data.frame(x = 0, y = 0, label = \"insufficient data\"),\n                             aes(x = x, y = y, label = label)) +\n                           geom_text(size = 20) +\n                           theme_tws() +\n                           theme(text = element_blank(), axis.ticks = element_blank())\n\nfor (i in 1:nrow(ntas_to_calculate)) {\n  for (j in 1:nrow(airports)) {\n    nta = ntas_to_calculate[i, ]\n    ap = airports[j, ]\n    data = filter(airport, ntacode == nta$ntacode, airport_code == ap$code, trips_count >= min_trips)\n    fname = paste0(\"graphs\/airport\/\", nta$ntacode, \"_\", ap$code, \".png\")\n\n    if (nrow(data) < 12) {\n      png(filename = fname, width = 640, height = 120)\n      print(insufficient_data)\n      dev.off()\n      next()\n    }\n\n    display_name = nta_display_name(nta$ntacode)\n    if (is.na(display_name)) display_name = nta$ntaname\n    title_text = paste0(display_name, \" to \", ap$name, \" Taxi Travel Time\")\n    title_rel = ifelse(nchar(display_name) > 20, 1, 1.2)\n\n    p = ggplot(data = data, aes(x = timestamp_for_x_axis)) +\n          geom_line(aes(y = pct50, alpha = \"  Median   \")) +\n          geom_ribbon(aes(ymin = pct25, ymax = pct75, alpha = \" 25–75th percentile   \")) +\n          geom_ribbon(aes(ymin = pct10, ymax = pct90, alpha = \"10–90th percentile\")) +\n          scale_x_datetime(\"\", labels = date_format(\"%l %p\"),\n                           breaks = \"3 hours\", minor_breaks = \"1 hour\") +\n          scale_y_continuous(\"trip duration in minutes\\n\") +\n          expand_limits(y = 0) +\n          coord_cartesian(xlim = xlim) +\n          scale_alpha_manual(\"\", values = c(1, 0.2, 0.2)) +\n          title_with_subtitle(title_text,\n                              \"Weekdays only, based on NYC TLC data from 1\/2009–6\/2015\") +\n          theme_tws(base_size = 19) +\n          theme(legend.position = \"bottom\",\n                plot.title = element_text(size = rel(title_rel))) +\n          guides(alpha = guide_legend(override.aes = list(alpha = c(1, 0.4, 0.2),\n                                                          size = c(1, 0, 0),\n                                                          fill = c(NA, \"black\", \"black\"))))\n\n    png(filename = fname, width = 640, height = 420)\n    print(p)\n    add_credits()\n    dev.off()\n  }\n}\n\nnta_centers = query(\"SELECT ntacode, long, lat FROM neighborhood_centroids\")\n\n# maps of each NTA\nfor (nta_code in ntas_to_calculate$ntacode) {\n  w = h = 320\n  nta_data = filter(tracts.map, NTACode == nta_code)\n  coords = as.numeric(filter(nta_centers, ntacode == nta_code)[, c(\"long\", \"lat\")])\n  google_map = get_googlemap(center = coords, zoom = 13, size = c(w, h))\n\n  p = ggmap(google_map, extent = \"device\") +\n    geom_polygon(data = nta_data,\n                 aes(x = long, y = lat, group = group),\n                 color = \"#ff0000\", fill = \"#ff0000\", alpha = 0.3, size = 0.1) +\n    theme_nothing()\n\n  png(filename = paste0(\"graphs\/airport\/\", nta_code, \"_map.png\"), width = w, height = h)\n  print(p)\n  dev.off()\n\n  Sys.sleep(2)\n}\n\n# uber vs. taxi at JFK and LGA\nairport_pickups_by_type = query(\"\n  SELECT\n    type,\n    date,\n    CASE type\n      WHEN 'uber' THEN type || EXTRACT(YEAR FROM date)\n      ELSE type\n    END AS group_for_monthly_total,\n    SUM(pickups) AS pickups\n  FROM airport_pickups_by_type\n  WHERE airport_code IN ('LGA', 'JFK')\n  GROUP BY type, date, group_for_monthly_total\n  ORDER BY type, date\n\")\n\nairport_pickups_by_type = airport_pickups_by_type %>%\n  mutate(type = factor(type, levels = cab_type_levels, labels = cab_type_labels)) %>%\n  group_by(group_for_monthly_total) %>%\n  mutate(monthly = rollsum(pickups, k = 28, na.pad = TRUE, align = \"right\"))\n\npng(filename = \"graphs\/uber_vs_taxi_pickups_airports.png\", width = 640, height = 420)\nggplot(data = filter(airport_pickups_by_type, date >= \"2014-01-01\", type != \"Green taxi\"),\n       aes(x = date, y = monthly, color = type, group = group_for_monthly_total)) +\n  geom_line(size = 1) +\n  scale_x_date(\"\", labels = date_format(\"%m\/%y\")) +\n  scale_y_continuous(\"pickups, trailing 28 days\\n\", labels = comma) +\n  scale_color_manual(\"\", values = c(yellow_hex, uber_hex)) +\n  title_with_subtitle(paste(\"Uber vs. Taxi Pickups at JFK and LaGuardia Airports\"), \"Based on NYC TLC and Uber trip data\") +\n  expand_limits(y = 0) +\n  theme_tws(base_size = 20) +\n  theme(legend.position = \"bottom\")\nadd_credits()\ndev.off()\n\n# Die Hard 3, UWS to Wall Street\ndh3 = query(\"\n  SELECT duration_in_minutes\n  FROM die_hard_3\n  WHERE dow BETWEEN 1 AND 5\n    AND duration_in_minutes IS NOT NULL\n    AND duration_in_minutes BETWEEN 10 AND 75\n    AND (   (hour = 9 AND EXTRACT(minute FROM pickup_datetime) >= 20)\n         OR (hour = 10 AND EXTRACT(minute FROM pickup_datetime) <= 20))\n\")\n\npng(filename = \"graphs\/die_hard_3.png\", width = 640, height = 420)\nggplot(data = dh3, aes(x = pmin(duration_in_minutes, 45))) +\n  geom_histogram(binwidth = 2.5) +\n  scale_x_continuous(\"\\ntrip time in minutes\",\n                     breaks = seq(10, 45, by = 5),\n                     labels = c(seq(10, 40, by = 5), \">45\"),\n                     minor_breaks = c()) +\n  scale_y_continuous(\"count\\n\") +\n  title_with_subtitle(\"72nd & Broadway to Wall Street Taxi Travel Times\", \"Weekdays 9:20–10:20 AM, based on NYC TLC data 1\/2009–6\/2015\") +\n  theme_tws(base_size = 20)\nadd_credits()\ndev.off()\n\n# weather\nweather = query(\"SELECT * FROM pickups_and_weather ORDER BY date\")\nweather = weather %>%\n  mutate(precip_bucket = cut(precipitation, breaks = c(0, 0.0001, 0.2, 0.4, 0.6, 6), right = FALSE),\n         snow_bucket = cut(snowfall, breaks = c(0, 0.0001, 2, 4, 6, 13), right = FALSE),\n         taxi_week_avg = rollmean(taxi, k = 7, na.pad = TRUE, align = \"right\"),\n         uber_week_avg = rollmean(uber, k = 7, na.pad = TRUE, align = \"right\"))\n\nprecip = weather %>%\n  group_by(precip_bucket) %>%\n  summarize(taxi = mean(taxi), days = n())\n\nsnowfall = weather %>%\n  group_by(snow_bucket) %>%\n  summarize(taxi = mean(taxi), days = n())\n\np1 = ggplot(data = precip, aes(x = precip_bucket, y = taxi)) +\n  geom_bar(stat = \"identity\") +\n  scale_x_discrete(\"\\nprecipitation in inches\", labels = c(0, \"0–0.2\", \"0.2–0.4\", \"0.4–0.6\", \">0.6\")) +\n  scale_y_continuous(\"average daily trips\\n\", labels = comma) +\n  title_with_subtitle(\"Precipitation vs. NYC Daily Taxi Trips\", \"Based on NYC TLC data 1\/2009–6\/2015\") +\n  theme_tws(base_size = 20)\n\np2 = ggplot(data = snowfall, aes(x = snow_bucket, y = taxi)) +\n  geom_bar(stat = \"identity\") +\n  scale_x_discrete(\"\\nsnowfall in inches\", labels = c(0, \"0–2\", \"2–4\", \"4–6\", \">6\")) +\n  scale_y_continuous(\"average daily taxi trips\\n\", labels = comma) +\n  title_with_subtitle(\"Snowfall vs. NYC Daily Taxi Trips\", \"Based on NYC TLC data 1\/2009–6\/2015\") +\n  theme_tws(base_size = 20)\n\npng(filename = \"graphs\/daily_trips_precipitation.png\", width = 640, height = 420)\nprint(p1)\nadd_credits()\ndev.off()\n\npng(filename = \"graphs\/daily_trips_snowfall.png\", width = 640, height = 420)\nprint(p2)\nadd_credits()\ndev.off()\n\nfilter(weather, date >= '2015-01-07') %>%\n  mutate(taxi_last_week = lag(taxi_week_avg, 1), uber_last_week = lag(uber_week_avg, 1)) %>%\n  filter(snowfall > 4) %>%\n  select(date, snowfall, precipitation, taxi, uber, taxi_last_week, uber_last_week) %>%\n  mutate(taxi_frac = taxi \/ taxi_last_week, uber_frac = uber \/ uber_last_week)\n\nfilter(weather, date >= '2015-01-07') %>%\n  mutate(taxi_last_week = lag(taxi_week_avg, 1), uber_last_week = lag(uber_week_avg, 1)) %>%\n  filter(snowfall == 0, precipitation > 0.6) %>%\n  select(date, snowfall, precipitation, taxi, uber, taxi_last_week, uber_last_week) %>%\n  mutate(taxi_frac = taxi \/ taxi_last_week, uber_frac = uber \/ uber_last_week)\n\n# Bridge and tunnel\nbnt = query(\"\n  SELECT\n    id,\n    pickup_datetime,\n    pickup_longitude,\n    pickup_latitude,\n    dropoff_longitude,\n    dropoff_latitude,\n    pickup_nyct2010_gid,\n    dropoff_nyct2010_gid\n  FROM bridge_and_tunnel\n  WHERE\n    dropoff_longitude IS NOT NULL\n    AND dropoff_latitude IS NOT NULL\n\")\n\ngoog_map = get_googlemap(center = c(-73.984, 40.7425), zoom = 13, style = \"element:labels|visibility:off\")\nbbox = attr(goog_map, \"bb\")\ndropoffs = table(bnt$dropoff_nyct2010_gid)\n\npng(filename = \"graphs\/bridge_and_tunnel_tracts.png\", width = 480, height = 550, bg = \"#f4f4f4\")\nggmap(goog_map, extend = \"device\") +\n  geom_polygon(data = ex_staten_island_map,\n               aes(x = long, y = lat, group = group, alpha = dropoffs[as.character(id)]),\n               fill = \"#ff0000\",\n               color = \"#222222\",\n               size = 0) +\n  scale_x_continuous(lim = range(nyc_map$long)) +\n  scale_y_continuous(lim = range(nyc_map$lat)) +\n  scale_alpha_continuous(range = c(0, 0.8)) +\n  coord_map(xlim = bbox[c(2, 4)], ylim = bbox[c(1, 3)]) +\n  title_with_subtitle(\"Bridge and Tunnel Destinations\", \"Drop offs for Saturday evening taxi rides originating at Penn Station\") +\n  theme_tws_map(base_size = 19) +\n  theme(legend.position = \"none\")\nadd_credits()\ndev.off()\n\nmh_map = get_googlemap(center = c(-73.978, 40.74486), zoom = 16, style = \"feature:poi|visibility:off\")\nmh = filter(bnt, dropoff_nyct2010_gid %in% c(11, 1413, 1431, 1440, 1525, 1526, 1621, 1666, 1667, 1885))\n\npng(\"graphs\/murray_hill_bnt.png\", width = 640, height = 709, bg = \"#f4f4f4\")\nggmap(mh_map, extent = \"device\") +\n  geom_point(data=mh,\n             aes(x = dropoff_longitude, y=dropoff_latitude),\n             alpha = 0.0275,\n             size = 2,\n             color = \"#cc0000\") +\n  title_with_subtitle(\"Murray Hill Bridge and Tunnel\", \"Drop offs for Saturday evening taxi rides originating at Penn Station\") +\n  theme_tws_map(base_size = 20)\nadd_credits()\ndev.off()\n\n# Williamsburg Northside\nnorthside = query(\"\n  SELECT\n    date(pickup_hour) AS date,\n    SUM(count) AS pickups\n  FROM hourly_pickups\n  WHERE pickup_nyct2010_gid = 1100\n    AND cab_type_id IN (1, 2)\n  GROUP BY date\n  ORDER BY date\n\")\n\nnorthside = northside %>%\n  mutate(monthly = rollsum(pickups, k = 28, na.pad = TRUE, align = \"right\"))\n\npng(filename = \"graphs\/northside_williamsburg_pickups.png\", width = 640, height = 420)\nggplot(data = northside, aes(x = date, y = monthly)) +\n  geom_line(size = 1) +\n  scale_x_date(\"\") +\n  scale_y_continuous(\"pickups, trailing 28 days\\n\", labels = comma) +\n  title_with_subtitle(\"Northside Williamsburg Taxi Pickups\", \"N 7th to N 14th, East River to Berry St, based on NYC TLC data\") +\n  theme_tws(base_size = 20) +\n  theme(legend.position = \"bottom\")\nadd_credits()\ndev.off()\n\nnorthside_pickup_locations = query(\"\n  SELECT\n    pickup_longitude,\n    pickup_latitude,\n    pickup_datetime,\n    month\n  FROM northside_pickups\n  ORDER BY pickup_datetime\n\")\n\nnorthside_map = get_googlemap(center = c(-73.9579, 40.7215), zoom = 17)\n\nperiods = list(\n  c(\"2011-01-01\", \"2011-07-01\", \"1st Half 2011\"),\n  c(\"2011-07-01\", \"2012-01-01\", \"2nd Half 2011\"),\n  c(\"2012-01-01\", \"2012-07-01\", \"1st Half 2012\"),\n  c(\"2012-07-01\", \"2013-01-01\", \"2nd Half 2012\"),\n  c(\"2013-01-01\", \"2013-07-01\", \"1st Half 2013\"),\n  c(\"2013-07-01\", \"2014-01-01\", \"2nd Half 2013\"),\n  c(\"2014-01-01\", \"2014-07-01\", \"1st Half 2014\"),\n  c(\"2014-07-01\", \"2015-01-01\", \"2nd Half 2014\"),\n  c(\"2015-01-01\", \"2015-07-01\", \"1st Half 2015\")\n)\n\nfor (months in periods) {\n  p = ggmap(northside_map, extent = \"device\") +\n        geom_point(data = filter(northside_pickup_locations, pickup_datetime >= months[1], pickup_datetime < months[2]),\n               aes(x = pickup_longitude, y = pickup_latitude),\n               alpha = 0.007,\n               size = 2.5,\n               color = \"#d00000\") +\n    title_with_subtitle(months[3], \"Taxi pickups in Northside Williamsburg\") +\n    theme_tws_map(base_size = 20)\n\n  png(filename = paste0(\"graphs\/northside\/northside_\", months[1], \".png\"), bg = \"#f4f4f4\", width = 480, height = 550)\n  print(p)\n  add_credits()\n  dev.off()\n}\n\n# convert to animated gif with ImageMagick\n\n# investment banks\ngs = query(\"\n  SELECT\n    dropoff_datetime,\n    date_trunc('day', dropoff_datetime) AS dropoff_day,\n    EXTRACT(EPOCH FROM dropoff_datetime - date_trunc('day', dropoff_datetime)) AS second_of_day,\n    pickup_datetime,\n    pickup_nyct2010_gid,\n    pickup_longitude,\n    pickup_latitude,\n    EXTRACT(HOUR FROM dropoff_datetime) AS hour,\n    EXTRACT(DOW FROM dropoff_datetime) AS dow\n  FROM goldman_sachs_dropoffs\n\")\n\nciti = query(\"\n  SELECT\n    dropoff_datetime,\n    date_trunc('day', dropoff_datetime) AS dropoff_day,\n    EXTRACT(EPOCH FROM dropoff_datetime - date_trunc('day', dropoff_datetime)) AS second_of_day,\n    pickup_datetime,\n    pickup_nyct2010_gid,\n    pickup_longitude,\n    pickup_latitude,\n    EXTRACT(HOUR FROM dropoff_datetime) AS hour,\n    EXTRACT(DOW FROM dropoff_datetime) AS dow\n  FROM citigroup_dropoffs\n\")\n\ngs = gs %>%\n  mutate(timestamp_for_x_axis = as.POSIXct(second_of_day, origin = \"1970-01-01\", tz = \"UTC\"))\n\nciti = citi %>%\n  mutate(timestamp_for_x_axis = as.POSIXct(second_of_day, origin = \"1970-01-01\", tz = \"UTC\"))\n\npng(filename = \"graphs\/gs_dropoffs.png\", width = 640, height = 420)\nggplot(data = filter(gs, dow %in% 1:5),\n       aes(x = timestamp_for_x_axis)) +\n  geom_histogram(binwidth = 600) +\n  scale_x_datetime(\"\\ndrop off time\", labels = date_format(\"%l %p\"), minor_breaks = \"1 hour\") +\n  scale_y_continuous(\"taxi drop offs\\n\", labels = comma) +\n  title_with_subtitle(\"Goldman Sachs Weekday Taxi Drop Offs at 200 West St\", \"Based on NYC TLC data from 1\/2009–6\/2015\") +\n  theme_tws(base_size = 19)\nadd_credits()\ndev.off()\n\npng(filename = \"graphs\/citi_dropoffs.png\", width = 640, height = 420)\nggplot(data = filter(citi, dow %in% 1:5),\n       aes(x = timestamp_for_x_axis)) +\n  geom_histogram(binwidth = 600) +\n  scale_x_datetime(\"\\ndrop off time\", labels = date_format(\"%l %p\"), minor_breaks = \"1 hour\") +\n  scale_y_continuous(\"taxi drop offs\\n\", labels = comma) +\n  title_with_subtitle(\"Citigroup Weekday Taxi Drop Offs at 388 Greenwich St\", \"Based on NYC TLC data from 1\/2009–6\/2015\") +\n  theme_tws(base_size = 19)\nadd_credits()\ndev.off()\n\n# cash vs. credit\npayments = query(\"\n  WITH pt AS (\n  SELECT\n    date(month) AS month,\n    CASE\n      WHEN LOWER(payment_type) IN ('2', 'csh', 'cash', 'cas') THEN 'cash'\n      WHEN LOWER(payment_type) IN ('1', 'crd', 'credit', 'cre') THEN 'credit'\n    END AS payment_type,\n    SUM(count) AS trips\n  FROM payment_types\n  GROUP BY month, payment_type\n  )\n  SELECT\n    month,\n    SUM(CASE WHEN payment_type = 'credit' THEN trips ELSE 0 END) \/ SUM(trips) AS frac_credit\n  FROM pt\n  GROUP BY month\n  ORDER BY month\n\")\n\npayments_split = query(\"\n  WITH pt AS (\n  SELECT\n    date(month) AS month,\n    total_amount_bucket,\n    CASE\n      WHEN LOWER(payment_type) IN ('2', 'csh', 'cash', 'cas') THEN 'cash'\n      WHEN LOWER(payment_type) IN ('1', 'crd', 'credit', 'cre') THEN 'credit'\n    END AS payment_type,\n    SUM(count) AS trips\n  FROM payment_types\n  GROUP BY month, payment_type, total_amount_bucket\n  )\n  SELECT\n    month,\n    total_amount_bucket,\n    SUM(CASE WHEN payment_type = 'credit' THEN trips ELSE 0 END) \/ SUM(trips) AS frac_credit\n  FROM pt\n  WHERE total_amount_bucket BETWEEN 0 AND 30\n  GROUP BY month, total_amount_bucket\n  ORDER BY month, total_amount_bucket\n\")\n\npng(filename = \"graphs\/cash_vs_credit.png\", width = 640, height = 420)\nggplot(data = payments, aes(x = month, y = frac_credit)) +\n  geom_line(size = 1) +\n  scale_y_continuous(\"% paying with credit card\\n\", labels = percent) +\n  scale_x_date(\"\") +\n  title_with_subtitle(\"Cash vs. Credit NYC Taxi Payments\", \"Based on NYC TLC data\") +\n  expand_limits(y = 0) +\n  theme_tws(base_size = 20)\nadd_credits()\ndev.off()\n\npayments_split = payments_split %>%\n  mutate(total_amount_bucket = factor(total_amount_bucket, labels = c(\"$0–$10  \", \"$10–$20  \", \"$20–$30  \", \"$30–$40  \")))\n\npng(filename = \"graphs\/cash_vs_credit_split.png\", width = 640, height = 420)\nggplot(data = payments_split, aes(x = month, y = frac_credit, color = total_amount_bucket)) +\n  geom_line(size = 1) +\n  scale_y_continuous(\"% paying with credit card\\n\", labels = percent) +\n  scale_x_date(\"\") +\n  scale_color_discrete(\"Fare amount\") +\n  title_with_subtitle(\"Cash vs. Credit by Total Fare Amount\", \"Based on NYC TLC data\") +\n  expand_limits(y = 0) +\n  theme_tws(base_size = 20) +\n  theme(legend.position = \"bottom\")\nadd_credits()\ndev.off()\n\n# analysis of TLC summary reports\nuber_lyft_trips_per_day = tbl_df(query(\"\n  SELECT\n    dba_category AS category,\n    pickup_end_date AS date,\n    ROUND(SUM(total_dispatched_trips)::numeric \/ 7) AS trips_per_day\n  FROM fhv_weekly_reports\n  WHERE dba_category IN ('uber', 'lyft')\n    AND pickup_end_date >= '2015-01-08'\n  GROUP BY dba_category, pickup_end_date\n  ORDER BY dba_category, pickup_end_date\n\"))\n\nyellow_trips_per_day = tbl_df(query(\"\n  SELECT\n    month AS date,\n    trips_per_day\n  FROM yellow_monthly_reports\n  ORDER BY month\n\")) %>% mutate(category = \"yellow\")\n\ntrips_per_day = bind_rows(yellow_trips_per_day, uber_lyft_trips_per_day) %>%\n  mutate(category = factor(category, levels = c(\"yellow\", \"uber\", \"lyft\"), labels = c(\"Yellow Taxi\", \"Uber\", \"Lyft\")))\n\npng(filename = \"graphs\/taxi_uber_lyft_trips_per_day.png\", width = 640, height = 520)\nggplot(data = trips_per_day, aes(x = date, y = trips_per_day, color = category)) +\n  geom_line(size = 1) +\n  scale_y_continuous(\"Trips per day\\n\", labels = unit_format(\"k\", 1\/1000, \"\")) +\n  scale_x_date(\"\") +\n  scale_color_manual(\"\", values = c(\"#F7B731\", \"#161629\", \"#E70B81\")) +\n  title_with_subtitle(\"NYC Taxis Losing Market Share to Uber\", \"Trips per day in NYC, based on TLC summary data\") +\n  theme_tws(base_size = 24) +\n  theme(legend.position = \"bottom\")\nadd_credits()\ndev.off()\n\npng(filename = \"graphs\/lyft_trips_per_day.png\", width = 640, height = 520)\nggplot(data = filter(trips_per_day, category == \"Lyft\"), aes(x = date, y = trips_per_day)) +\n  geom_line(size = 1.5, color = \"#E70B81\") +\n  scale_y_continuous(\"Trips per day\\n\", labels = comma) +\n  scale_x_date(\"\", labels = date_format(\"%b '%y\"), minor_breaks = date_breaks(\"1 month\")) +\n  title_with_subtitle(\"Lyft NYC Trips Per Day\", \"Based on TLC summary data\") +\n  expand_limits(y = 0) +\n  theme_tws(base_size = 24) +\n  theme(legend.position = \"bottom\")\nadd_credits()\ndev.off()\n\nuber_lyft_vehicles = tbl_df(query(\"\n  SELECT\n    dba_category AS category,\n    pickup_end_date AS date,\n    SUM(unique_dispatched_vehicles) AS vehicles\n  FROM fhv_weekly_reports_view\n  WHERE week_number NOT IN (1, 53)\n    AND dba_category IN ('uber', 'lyft')\n  GROUP BY dba_category, pickup_end_date\n  HAVING SUM(unreliable_vehicles_count::int) = 0\n  ORDER BY dba_category, pickup_end_date\n\"))\n\nyellow_vehicles = tbl_df(query(\"\n  SELECT\n    month AS date,\n    trips_per_day,\n    unique_medallions AS vehicles\n  FROM yellow_monthly_reports\n  ORDER BY month\n\")) %>% mutate(category = \"yellow\")\n\nvehicles = bind_rows(uber_lyft_vehicles, yellow_vehicles) %>%\nmutate(category = factor(category, levels = c(\"yellow\", \"uber\", \"lyft\"), labels = c(\"Yellow Taxi\", \"Uber\", \"Lyft\")))\n"}}
