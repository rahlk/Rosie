{"vb.classes":{"subs":[{"vb.class":{"subs":[{"vb.classdef":{"subs":[{"vb.classname":{"text":"bankAccount","pos":7}}],"text":"Class bankAccount\n    ","pos":1}},{"vb.classbody":{"text":"Shared interestRate As Decimal\n    Private accountNumber As String\n    Private accountBalance As Decimal\n    Public holdOnAccount As Boolean = False\n\n    Public ReadOnly Property balance() As Decimal\n        Get\n            Return accountBalance\n        End Get\n    End Property\n\n    Public Sub postInterest()\n        accountBalance = accountBalance * (1 + interestRate)\n    End Sub\n\n    Public Sub postDeposit(ByVal amountIn As Decimal)\n        accountBalance = accountBalance + amountIn\n    End Sub\n\n    Public Sub postWithdrawal(ByVal amountOut As Decimal)\n        accountBalance = accountBalance - amountOut\n    End Sub\n","pos":23}},{"vb.classend":{"text":"End Class","pos":647}}],"text":"Class bankAccount\n    Shared interestRate As Decimal\n    Private accountNumber As String\n    Private accountBalance As Decimal\n    Public holdOnAccount As Boolean = False\n\n    Public ReadOnly Property balance() As Decimal\n        Get\n            Return accountBalance\n        End Get\n    End Property\n\n    Public Sub postInterest()\n        accountBalance = accountBalance * (1 + interestRate)\n    End Sub\n\n    Public Sub postDeposit(ByVal amountIn As Decimal)\n        accountBalance = accountBalance + amountIn\n    End Sub\n\n    Public Sub postWithdrawal(ByVal amountOut As Decimal)\n        accountBalance = accountBalance - amountOut\n    End Sub\nEnd Class","pos":1}},{"vb.class":{"subs":[{"vb.classdef":{"subs":[{"vb.classname":{"text":"ICustomerInfo","pos":675}}],"text":"Public Interface ICustomerInfo\n    ","pos":658}},{"vb.classbody":{"text":"Event updateComplete()\n    Property customerName() As String\n    Sub updateCustomerStatus()\n","pos":693}},{"vb.classend":{"text":"End Interface","pos":785}}],"text":"Public Interface ICustomerInfo\n    Event updateComplete()\n    Property customerName() As String\n    Sub updateCustomerStatus()\nEnd Interface","pos":658}},{"vb.class":{"subs":[{"vb.classdef":{"subs":[{"vb.classname":{"text":"customerInfo","pos":813}},{"vb.interfacenames":{"subs":[{"vb.interfacename":{"text":"ICustomerInfo","pos":841}}],"text":"ICustomerInfo","pos":841}}],"text":"Public Class customerInfo\n    Implements ICustomerInfo","pos":800}},{"vb.classbody":{"text":"' Storage for the property value.\n    Private customerNameValue As String\n    Public Event updateComplete() Implements ICustomerInfo.updateComplete\n    Public Property CustomerName() As String _\n        Implements ICustomerInfo.customerName\n        Get\n            Return customerNameValue\n        End Get\n        Set(ByVal value As String)\n            ' The value parameter is passed to the Set procedure\n            ' when the contents of this property are modified.\n            customerNameValue = value\n        End Set\n    End Property\n\n    Public Sub updateCustomerStatus() _\n        Implements ICustomerInfo.updateCustomerStatus\n        ' Add code here to update the status of this account.\n        ' Raise an event to indicate that this procedure is done.\n        RaiseEvent updateComplete()\n    End Sub\n","pos":859}},{"vb.classend":{"text":"End Class","pos":1670}}],"text":"Public Class customerInfo\n    Implements ICustomerInfo\n    ' Storage for the property value.\n    Private customerNameValue As String\n    Public Event updateComplete() Implements ICustomerInfo.updateComplete\n    Public Property CustomerName() As String _\n        Implements ICustomerInfo.customerName\n        Get\n            Return customerNameValue\n        End Get\n        Set(ByVal value As String)\n            ' The value parameter is passed to the Set procedure\n            ' when the contents of this property are modified.\n            customerNameValue = value\n        End Set\n    End Property\n\n    Public Sub updateCustomerStatus() _\n        Implements ICustomerInfo.updateCustomerStatus\n        ' Add code here to update the status of this account.\n        ' Raise an event to indicate that this procedure is done.\n        RaiseEvent updateComplete()\n    End Sub\nEnd Class","pos":800}},{"vb.class":{"subs":[{"vb.classdef":{"subs":[{"vb.classname":{"text":"dictionary","pos":1694}},{"vb.typelist":{"subs":[{"vb.typenames":{"subs":[{"vb.typename":{"text":"entryType","pos":1708}},{"vb.typename":{"text":"keyType","pos":1719}}],"text":"entryType, keyType","pos":1708}},{"vb.constraintlist":{"subs":[{"vb.constraint":{"text":"IComparable","pos":1731}},{"vb.constraint":{"text":"IFormattable","pos":1744}},{"vb.constraint":{"text":"New","pos":1758}}],"text":"{IComparable, IFormattable, New}","pos":1730}}],"text":"entryType, keyType As {IComparable, IFormattable, New}","pos":1708}}],"text":"Public Class dictionary(Of entryType, keyType As {IComparable, IFormattable, New})\n    ","pos":1681}},{"vb.classbody":{"text":"Public Sub add(ByVal et As entryType, ByVal kt As keyType)\n        Dim dk As keyType\n        If kt.CompareTo(dk) = 0 Then\n        End If\n    End Sub\n","pos":1768}},{"vb.classend":{"text":"End Class","pos":1917}}],"text":"Public Class dictionary(Of entryType, keyType As {IComparable, IFormattable, New})\n    Public Sub add(ByVal et As entryType, ByVal kt As keyType)\n        Dim dk As keyType\n        If kt.CompareTo(dk) = 0 Then\n        End If\n    End Sub\nEnd Class","pos":1681}}],"text":"Class bankAccount\n    Shared interestRate As Decimal\n    Private accountNumber As String\n    Private accountBalance As Decimal\n    Public holdOnAccount As Boolean = False\n\n    Public ReadOnly Property balance() As Decimal\n        Get\n            Return accountBalance\n        End Get\n    End Property\n\n    Public Sub postInterest()\n        accountBalance = accountBalance * (1 + interestRate)\n    End Sub\n\n    Public Sub postDeposit(ByVal amountIn As Decimal)\n        accountBalance = accountBalance + amountIn\n    End Sub\n\n    Public Sub postWithdrawal(ByVal amountOut As Decimal)\n        accountBalance = accountBalance - amountOut\n    End Sub\nEnd Class\n\nPublic Interface ICustomerInfo\n    Event updateComplete()\n    Property customerName() As String\n    Sub updateCustomerStatus()\nEnd Interface\n\nPublic Class customerInfo\n    Implements ICustomerInfo\n    ' Storage for the property value.\n    Private customerNameValue As String\n    Public Event updateComplete() Implements ICustomerInfo.updateComplete\n    Public Property CustomerName() As String _\n        Implements ICustomerInfo.customerName\n        Get\n            Return customerNameValue\n        End Get\n        Set(ByVal value As String)\n            ' The value parameter is passed to the Set procedure\n            ' when the contents of this property are modified.\n            customerNameValue = value\n        End Set\n    End Property\n\n    Public Sub updateCustomerStatus() _\n        Implements ICustomerInfo.updateCustomerStatus\n        ' Add code here to update the status of this account.\n        ' Raise an event to indicate that this procedure is done.\n        RaiseEvent updateComplete()\n    End Sub\nEnd Class\n\nPublic Class dictionary(Of entryType, keyType As {IComparable, IFormattable, New})\n    Public Sub add(ByVal et As entryType, ByVal kt As keyType)\n        Dim dk As keyType\n        If kt.CompareTo(dk) = 0 Then\n        End If\n    End Sub\nEnd Class\n\n","pos":1}}
