{"vb.strings":{"text":"Class bankAccount\n    Shared interestRate As Decimal\n    Private accountNumber As String\n    Private accountBalance As Decimal\n    Public holdOnAccount As Boolean = False\n\n    Public ReadOnly Property balance() As Decimal\n        Get\n            Return accountBalance\n        End Get\n    End Property\n\n    Public Sub postInterest()\n        accountBalance = accountBalance * (1 + interestRate)\n    End Sub\n\n    Public Sub postDeposit(ByVal amountIn As Decimal)\n        accountBalance = accountBalance + amountIn\n    End Sub\n\n    Public Sub postWithdrawal(ByVal amountOut As Decimal)\n        accountBalance = accountBalance - amountOut\n    End Sub\nEnd Class\n\nPublic Interface ICustomerInfo\n    Event updateComplete()\n    Property customerName() As String\n    Sub updateCustomerStatus()\nEnd Interface\n\nPublic Class customerInfo\n    Implements ICustomerInfo\n    ' Storage for the property value.\n    Private customerNameValue As String\n    Public Event updateComplete() Implements ICustomerInfo.updateComplete\n    Public Property CustomerName() As String _\n        Implements ICustomerInfo.customerName\n        Get\n            Return customerNameValue\n        End Get\n        Set(ByVal value As String)\n            ' The value parameter is passed to the Set procedure\n            ' when the contents of this property are modified.\n            customerNameValue = value\n        End Set\n    End Property\n\n    Public Sub updateCustomerStatus() _\n        Implements ICustomerInfo.updateCustomerStatus\n        ' Add code here to update the status of this account.\n        ' Raise an event to indicate that this procedure is done.\n        RaiseEvent updateComplete()\n    End Sub\nEnd Class\n\nPublic Class dictionary(Of entryType, keyType As {IComparable, IFormattable, New})\n    Public Sub add(ByVal et As entryType, ByVal kt As keyType)\n        Dim dk As keyType\n        If kt.CompareTo(dk) = 0 Then\n        End If\n    End Sub\nEnd Class\n\n","pos":1}}
