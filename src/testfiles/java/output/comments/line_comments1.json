{"java.line_comments":{"text":"\/*\n * The MIT License (MIT)\n * \n * Copyright (c) 2013 Clover Studio Ltd. All rights reserved.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\/\n\npackage com.cloverstudio.spikademo.couchdb;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport android.util.Log;\n\nimport com.cloverstudio.spikademo.SpikaApp;\nimport com.cloverstudio.spikademo.couchdb.model.ActivitySummary;\nimport com.cloverstudio.spikademo.couchdb.model.Attachment;\nimport com.cloverstudio.spikademo.couchdb.model.Comment;\nimport com.cloverstudio.spikademo.couchdb.model.Emoticon;\nimport com.cloverstudio.spikademo.couchdb.model.Group;\nimport com.cloverstudio.spikademo.couchdb.model.GroupCategory;\nimport com.cloverstudio.spikademo.couchdb.model.Message;\nimport com.cloverstudio.spikademo.couchdb.model.Notification;\nimport com.cloverstudio.spikademo.couchdb.model.NotificationMessage;\nimport com.cloverstudio.spikademo.couchdb.model.RecentActivity;\nimport com.cloverstudio.spikademo.couchdb.model.User;\nimport com.cloverstudio.spikademo.couchdb.model.UserGroup;\nimport com.cloverstudio.spikademo.extendables.SideBarActivity;\nimport com.cloverstudio.spikademo.management.UsersManagement;\nimport com.cloverstudio.spikademo.utils.Const;\nimport com.cloverstudio.spikademo.utils.Logger;\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\n\n\/**\n * CouchDBHelper\n * \n * Used for parsing JSON response from server.\n *\/\npublic class CouchDBHelper {\n\n\tprivate static String TAG = \"CouchDbHelper: \";\n\n\tprivate static final Gson sGsonExpose = new GsonBuilder()\n\t\t\t.excludeFieldsWithoutExposeAnnotation().create();\n\n\t\/**\n\t * Parse a single user JSON object\n\t * \n\t * @param json\n\t * @return\n\t * @throws JSONException\n\t *\/\n\tpublic static User parseSingleUserObject(JSONObject json)\n\t\t\tthrows JSONException {\n\t\tUser user = null;\n\t\tArrayList<String> contactsIds = new ArrayList<String>();\n\n\t\tif (json != null) {\n\t\t\t\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\tJSONArray rows = json.getJSONArray(Const.ROWS);\n\t\t\t\tJSONObject row = rows.getJSONObject(0);\n\t\t\t\tJSONObject userJson = row.getJSONObject(Const.VALUE);\n\n\t\t\t\tuser = sGsonExpose.fromJson(userJson.toString(), User.class);\n\t\t\t\t\n\t\t\t\tif (userJson.has(Const.FAVORITE_GROUPS)) {\n\t\t\t\t\tJSONArray favorite_groups = userJson\n\t\t\t\t\t\t\t.getJSONArray(Const.FAVORITE_GROUPS);\n\n\t\t\t\t\tList<String> groups = new ArrayList<String>();\n\n\t\t\t\t\tfor (int i = 0; i < favorite_groups.length(); i++) {\n\t\t\t\t\t\tgroups.add(favorite_groups.getString(i));\n\t\t\t\t\t}\n\n\t\t\t\t\tuser.setGroupIds(groups);\n\t\t\t\t}\n\n\t\t\t\tif (userJson.has(Const.CONTACTS)) {\n\t\t\t\t\tJSONArray contacts = userJson.getJSONArray(Const.CONTACTS);\n\n\t\t\t\t\tfor (int i = 0; i < contacts.length(); i++) {\n\t\t\t\t\t\tcontactsIds.add(contacts.getString(i));\n\t\t\t\t\t}\n\n\t\t\t\t\tuser.setContactIds(contactsIds);\n\t\t\t\t}\n\t\t\t} catch (JSONException e) {\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn user;\n\t}\n\n\t   \/**\n     * Parse a single user JSON object\n     * \n     * @param json\n     * @return\n     * @throws JSONException\n     *\/\n    public static User parseSingleUserObjectWithoutRowParam(JSONObject userJson)\n            throws JSONException {\n        User user = null;\n        ArrayList<String> contactsIds = new ArrayList<String>();\n\n        if (userJson != null) {\n        \t\n        \tif (userJson.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(userJson));\n\t\t\t\treturn null;\n\t\t\t}\n\n            try {\n\n                user = sGsonExpose.fromJson(userJson.toString(), User.class);\n                \n                if (userJson.has(Const.FAVORITE_GROUPS)) {\n                    JSONArray favorite_groups = userJson\n                            .getJSONArray(Const.FAVORITE_GROUPS);\n\n                    List<String> groups = new ArrayList<String>();\n\n                    for (int i = 0; i < favorite_groups.length(); i++) {\n                        groups.add(favorite_groups.getString(i));\n                    }\n\n                    user.setGroupIds(groups);\n                }\n\n                if (userJson.has(Const.CONTACTS)) {\n                    JSONArray contacts = userJson.getJSONArray(Const.CONTACTS);\n\n                    for (int i = 0; i < contacts.length(); i++) {\n                        contactsIds.add(contacts.getString(i));\n                    }\n\n                    user.setContactIds(contactsIds);\n                }\n            } catch (JSONException e) {\n\n            }\n\n        }\n\n        return user;\n    }\n    \n\t\/**\n\t * Parse multi JSON objects of type user\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static List<User> parseMultiUserObjects(JSONObject json) {\n\n\t\tList<User> users = null;\n\t\tArrayList<String> contactsIds = new ArrayList<String>();\n\n\t\tif (json != null) {\n\t\t\t\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tusers = new ArrayList<User>();\n\n\t\t\t\t\/\/ Get the element that holds the users ( JSONArray )\n\t\t\t\tJSONArray rows = json.getJSONArray(Const.ROWS);\n\n\t\t\t\tfor (int i = 0; i < rows.length(); i++) {\n\n\t\t\t\t\tJSONObject row = rows.getJSONObject(i);\n\t\t\t\t\tJSONObject userJson = row.getJSONObject(Const.VALUE);\n\n\t\t\t\t\tUser user = new User();\n\n\t\t\t\t\tuser = sGsonExpose\n\t\t\t\t\t\t\t.fromJson(userJson.toString(), User.class);\n\n\t\t\t\t\tif (userJson.has(Const.CONTACTS)) {\n\n\t\t\t\t\t\tJSONArray contacts = userJson\n\t\t\t\t\t\t\t\t.getJSONArray(Const.CONTACTS);\n\n\t\t\t\t\t\tfor (int j = 0; j < contacts.length(); j++) {\n\t\t\t\t\t\t\tcontactsIds.add(contacts.getString(j));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tuser.setContactIds(contactsIds);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (userJson.has(Const.FAVORITE_GROUPS)) {\n\t\t\t\t\t\tJSONArray favorite_groups = userJson\n\t\t\t\t\t\t\t\t.getJSONArray(Const.FAVORITE_GROUPS);\n\n\t\t\t\t\t\tList<String> groups = new ArrayList<String>();\n\n\t\t\t\t\t\tfor (int k = 0; k < favorite_groups.length(); k++) {\n\t\t\t\t\t\t\tgroups.add(favorite_groups.getString(k));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tuser.setGroupIds(groups);\n\t\t\t\t\t}\n\n\t\t\t\t\tusers.add(user);\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(\n\t\t\t\t\t\tTAG + \"parseMultiUserObjects\",\n\t\t\t\t\t\t\"Error while retrieving data from json... Probably no users found!\",\n\t\t\t\t\t\te);\n\t\t\t}\n\t\t}\n\n\t\treturn users;\n\t}\n\n\t\/**\n\t * Parse multi JSON objects of type user for search users\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static List<User> parseSearchUsersResult(JSONArray jsonArray) {\n\n\t\tList<User> users = null;\n\t\tArrayList<String> contactsIds = new ArrayList<String>();\n\n\t\tif (jsonArray != null) {\n\n\t\t\ttry {\n\t\t\t\tusers = new ArrayList<User>();\n\n\t\t\t\t\/\/ Get the element that holds the users ( JSONArray )\n\n\t\t\t\tfor (int i = 0; i < jsonArray.length(); i++) {\n\n\t\t\t\t\tJSONObject userJson = jsonArray.getJSONObject(i);\n\n\t\t\t\t\tUser user = new User();\n\n\t\t\t\t\tuser = sGsonExpose\n\t\t\t\t\t\t\t.fromJson(userJson.toString(), User.class);\n\n\n\t\t\t\t\tif (userJson.has(Const.CONTACTS)) {\n\n\t\t\t\t\t\tJSONArray contacts = userJson\n\t\t\t\t\t\t\t\t.getJSONArray(Const.CONTACTS);\n\n\t\t\t\t\t\tfor (int j = 0; j < contacts.length(); j++) {\n\t\t\t\t\t\t\tcontactsIds.add(contacts.getString(j));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tuser.setContactIds(contactsIds);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (userJson.has(Const.FAVORITE_GROUPS)) {\n\t\t\t\t\t\tJSONArray favorite_groups = userJson\n\t\t\t\t\t\t\t\t.getJSONArray(Const.FAVORITE_GROUPS);\n\n\t\t\t\t\t\tList<String> groups = new ArrayList<String>();\n\n\t\t\t\t\t\tfor (int k = 0; k < favorite_groups.length(); k++) {\n\t\t\t\t\t\t\tgroups.add(favorite_groups.getString(k));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tuser.setGroupIds(groups);\n\t\t\t\t\t}\n\n\t\t\t\t\tusers.add(user);\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(\n\t\t\t\t\t\tTAG + \"parseMultiUserObjects\",\n\t\t\t\t\t\t\"Error while retrieving data from json... Probably no users found!\",\n\t\t\t\t\t\te);\n\t\t\t}\n\t\t}\n\n\t\treturn users;\n\t}\n\n\t\/**\n\t * Parse multi JSON objects of type group for search groups\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static List<Group> parseSearchGroupsResult(JSONArray jsonArray) {\n\n\t\tList<Group> groups = null;\n\n\t\tif (jsonArray != null) {\n\n\t\t\ttry {\n\t\t\t\tgroups = new ArrayList<Group>();\n\n\t\t\t\t\/\/ Get the element that holds the groups ( JSONArray )\n\n\t\t\t\tfor (int i = 0; i < jsonArray.length(); i++) {\n\n\t\t\t\t\tJSONObject groupJson = jsonArray.getJSONObject(i);\n\n\t\t\t\t\tGroup group = new Group();\n\n\t\t\t\t\tgroup = sGsonExpose.fromJson(groupJson.toString(),\n\t\t\t\t\t\t\tGroup.class);\n\n\t\t\t\t\t\/\/ if (groupJson.has(Const.ATTACHMENTS)) {\n\t\t\t\t\t\/\/\n\t\t\t\t\t\/\/ List<Attachment> attachments = new\n\t\t\t\t\t\/\/ ArrayList<Attachment>();\n\t\t\t\t\t\/\/\n\t\t\t\t\t\/\/ JSONObject json_attachments = groupJson\n\t\t\t\t\t\/\/ .getJSONObject(Const.ATTACHMENTS);\n\t\t\t\t\t\/\/\n\t\t\t\t\t\/\/ @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\/\/ Iterator<String> keys = json_attachments.keys();\n\t\t\t\t\t\/\/ while (keys.hasNext()) {\n\t\t\t\t\t\/\/ String key = keys.next();\n\t\t\t\t\t\/\/ try {\n\t\t\t\t\t\/\/\n\t\t\t\t\t\/\/ JSONObject json_attachment = json_attachments\n\t\t\t\t\t\/\/ .getJSONObject(key);\n\t\t\t\t\t\/\/ Attachment attachment = sGsonExpose.fromJson(\n\t\t\t\t\t\/\/ json_attachment.toString(),\n\t\t\t\t\t\/\/ Attachment.class);\n\t\t\t\t\t\/\/ attachment.setName(key);\n\t\t\t\t\t\/\/ attachments.add(attachment);\n\t\t\t\t\t\/\/ } catch (Exception e) {\n\t\t\t\t\t\/\/ }\n\t\t\t\t\t\/\/ }\n\t\t\t\t\t\/\/ group.setAttachments(attachments);\n\t\t\t\t\t\/\/\n\t\t\t\t\t\/\/ String url = null;\n\t\t\t\t\t\/\/ if (group.getAvatarName() != null) {\n\t\t\t\t\t\/\/ url = CouchDB.getUrl() + group.getId() + \"\/\"\n\t\t\t\t\t\/\/ + group.getAvatarName();\n\t\t\t\t\t\/\/ } else {\n\t\t\t\t\t\/\/ url = CouchDB.getUrl() + group.getId() + \"\/\"\n\t\t\t\t\t\/\/ + Const.GROUP_AVATAR;\n\t\t\t\t\t\/\/ }\n\t\t\t\t\t\/\/ group.setImageUrl(url);\n\t\t\t\t\t\/\/\n\t\t\t\t\t\/\/ } else {\n\t\t\t\t\t\/\/ group.setImageUrl(null);\n\t\t\t\t\t\/\/ }\n\n\t\t\t\t\tgroups.add(group);\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(\n\t\t\t\t\t\tTAG + \"parseMultiUserObjects\",\n\t\t\t\t\t\t\"Error while retrieving data from json... Probably no users found!\",\n\t\t\t\t\t\te);\n\t\t\t}\n\t\t}\n\n\t\treturn groups;\n\t}\n\n\t\/**\n\t * Parses a single activity summary JSON object\n\t * \n\t * @param json\n\t * @return\n\t * @throws JSONException\n\t *\/\n\tpublic static ActivitySummary parseSingleActivitySummaryObject(\n\t\t\tJSONObject json) {\n\n\t\tActivitySummary activitySummary = null;\n\n\t\tif (json != null) {\n\t\t\t\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\tJSONArray rows = json.getJSONArray(Const.ROWS);\n\n\t\t\t\tif (rows.length() > 0) {\n\t\t\t\t\tJSONObject row = rows.getJSONObject(0);\n\t\t\t\t\tJSONObject activitySummaryJson = row\n\t\t\t\t\t\t\t.getJSONObject(Const.VALUE);\n\n\t\t\t\t\tactivitySummary = new ActivitySummary();\n\t\t\t\t\tactivitySummary = sGsonExpose.fromJson(\n\t\t\t\t\t\t\tactivitySummaryJson.toString(),\n\t\t\t\t\t\t\tActivitySummary.class);\n\n\t\t\t\t\tif (activitySummaryJson.has(Const.RECENT_ACTIVITY)) {\n\t\t\t\t\t\tJSONObject recentActivityListJson = activitySummaryJson\n\t\t\t\t\t\t\t\t.getJSONObject(Const.RECENT_ACTIVITY);\n\t\t\t\t\t\tList<RecentActivity> recentActivityList = CouchDBHelper\n\t\t\t\t\t\t\t\t.parseMultiRecentActivityObjects(recentActivityListJson);\n\t\t\t\t\t\tactivitySummary\n\t\t\t\t\t\t\t\t.setRecentActivityList(recentActivityList);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"parseSingleActivitySummaryObject\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\treturn activitySummary;\n\t}\n\n\t\/**\n\t * Parses multi RecentActivity JSON Objects\n\t * \n\t * @param recentActivityListJson\n\t * @return\n\t *\/\n\tpublic static List<RecentActivity> parseMultiRecentActivityObjects(\n\t\t\tJSONObject recentActivityListJson) {\n\n\t\tList<RecentActivity> recentActivityList = new ArrayList<RecentActivity>();\n\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tIterator<String> iterator = recentActivityListJson.keys();\n\t\twhile (iterator.hasNext()) {\n\t\t\tString key = iterator.next();\n\t\t\ttry {\n\t\t\t\tJSONObject recentActivityJson = recentActivityListJson\n\t\t\t\t\t\t.getJSONObject(key);\n\t\t\t\tRecentActivity recentActivity = new RecentActivity();\n\t\t\t\trecentActivity = sGsonExpose.fromJson(\n\t\t\t\t\t\trecentActivityJson.toString(), RecentActivity.class);\n\n\t\t\t\tif (recentActivityJson.has(Const.NOTIFICATIONS)) {\n\t\t\t\t\tJSONObject notificationsJson = recentActivityJson\n\t\t\t\t\t\t\t.getJSONObject(Const.NOTIFICATIONS);\n\t\t\t\t\trecentActivity\n\t\t\t\t\t\t\t.set_notifications(parseMultiNotificationObjects(notificationsJson));\n\t\t\t\t}\n\t\t\t\trecentActivityList.add(recentActivity);\n\n\t\t\t} catch (JSONException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\n\t\treturn recentActivityList;\n\t}\n\n\t\/**\n\t * Parses multi notification objects\n\t * \n\t * @param notificationsJson\n\t * @return\n\t *\/\n\tpublic static List<Notification> parseMultiNotificationObjects(\n\t\t\tJSONObject notificationsJson) {\n\n\t\tList<Notification> notifications = new ArrayList<Notification>();\n\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tIterator<String> iterator = notificationsJson.keys();\n\t\twhile (iterator.hasNext()) {\n\t\t\tString key = iterator.next();\n\t\t\ttry {\n\t\t\t\tJSONObject notificationJson = notificationsJson\n\t\t\t\t\t\t.getJSONObject(key);\n\t\t\t\tNotification notification = new Notification();\n\t\t\t\tnotification = sGsonExpose.fromJson(\n\t\t\t\t\t\tnotificationJson.toString(), Notification.class);\n\n\t\t\t\tif (notificationJson.has(Const.MESSAGES)) {\n\t\t\t\t\tJSONObject messagesJson = notificationJson\n\t\t\t\t\t\t\t.getJSONObject(Const.MESSAGES);\n\t\t\t\t\tnotification\n\t\t\t\t\t\t\t.setMessages(parseMultiNotificationMessageObjects(\n\t\t\t\t\t\t\t\t\tmessagesJson, notification.getTargetId()));\n\t\t\t\t}\n\n\t\t\t\tnotifications.add(notification);\n\t\t\t} catch (JSONException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn notifications;\n\t}\n\n\t\/**\n\t * Parses multi notification message objects\n\t * \n\t * @param messagesJson\n\t * @return\n\t *\/\n\tpublic static List<NotificationMessage> parseMultiNotificationMessageObjects(\n\t\t\tJSONObject messagesJson, String targetId) {\n\n\t\tList<NotificationMessage> messages = new ArrayList<NotificationMessage>();\n\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tIterator<String> iterator = messagesJson.keys();\n\t\twhile (iterator.hasNext()) {\n\t\t\tString key = iterator.next();\n\t\t\ttry {\n\t\t\t\tJSONObject messageJson = messagesJson.getJSONObject(key);\n\t\t\t\tNotificationMessage notificationMessage = new NotificationMessage();\n\t\t\t\tnotificationMessage = sGsonExpose.fromJson(\n\t\t\t\t\t\tmessageJson.toString(), NotificationMessage.class);\n\t\t\t\tnotificationMessage.setTargetId(targetId);\n\t\t\t\tnotificationMessage.setUserAvatarFileId(CouchDB\n\t\t\t\t\t\t.findAvatarFileId(notificationMessage.getFromUserId()));\n\t\t\t\tmessages.add(notificationMessage);\n\t\t\t} catch (JSONException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn messages;\n\t}\n\n\t\/**\n\t * Parse user JSON objects from get user contacts call\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static List<User> parseUserContacts(JSONObject json) {\n\n\t\tList<User> users = null;\n\n\t\tif (json != null) {\n\t\t\t\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tusers = new ArrayList<User>();\n\n\t\t\t\t\/\/ Get the element that holds the users ( JSONArray )\n\t\t\t\tJSONArray rows = json.getJSONArray(Const.ROWS);\n\n\t\t\t\tfor (int i = 0; i < rows.length(); i++) {\n\n\t\t\t\t\tJSONObject row = rows.getJSONObject(i);\n\t\t\t\t\tif (!row.isNull(Const.DOC)) {\n\t\t\t\t\t\tJSONObject userJson = row.getJSONObject(Const.DOC);\n\n\t\t\t\t\t\tUser user = new User();\n\n\t\t\t\t\t\tuser = sGsonExpose.fromJson(userJson.toString(),\n\t\t\t\t\t\t\t\tUser.class);\n\n\t\t\t\t\t\t\/\/ if (userJson.has(Const.ATTACHMENTS)) {\n\t\t\t\t\t\t\/\/\n\t\t\t\t\t\t\/\/ List<Attachment> attachments = new\n\t\t\t\t\t\t\/\/ ArrayList<Attachment>();\n\t\t\t\t\t\t\/\/\n\t\t\t\t\t\t\/\/ JSONObject json_attachments = userJson\n\t\t\t\t\t\t\/\/ .getJSONObject(Const.ATTACHMENTS);\n\t\t\t\t\t\t\/\/\n\t\t\t\t\t\t\/\/ @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\t\/\/ Iterator<String> keys = json_attachments.keys();\n\t\t\t\t\t\t\/\/ while (keys.hasNext()) {\n\t\t\t\t\t\t\/\/ String key = keys.next();\n\t\t\t\t\t\t\/\/ try {\n\t\t\t\t\t\t\/\/\n\t\t\t\t\t\t\/\/ JSONObject json_attachment = json_attachments\n\t\t\t\t\t\t\/\/ .getJSONObject(key);\n\t\t\t\t\t\t\/\/ Attachment attachment = sGsonExpose\n\t\t\t\t\t\t\/\/ .fromJson(\n\t\t\t\t\t\t\/\/ json_attachment.toString(),\n\t\t\t\t\t\t\/\/ Attachment.class);\n\t\t\t\t\t\t\/\/ attachment.setName(key);\n\t\t\t\t\t\t\/\/ attachments.add(attachment);\n\t\t\t\t\t\t\/\/ } catch (Exception e) {\n\t\t\t\t\t\t\/\/ }\n\t\t\t\t\t\t\/\/ }\n\t\t\t\t\t\t\/\/ user.setAttachments(attachments);\n\t\t\t\t\t\t\/\/\n\t\t\t\t\t\t\/\/ String url = null;\n\t\t\t\t\t\t\/\/ if (user.getAvatarName() != null) {\n\t\t\t\t\t\t\/\/ url = CouchDB.getUrl() + user.getId() + \"\/\"\n\t\t\t\t\t\t\/\/ + user.getAvatarName();\n\t\t\t\t\t\t\/\/ } else {\n\t\t\t\t\t\t\/\/ url = CouchDB.getUrl() + user.getId() + \"\/\"\n\t\t\t\t\t\t\/\/ + Const.USER_AVATAR;\n\t\t\t\t\t\t\/\/ }\n\t\t\t\t\t\t\/\/ user.setImageUrl(url);\n\t\t\t\t\t\t\/\/\n\t\t\t\t\t\t\/\/ } else {\n\t\t\t\t\t\t\/\/ user.setImageUrl(null);\n\t\t\t\t\t\t\/\/ }\n\n\t\t\t\t\t\tif (userJson.has(Const.FAVORITE_GROUPS)) {\n\t\t\t\t\t\t\tJSONArray favorite_groups = userJson\n\t\t\t\t\t\t\t\t\t.getJSONArray(Const.FAVORITE_GROUPS);\n\n\t\t\t\t\t\t\tList<String> groups = new ArrayList<String>();\n\n\t\t\t\t\t\t\tfor (int z = 0; z < favorite_groups.length(); z++) {\n\t\t\t\t\t\t\t\tgroups.add(favorite_groups.getString(z));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tuser.setGroupIds(groups);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (userJson.has(Const.CONTACTS)) {\n\t\t\t\t\t\t\tJSONArray contacts = userJson\n\t\t\t\t\t\t\t\t\t.getJSONArray(Const.CONTACTS);\n\n\t\t\t\t\t\t\tList<String> contactsIds = new ArrayList<String>();\n\n\t\t\t\t\t\t\tfor (int j = 0; j < contacts.length(); j++) {\n\t\t\t\t\t\t\t\tcontactsIds.add(contacts.getString(j));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tuser.setContactIds(contactsIds);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tusers.add(user);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(\n\t\t\t\t\t\tTAG + \"parseUserContacts\",\n\t\t\t\t\t\t\"Error while retrieving data from json... Probably no users found!\",\n\t\t\t\t\t\te);\n\t\t\t}\n\t\t}\n\n\t\treturn users;\n\t}\n\n\t\/**\n\t * Parse comment JSON objects from get message comments\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static List<Comment> parseMessageComments(JSONObject json) {\n\n\t\tList<Comment> comments = null;\n\n\t\tif (json != null) {\n\t\t\t\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcomments = new ArrayList<Comment>();\n\n\t\t\t\t\/\/ Get the element that holds the users ( JSONArray )\n\t\t\t\tJSONArray rows = json.getJSONArray(Const.ROWS);\n\n\t\t\t\tfor (int i = 0; i < rows.length(); i++) {\n\n\t\t\t\t\tJSONObject row = rows.getJSONObject(i);\n\t\t\t\t\tif (!row.isNull(Const.DOC)) {\n\t\t\t\t\t\tJSONObject commentJson = row.getJSONObject(Const.DOC);\n\n\t\t\t\t\t\tComment comment = new Comment();\n\t\t\t\t\t\tcomment = sGsonExpose.fromJson(commentJson.toString(),\n\t\t\t\t\t\t\t\tComment.class);\n\t\t\t\t\t\tcomments.add(comment);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(\n\t\t\t\t\t\tTAG + \"parseMessageComments\",\n\t\t\t\t\t\t\"Error while retrieving data from json... Probably no comments found!\",\n\t\t\t\t\t\te);\n\t\t\t}\n\t\t}\n\n\t\treturn comments;\n\t}\n\n\t\/**\n\t * Create user response object\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static String createUser(JSONObject json) {\n\n\t\tboolean ok = false;\n\t\tString id = null;\n\n\t\tif (json != null) {\n\t\t\t\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tok = json.getBoolean(Const.OK);\n\t\t\t\tid = json.getString(Const.ID);\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"createUser\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\tif (!ok) {\n\t\t\tLogger.error(TAG + \"createUser\", \"error in creating user\");\n\t\t}\n\n\t\treturn id;\n\t}\n\n\t\/**\n\t * Update user response object, the Const.REV value is important in order to\n\t * continue using the application\n\t * \n\t * If you are updating contacts or favorites on of them should be null\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static boolean updateUser(JSONObject json, List<String> contactsIds,\n\t\t\tList<String> groupsIds) {\n\n\t\tboolean ok = false;\n\t\tString rev = \"\";\n\n\t\tif (json != null) {\n\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(false, true, isInvalidToken(json));\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tok = json.getBoolean(Const.OK);\n\t\t\t\trev = json.getString(Const.REV);\n\n\t\t\t\tif (ok) {\n\t\t\t\t\tUsersManagement.getLoginUser().setRev(rev);\n\n\t\t\t\t\tif (null != contactsIds) {\n\t\t\t\t\t\tUsersManagement.getLoginUser().setContactIds(\n\t\t\t\t\t\t\t\tcontactsIds);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (null != groupsIds) {\n\t\t\t\t\t\tUsersManagement.getLoginUser().setGroupIds(groupsIds);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"updateUser\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t\/**\n\t * JSON response from creating a group\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static String createGroup(JSONObject json) {\n\n\t\tboolean ok = false;\n\t\tString id = null;\n\n\t\tif (json != null) {\n\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tok = json.getBoolean(Const.OK);\n\t\t\t\tid = json.getString(Const.ID);\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"createGroup\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\tif (!ok) {\n\t\t\tLogger.error(TAG + \"createGroup\", \"error in creating a group\");\n\t\t\treturn null;\n\t\t}\n\n\t\treturn id;\n\t}\n\n\t\/**\n\t * JSON response from deleting a group\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static boolean deleteGroup(JSONObject json) {\n\n\t\tboolean ok = false;\n\n\t\tif (json != null) {\n\n\t\t    if (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(false, false, isInvalidToken(json));\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tok = json.getBoolean(Const.OK);\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"deleteGroup\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\treturn ok;\n\t}\n\n\tpublic static String findAvatarFileId(JSONObject json) {\n\t\tString avatarFileId = null;\n\n\t\tif (json != null) {\n\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\tJSONArray rows = json.getJSONArray(Const.ROWS);\n\n\t\t\t\tfor (int i = 0; i < rows.length(); i++) {\n\n\t\t\t\t\tJSONObject row = rows.getJSONObject(i);\n\t\t\t\t\tavatarFileId = row.getString(Const.VALUE);\n\n\t\t\t\t}\n\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"findAvatarFileId\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\treturn avatarFileId;\n\t}\n\n\t\/**\n\t * JSON response from deleting a user group\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static boolean deleteUserGroup(JSONObject json) {\n\n\t\tboolean ok = false;\n\n\t\tif (json != null) {\n\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(false, false, isInvalidToken(json));\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tok = json.getBoolean(Const.OK);\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"deleteUserGroup\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\treturn ok;\n\t}\n\n\t\/**\n\t * JSON response from creating a user group\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static String createUserGroup(JSONObject json) {\n\n\t\tboolean ok = false;\n\t\tString id = null;\n\n\t\tif (json != null) {\n\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tok = json.getBoolean(Const.OK);\n\t\t\t\tid = json.getString(Const.ID);\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"createUserGroup\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\tif (!ok) {\n\t\t\tLogger.error(TAG + \"createUserGroup\", \"error in creating a group\");\n\t\t\treturn null;\n\t\t}\n\n\t\treturn id;\n\t}\n\n\t\/**\n\t * JSON response from creating a comment\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static String createComment(JSONObject json) {\n\n\t\tboolean ok = false;\n\t\tString id = null;\n\n\t\tif (json != null) {\n\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tok = json.getBoolean(Const.OK);\n\t\t\t\tid = json.getString(Const.ID);\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"createComment\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\tif (!ok) {\n\t\t\tLogger.error(TAG + \"createComment\", \"error in creating comment\");\n\t\t\treturn null;\n\t\t}\n\n\t\treturn id;\n\t}\n\n\t\/**\n\t * JSON response from updating a group you own\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static boolean updateGroup(JSONObject json) {\n\n\t\tboolean ok = false;\n\n\t\tif (json != null) {\n\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(false, false, isInvalidToken(json));\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tok = json.getBoolean(Const.OK);\n\n\t\t\t\t\/* Important *\/\n\t\t\t\tUsersManagement.getToGroup().setRev(json.getString(Const.REV));\n\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"updateGroup\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\tif (!ok) {\n\t\t\tLogger.error(TAG + \"updateGroup\", \"error in updating a group\");\n\t\t}\n\n\t\treturn ok;\n\t}\n\n\t\/**\n\t * Parse single JSON object of type Group\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static Group parseSingleGroupObject(JSONObject json) {\n\n\t\tGroup group = null;\n\n\t\tif (json != null) {\n\t\t\t\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\tJSONArray rows = json.getJSONArray(Const.ROWS);\n\t\t\t\tJSONObject row = rows.getJSONObject(0);\n\n\t\t\t\tJSONObject groupJson = row.getJSONObject(Const.VALUE);\n\t\t\t\tgroup = sGsonExpose.fromJson(groupJson.toString(), Group.class);\n\n\t\t\t\t\/\/ if (groupJson.has(Const.ATTACHMENTS)) {\n\t\t\t\t\/\/ List<Attachment> attachments = new ArrayList<Attachment>();\n\t\t\t\t\/\/\n\t\t\t\t\/\/ JSONObject json_attachments = groupJson\n\t\t\t\t\/\/ .getJSONObject(Const.ATTACHMENTS);\n\t\t\t\t\/\/\n\t\t\t\t\/\/ @SuppressWarnings(\"unchecked\")\n\t\t\t\t\/\/ Iterator<String> keys = json_attachments.keys();\n\t\t\t\t\/\/ while (keys.hasNext()) {\n\t\t\t\t\/\/ String key = keys.next();\n\t\t\t\t\/\/ try {\n\t\t\t\t\/\/\n\t\t\t\t\/\/ JSONObject json_attachment = json_attachments\n\t\t\t\t\/\/ .getJSONObject(key);\n\t\t\t\t\/\/ Attachment attachment = sGsonExpose.fromJson(\n\t\t\t\t\/\/ json_attachment.toString(),\n\t\t\t\t\/\/ Attachment.class);\n\t\t\t\t\/\/ attachment.setName(key);\n\t\t\t\t\/\/ attachments.add(attachment);\n\t\t\t\t\/\/ } catch (Exception e) {\n\t\t\t\t\/\/ }\n\t\t\t\t\/\/ }\n\t\t\t\t\/\/ group.setAttachments(attachments);\n\t\t\t\t\/\/\n\t\t\t\t\/\/ String url = null;\n\t\t\t\t\/\/ if (group.getAvatarName() != null) {\n\t\t\t\t\/\/ url = CouchDB.getUrl() + group.getId() + \"\/\"\n\t\t\t\t\/\/ + group.getAvatarName();\n\t\t\t\t\/\/ } else {\n\t\t\t\t\/\/ url = CouchDB.getUrl() + group.getId() + \"\/\"\n\t\t\t\t\/\/ + Const.GROUP_AVATAR;\n\t\t\t\t\/\/ }\n\t\t\t\t\/\/ group.setImageUrl(url);\n\t\t\t\t\/\/ } else {\n\t\t\t\t\/\/ group.setImageUrl(null);\n\t\t\t\t\/\/ }\n\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"parseSingleGroupObject\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\treturn group;\n\t}\n\n\t   \/**\n     * Parse single JSON object of type Group\n     * \n     * @param json\n     * @return\n     *\/\n    public static Group parseSingleGroupObjectWithoutRowParam(JSONObject json) {\n\n        Group group = null;\n\n        if (json != null) {\n        \t\n        \tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n            try {\n\n                group = sGsonExpose.fromJson(json.toString(), Group.class);\n\n            } catch (Exception e) {\n                Logger.error(TAG + \"parseSingleGroupObject\",\n                        \"Error while retrieving data from json\", e);\n            }\n        }\n\n        return group;\n    }\n    \n\t\/**\n\t * Parse multi JSON objects of type Group\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static List<Group> parseMultiGroupObjects(JSONObject json) {\n\n\t\tList<Group> groups = null;\n\n\t\tif (json != null) {\n\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tgroups = new ArrayList<Group>();\n\n\t\t\t\tJSONArray rows = json.getJSONArray(Const.ROWS);\n\n\t\t\t\tfor (int i = 0; i < rows.length(); i++) {\n\n\t\t\t\t\tJSONObject row = rows.getJSONObject(i);\n\t\t\t\t\tString key = row.getString(Const.KEY);\n\n\t\t\t\t\tif (!key.equals(Const.NULL)) {\n\n\t\t\t\t\t\tJSONObject groupJson = row.getJSONObject(Const.VALUE);\n\n\t\t\t\t\t\tGroup group = sGsonExpose.fromJson(\n\t\t\t\t\t\t\t\tgroupJson.toString(), Group.class);\n\n\t\t\t\t\t\t\/\/ if (groupJson.has(Const.ATTACHMENTS)) {\n\t\t\t\t\t\t\/\/ List<Attachment> attachments = new\n\t\t\t\t\t\t\/\/ ArrayList<Attachment>();\n\t\t\t\t\t\t\/\/\n\t\t\t\t\t\t\/\/ JSONObject json_attachments = groupJson\n\t\t\t\t\t\t\/\/ .getJSONObject(Const.ATTACHMENTS);\n\t\t\t\t\t\t\/\/\n\t\t\t\t\t\t\/\/ @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\t\/\/ Iterator<String> keys = json_attachments.keys();\n\t\t\t\t\t\t\/\/ while (keys.hasNext()) {\n\t\t\t\t\t\t\/\/ String attachmentKey = keys.next();\n\t\t\t\t\t\t\/\/ try {\n\t\t\t\t\t\t\/\/\n\t\t\t\t\t\t\/\/ JSONObject json_attachment = json_attachments\n\t\t\t\t\t\t\/\/ .getJSONObject(attachmentKey);\n\t\t\t\t\t\t\/\/ Attachment attachment = sGsonExpose\n\t\t\t\t\t\t\/\/ .fromJson(\n\t\t\t\t\t\t\/\/ json_attachment.toString(),\n\t\t\t\t\t\t\/\/ Attachment.class);\n\t\t\t\t\t\t\/\/ attachment.setName(attachmentKey);\n\t\t\t\t\t\t\/\/ attachments.add(attachment);\n\t\t\t\t\t\t\/\/ } catch (Exception e) {\n\t\t\t\t\t\t\/\/ }\n\t\t\t\t\t\t\/\/ }\n\t\t\t\t\t\t\/\/ group.setAttachments(attachments);\n\t\t\t\t\t\t\/\/\n\t\t\t\t\t\t\/\/ String url = null;\n\t\t\t\t\t\t\/\/ if (group.getAvatarName() != null) {\n\t\t\t\t\t\t\/\/ url = CouchDB.getUrl() + group.getId() + \"\/\"\n\t\t\t\t\t\t\/\/ + group.getAvatarName();\n\t\t\t\t\t\t\/\/ } else {\n\t\t\t\t\t\t\/\/ url = CouchDB.getUrl() + group.getId() + \"\/\"\n\t\t\t\t\t\t\/\/ + Const.GROUP_AVATAR;\n\t\t\t\t\t\t\/\/ }\n\t\t\t\t\t\t\/\/ group.setImageUrl(url);\n\t\t\t\t\t\t\/\/\n\t\t\t\t\t\t\/\/ } else {\n\t\t\t\t\t\t\/\/ group.setImageUrl(null);\n\t\t\t\t\t\t\/\/ }\n\n\t\t\t\t\t\tgroups.add(group);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"parseMultiGroupObjects\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\treturn groups;\n\t}\n\n\t\/**\n\t * Parse favorite groups JSON objects\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static List<Group> parseFavoriteGroups(JSONObject json) {\n\n\t\tList<Group> groups = null;\n\n\t\tif (json != null) {\n\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tgroups = new ArrayList<Group>();\n\n\t\t\t\tJSONArray rows = json.getJSONArray(Const.ROWS);\n\n\t\t\t\tfor (int i = 0; i < rows.length(); i++) {\n\n\t\t\t\t\tJSONObject row = rows.getJSONObject(i);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tJSONObject groupJson = row.getJSONObject(Const.DOC);\n\n\t\t\t\t\t\tString type = groupJson.getString(Const.TYPE);\n\t\t\t\t\t\tif (!type.equals(Const.GROUP)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tGroup group = sGsonExpose.fromJson(\n\t\t\t\t\t\t\t\tgroupJson.toString(), Group.class);\n\n\t\t\t\t\t\tgroups.add(group);\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"parseFavoriteGroups\", e);\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\n\t\treturn groups;\n\t}\n\n\t\/**\n\t * Parse multi JSON objects of type UserGroup\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static List<UserGroup> parseMultiUserGroupObjects(JSONObject json) {\n\n\t\tList<UserGroup> usersGroup = null;\n\n\t\tif (json != null) {\n\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tusersGroup = new ArrayList<UserGroup>();\n\n\t\t\t\tJSONArray rows = json.getJSONArray(Const.ROWS);\n\n\t\t\t\tfor (int i = 0; i < rows.length(); i++) {\n\n\t\t\t\t\tJSONObject row = rows.getJSONObject(i);\n\t\t\t\t\tString key = row.getString(Const.KEY);\n\n\t\t\t\t\tif (!key.equals(Const.NULL)) {\n\n\t\t\t\t\t\tJSONObject userGroupJson = row\n\t\t\t\t\t\t\t\t.getJSONObject(Const.VALUE);\n\n\t\t\t\t\t\tUserGroup userGroup = sGsonExpose.fromJson(\n\t\t\t\t\t\t\t\tuserGroupJson.toString(), UserGroup.class);\n\t\t\t\t\t\tusersGroup.add(userGroup);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"parseMultiUserGroupObjects\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\treturn usersGroup;\n\t}\n\t\n\t\/**\n\t * Parse multi JSON objects of type GroupCategory\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static List<GroupCategory> parseMultiGroupCategoryObjects(JSONObject json) {\n\t\tList<GroupCategory> groupCategories = null;\n\n\t\tif (json != null) {\n\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tgroupCategories = new ArrayList<GroupCategory>();\n\n\t\t\t\tJSONArray rows = json.getJSONArray(Const.ROWS);\n\n\t\t\t\tfor (int i = 0; i < rows.length(); i++) {\n\n\t\t\t\t\tJSONObject row = rows.getJSONObject(i);\n\t\t\t\t\tString key = row.getString(Const.KEY);\n\n\t\t\t\t\tif (!key.equals(Const.NULL)) {\n\n\t\t\t\t\t\tJSONObject groupCategoryJson = row.getJSONObject(Const.VALUE);\n\n\t\t\t\t\t\tGroupCategory groupCategory = sGsonExpose.fromJson(\n\t\t\t\t\t\t\t\tgroupCategoryJson.toString(), GroupCategory.class);\n\n\t\t\t\t\t\tif (groupCategoryJson.has(Const.ATTACHMENTS)) {\n\t\t\t\t\t\t\tList<Attachment> attachments = new ArrayList<Attachment>();\n\n\t\t\t\t\t\t\tJSONObject json_attachments = groupCategoryJson\n\t\t\t\t\t\t\t\t\t.getJSONObject(Const.ATTACHMENTS);\n\n\t\t\t\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\t\tIterator<String> keys = json_attachments.keys();\n\t\t\t\t\t\t\twhile (keys.hasNext()) {\n\t\t\t\t\t\t\t\tString attachmentKey = keys.next();\n\t\t\t\t\t\t\t\ttry {\n\n\t\t\t\t\t\t\t\t\tJSONObject json_attachment = json_attachments\n\t\t\t\t\t\t\t\t\t\t\t.getJSONObject(attachmentKey);\n\t\t\t\t\t\t\t\t\tAttachment attachment = sGsonExpose\n\t\t\t\t\t\t\t\t\t\t\t.fromJson(\n\t\t\t\t\t\t\t\t\t\t\t\t\tjson_attachment.toString(),\n\t\t\t\t\t\t\t\t\t\t\t\t\tAttachment.class);\n\t\t\t\t\t\t\t\t\tattachment.setName(attachmentKey);\n\t\t\t\t\t\t\t\t\tattachments.add(attachment);\n\t\t\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tgroupCategory.setAttachments(attachments);\n\n\t\t\t\t\t\t\tString imageUrl = CouchDB.getUrl() + groupCategory.getId() + \"\/\"\n\t\t\t\t\t\t\t\t\t\t+ Const.GROUP_CATEGORY_AVATAR;\n\t\t\t\t\t\t\tgroupCategory.setImageUrl(imageUrl);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tgroupCategory.setImageUrl(null);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgroupCategories.add(groupCategory);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"parseMultiGroupObjects\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\treturn groupCategories;\n\t}\n\n\t\/**\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static int getCommentCount(JSONObject json) {\n\n\t\tint count = 0;\n\n\t\tif (json != null) {\n\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\tJSONArray rows = json.getJSONArray(Const.ROWS);\n\n\t\t\t\tfor (int i = 0; i < rows.length(); i++) {\n\n\t\t\t\t\tJSONObject row = rows.getJSONObject(i);\n\t\t\t\t\tcount = row.getInt(Const.VALUE);\n\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"getCommentCount\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\treturn count;\n\t}\n\n\t\/**\n\t * Find a single Message object\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static Message findMessage(JSONObject json) {\n\t\t\n\t\tif (json.has(Const.ERROR)) {\n\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\treturn parseMessageObject(json, false, false, false);\n\t}\n\n\t\/**\n\t * Find all messages for current user\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static ArrayList<Message> findMessagesForUser(JSONObject json) {\n\t\tArrayList<Message> messages = null;\n\n\t\tif (json != null) {\n\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tmessages = new ArrayList<Message>();\n\n\t\t\t\tJSONArray rows = json.getJSONArray(Const.ROWS);\n\n\t\t\t\tfor (int i = 0; i < rows.length(); i++) {\n\n\t\t\t\t\tJSONObject row = rows.getJSONObject(i);\n\t\t\t\t\tJSONObject msgJson = row.getJSONObject(Const.VALUE);\n\n\t\t\t\t\tMessage message = null;\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tString messageType = msgJson\n\t\t\t\t\t\t\t\t.getString(Const.MESSAGE_TYPE);\n\n\t\t\t\t\t\tif (messageType.equals(Const.TEXT)) {\n\n\t\t\t\t\t\t\tmessage = new Gson().fromJson(msgJson.toString(),\n\t\t\t\t\t\t\t\t\tMessage.class);\n\n\t\t\t\t\t\t} else if (messageType.equals(Const.IMAGE)) {\n\n\t\t\t\t\t\t\tmessage = parseMessageObject(msgJson, true, false,\n\t\t\t\t\t\t\t\t\tfalse);\n\n\t\t\t\t\t\t} else if (messageType.equals(Const.VOICE)) {\n\n\t\t\t\t\t\t\tmessage = parseMessageObject(msgJson, false, true,\n\t\t\t\t\t\t\t\t\tfalse);\n\n\t\t\t\t\t\t} else if (messageType.equals(Const.VIDEO)) {\n\n\t\t\t\t\t\t\tmessage = parseMessageObject(msgJson, false, false,\n\t\t\t\t\t\t\t\t\ttrue);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (messageType.equals(Const.EMOTICON)) {\n\n\t\t\t\t\t\t\tmessage = parseMessageObject(msgJson, false, false,\n\t\t\t\t\t\t\t\t\tfalse);\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tmessage = new Gson().fromJson(msgJson.toString(),\n\t\t\t\t\t\t\t\t\tMessage.class);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (null == message) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else {\n\t\t\t\t\t    \n\t\t\t\t\t    String avatarFileId = CouchDB.getFromMemCache(message.getFromUserId());\n\t\t\t\t\t    \n\t\t\t\t\t    if(avatarFileId == null){\n\t                        avatarFileId = CouchDB.findAvatarFileId(message.getFromUserId());\n\t                        CouchDB.saveToMemCache(message.getFromUserId(),avatarFileId);\n\t\t\t\t\t    }else{\n\t\t\t\t\t        Log.d(\"test\",avatarFileId);\n\t\t\t\t\t    }\n\n\t\t\t\t\t\tmessage.setUserAvatarFileId(avatarFileId);\n\t\t\t\t\t\tmessages.add(message);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"findMessagesForUser\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\tif (null != messages) {\n\t\t\tCollections.sort(messages);\n\t\t}\n\n\t\treturn messages;\n\t}\n\n\t\/**\n\t * Parse a single JSON object of Message type\n\t * \n\t * @param json\n\t * @param image\n\t * @param voice\n\t * @return\n\t *\/\n\tprivate static Message parseMessageObject(JSONObject json, boolean image,\n\t\t\tboolean voice, boolean video) {\n\n\t\tMessage message = new Message();\n\n\t\tif (json == null) {\n\t\t\treturn message;\n\t\t}\n\n\t\tif (json.has(Const.ERROR)) {\n\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\treturn null;\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setId(json.getString(Const._ID));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setId(\"\");\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setRev(json.getString(Const._REV));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setRev(\"\");\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setType(json.getString(Const.TYPE));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setType(\"\");\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setMessageType(json.getString(Const.MESSAGE_TYPE));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setMessageType(\"\");\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setMessageTargetType(json\n\t\t\t\t\t.getString(Const.MESSAGE_TARGET_TYPE));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setMessageTargetType(\"\");\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setBody(json.getString(Const.BODY));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setBody(\"\");\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setFromUserId(json.getString(Const.FROM_USER_ID));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setFromUserId(\"\");\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setFromUserName(json.getString(Const.FROM_USER_NAME));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setFromUserName(\"\");\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setToUserId(json.getString(Const.TO_USER_ID));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setToUserId(\"\");\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setToGroupName(json.getString(Const.TO_USER_NAME));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setToGroupName(\"\");\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setToGroupId(json.getString(Const.TO_GROUP_ID));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setToGroupId(\"\");\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setToGroupName(json.getString(Const.TO_GROUP_NAME));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setToGroupName(\"\");\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setCreated(json.getLong(Const.CREATED));\n\t\t} catch (JSONException e) {\n\t\t\treturn null;\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setModified(json.getLong(Const.MODIFIED));\n\t\t} catch (JSONException e) {\n\t\t\treturn null;\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setValid(json.getBoolean(Const.VALID));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setValid(true);\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setAttachments(json.getJSONObject(Const.ATTACHMENTS)\n\t\t\t\t\t.toString());\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setAttachments(\"\");\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setLatitude(json.getString(Const.LATITUDE));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setLatitude(\"\");\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setLongitude(json.getString(Const.LONGITUDE));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setLongitude(\"\");\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setImageFileId((json.getString(Const.PICTURE_FILE_ID)));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setImageFileId(\"\");\n\t\t}\n\n       try {\n                message.setImageThumbFileId((json.getString(Const.PICTURE_THUMB_FILE_ID)));\n        } catch (JSONException e) {\n                message.setImageThumbFileId(\"\");\n        }\n\t      \n\t\ttry {\n\t\t\tmessage.setVideoFileId((json.getString(Const.VIDEO_FILE_ID)));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setVideoFileId(\"\");\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setVoiceFileId((json.getString(Const.VOICE_FILE_ID)));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setVoiceFileId(\"\");\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setEmoticonImageUrl(json\n\t\t\t\t\t.getString(Const.EMOTICON_IMAGE_URL));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setEmoticonImageUrl(\"\");\n\t\t}\n\n\t\tif (image || video || voice) {\n\t\t\tmessage.setCommentCount(CouchDB.getCommentCount(message.getId()));\n\t\t}\n\n\t\treturn message;\n\t}\n\n\t\/**\n\t * Parse comments Json\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static List<Comment> parseCommentsJson(JSONObject json) {\n\n\t\tList<Comment> comments = null;\n\n\t\tif (json != null) {\n\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcomments = new ArrayList<Comment>();\n\n\t\t\t\tJSONArray rows = json.getJSONArray(Const.COMMENTS);\n\n\t\t\t\tfor (int i = 0; i < rows.length(); i++) {\n\n\t\t\t\t\tJSONObject commentJson = rows.getJSONObject(i);\n\n\t\t\t\t\tComment comment = sGsonExpose.fromJson(\n\t\t\t\t\t\t\tcommentJson.toString(), Comment.class);\n\n\t\t\t\t\tcomments.add(comment);\n\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"parseCommentsJson\",\n\t\t\t\t\t\t\"Error in parsing JSON data\", e);\n\t\t\t}\n\t\t}\n\n\t\treturn comments;\n\t}\n\n\t\/**\n\t * Parse multi comment objects\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static List<Comment> parseMultiCommentObjects(JSONObject json) {\n\n\t\tList<Comment> comments = null;\n\n\t\tif (json != null) {\n\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcomments = new ArrayList<Comment>();\n\n\t\t\t\tJSONArray rows = json.getJSONArray(Const.ROWS);\n\n\t\t\t\tfor (int i = 0; i < rows.length(); i++) {\n\n\t\t\t\t\tJSONObject row = rows.getJSONObject(i);\n\n\t\t\t\t\tString key = row.getString(Const.KEY);\n\n\t\t\t\t\tif (!\"null\".equals(key)) {\n\n\t\t\t\t\t\tJSONObject commentJson = row.getJSONObject(Const.VALUE);\n\n\t\t\t\t\t\tComment comment = sGsonExpose.fromJson(\n\t\t\t\t\t\t\t\tcommentJson.toString(), Comment.class);\n\n\t\t\t\t\t\tcomments.add(comment);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"parseMultiComments\",\n\t\t\t\t\t\t\"Error in parsing JSON data\", e);\n\t\t\t}\n\t\t}\n\n\t\treturn comments;\n\t}\n\n\t\/**\n\t * Parse multi emoticon objects\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static List<Emoticon> parseMultiEmoticonObjects(JSONObject json) {\n\n\t\tList<Emoticon> emoticons = null;\n\n\t\tif (json != null) {\n\t\t\t\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\temoticons = new ArrayList<Emoticon>();\n\n\t\t\t\tJSONArray rows = json.getJSONArray(Const.ROWS);\n\n\t\t\t\tfor (int i = 0; i < rows.length(); i++) {\n\n\t\t\t\t\tJSONObject row = rows.getJSONObject(i);\n\n\t\t\t\t\tString key = row.getString(Const.KEY);\n\n\t\t\t\t\tif (!\"null\".equals(key)) {\n\n\t\t\t\t\t\tJSONObject emoticonJson = row\n\t\t\t\t\t\t\t\t.getJSONObject(Const.VALUE);\n\n\t\t\t\t\t\tEmoticon emoticon = sGsonExpose.fromJson(\n\t\t\t\t\t\t\t\temoticonJson.toString(), Emoticon.class);\n\n\t\t\t\t\t\temoticons.add(emoticon);\n\n\/\/\t\t\t\t\t\tSpikaApp.getFileDir().saveFile(\n\/\/\t\t\t\t\t\t\t\temoticon.getIdentifier(),\n\/\/\t\t\t\t\t\t\t\temoticon.getImageUrl());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"parseMultiEmoticons\",\n\t\t\t\t\t\t\"Error i parsing JSON data\", e);\n\t\t\t}\n\t\t}\n\n\t\treturn emoticons;\n\t}\n\t\n\t\/**\n\t * JSON response from creating a watching group log\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static String createWatchingGroupLog(JSONObject json) {\n\n\t\tboolean ok = false;\n\t\tString id = null;\n\t\tString rev = null;\n\n\t\tif (json != null) {\n\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tok = json.getBoolean(Const.OK);\n\t\t\t\tid = json.getString(Const.ID);\n\t\t\t\trev = json.getString(Const.REV);\n\t\t\t\t\n\t\t\t\tSpikaApp.getPreferences().setWatchingGroupId(id);\n\t\t\t\tSpikaApp.getPreferences().setWatchingGroupRev(rev);\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"createWatchingGroupLog\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\tif (!ok) {\n\t\t\tLogger.error(TAG + \"createWatchingGroupLog\", \"error in creating a watching group log\");\n\t\t\treturn null;\n\t\t}\n\n\t\treturn id;\n\t}\n\t\n\t\/**\n\t * JSON response from deleting a watching group log\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static boolean deleteWatchingGroupLog(JSONObject json) {\n\n\t\tboolean ok = false;\n\n\t\tif (json != null) {\n\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(false, false, isInvalidToken(json));\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tok = json.getBoolean(Const.OK);\n\t\t\t\t\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"deleteWatchingGroupLog\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\treturn ok;\n\t}\n\t\n\tprivate static boolean isInvalidToken(JSONObject json) {\n\t\tif (json.has(Const.MESSAGE)) {\n\t\t\ttry {\n\t\t\t\tString errorMessage = json.getString(Const.MESSAGE);\n\t\t\t\tif (errorMessage.equalsIgnoreCase(Const.INVALID_TOKEN)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} catch (JSONException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static Object appLogout(Object object, boolean isUserUpdateConflict, boolean isInvalidToken) {\n\t\tSideBarActivity.appLogout(isUserUpdateConflict, true, isInvalidToken);\n\t\treturn object;\n\t}\n\t\n\n}","pos":1,"subs":[{"java.line_comment":{"text":"\t\t\t\t\/\/ Get the element that holds the users ( JSONArray )","pos":6019,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":6019}},{"java.line_comment_body":{"text":"\/\/ Get the element that holds the users ( JSONArray )","pos":6023,"subs":[{"java.line_comment_text":{"text":" Get the element that holds the users ( JSONArray )","pos":6025}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ Get the element that holds the users ( JSONArray )","pos":7570,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":7570}},{"java.line_comment_body":{"text":"\/\/ Get the element that holds the users ( JSONArray )","pos":7574,"subs":[{"java.line_comment_text":{"text":" Get the element that holds the users ( JSONArray )","pos":7576}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ Get the element that holds the groups ( JSONArray )","pos":8975,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":8975}},{"java.line_comment_body":{"text":"\/\/ Get the element that holds the groups ( JSONArray )","pos":8979,"subs":[{"java.line_comment_text":{"text":" Get the element that holds the groups ( JSONArray )","pos":8981}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/ if (groupJson.has(Const.ATTACHMENTS)) {","pos":9255,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":9255}},{"java.line_comment_body":{"text":"\/\/ if (groupJson.has(Const.ATTACHMENTS)) {","pos":9260,"subs":[{"java.line_comment_text":{"text":" if (groupJson.has(Const.ATTACHMENTS)) {","pos":9262}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/","pos":9303,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":9303}},{"java.line_comment_body":{"text":"\/\/","pos":9308,"subs":[{"java.line_comment_text":{"text":"","pos":9310}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/ List<Attachment> attachments = new","pos":9311,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":9311}},{"java.line_comment_body":{"text":"\/\/ List<Attachment> attachments = new","pos":9316,"subs":[{"java.line_comment_text":{"text":" List<Attachment> attachments = new","pos":9318}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/ ArrayList<Attachment>();","pos":9354,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":9354}},{"java.line_comment_body":{"text":"\/\/ ArrayList<Attachment>();","pos":9359,"subs":[{"java.line_comment_text":{"text":" ArrayList<Attachment>();","pos":9361}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/","pos":9387,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":9387}},{"java.line_comment_body":{"text":"\/\/","pos":9392,"subs":[{"java.line_comment_text":{"text":"","pos":9394}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/ JSONObject json_attachments = groupJson","pos":9395,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":9395}},{"java.line_comment_body":{"text":"\/\/ JSONObject json_attachments = groupJson","pos":9400,"subs":[{"java.line_comment_text":{"text":" JSONObject json_attachments = groupJson","pos":9402}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/ .getJSONObject(Const.ATTACHMENTS);","pos":9443,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":9443}},{"java.line_comment_body":{"text":"\/\/ .getJSONObject(Const.ATTACHMENTS);","pos":9448,"subs":[{"java.line_comment_text":{"text":" .getJSONObject(Const.ATTACHMENTS);","pos":9450}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/","pos":9486,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":9486}},{"java.line_comment_body":{"text":"\/\/","pos":9491,"subs":[{"java.line_comment_text":{"text":"","pos":9493}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/ @SuppressWarnings(\"unchecked\")","pos":9494,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":9494}},{"java.line_comment_body":{"text":"\/\/ @SuppressWarnings(\"unchecked\")","pos":9499,"subs":[{"java.line_comment_text":{"text":" @SuppressWarnings(\"unchecked\")","pos":9501}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/ Iterator<String> keys = json_attachments.keys();","pos":9533,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":9533}},{"java.line_comment_body":{"text":"\/\/ Iterator<String> keys = json_attachments.keys();","pos":9538,"subs":[{"java.line_comment_text":{"text":" Iterator<String> keys = json_attachments.keys();","pos":9540}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/ while (keys.hasNext()) {","pos":9590,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":9590}},{"java.line_comment_body":{"text":"\/\/ while (keys.hasNext()) {","pos":9595,"subs":[{"java.line_comment_text":{"text":" while (keys.hasNext()) {","pos":9597}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/ String key = keys.next();","pos":9623,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":9623}},{"java.line_comment_body":{"text":"\/\/ String key = keys.next();","pos":9628,"subs":[{"java.line_comment_text":{"text":" String key = keys.next();","pos":9630}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/ try {","pos":9657,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":9657}},{"java.line_comment_body":{"text":"\/\/ try {","pos":9662,"subs":[{"java.line_comment_text":{"text":" try {","pos":9664}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/","pos":9671,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":9671}},{"java.line_comment_body":{"text":"\/\/","pos":9676,"subs":[{"java.line_comment_text":{"text":"","pos":9678}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/ JSONObject json_attachment = json_attachments","pos":9679,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":9679}},{"java.line_comment_body":{"text":"\/\/ JSONObject json_attachment = json_attachments","pos":9684,"subs":[{"java.line_comment_text":{"text":" JSONObject json_attachment = json_attachments","pos":9686}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/ .getJSONObject(key);","pos":9733,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":9733}},{"java.line_comment_body":{"text":"\/\/ .getJSONObject(key);","pos":9738,"subs":[{"java.line_comment_text":{"text":" .getJSONObject(key);","pos":9740}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/ Attachment attachment = sGsonExpose.fromJson(","pos":9762,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":9762}},{"java.line_comment_body":{"text":"\/\/ Attachment attachment = sGsonExpose.fromJson(","pos":9767,"subs":[{"java.line_comment_text":{"text":" Attachment attachment = sGsonExpose.fromJson(","pos":9769}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/ json_attachment.toString(),","pos":9816,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":9816}},{"java.line_comment_body":{"text":"\/\/ json_attachment.toString(),","pos":9821,"subs":[{"java.line_comment_text":{"text":" json_attachment.toString(),","pos":9823}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/ Attachment.class);","pos":9852,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":9852}},{"java.line_comment_body":{"text":"\/\/ Attachment.class);","pos":9857,"subs":[{"java.line_comment_text":{"text":" Attachment.class);","pos":9859}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/ attachment.setName(key);","pos":9879,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":9879}},{"java.line_comment_body":{"text":"\/\/ attachment.setName(key);","pos":9884,"subs":[{"java.line_comment_text":{"text":" attachment.setName(key);","pos":9886}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/ attachments.add(attachment);","pos":9912,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":9912}},{"java.line_comment_body":{"text":"\/\/ attachments.add(attachment);","pos":9917,"subs":[{"java.line_comment_text":{"text":" attachments.add(attachment);","pos":9919}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/ } catch (Exception e) {","pos":9949,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":9949}},{"java.line_comment_body":{"text":"\/\/ } catch (Exception e) {","pos":9954,"subs":[{"java.line_comment_text":{"text":" } catch (Exception e) {","pos":9956}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/ }","pos":9981,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":9981}},{"java.line_comment_body":{"text":"\/\/ }","pos":9986,"subs":[{"java.line_comment_text":{"text":" }","pos":9988}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/ }","pos":9991,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":9991}},{"java.line_comment_body":{"text":"\/\/ }","pos":9996,"subs":[{"java.line_comment_text":{"text":" }","pos":9998}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/ group.setAttachments(attachments);","pos":10001,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":10001}},{"java.line_comment_body":{"text":"\/\/ group.setAttachments(attachments);","pos":10006,"subs":[{"java.line_comment_text":{"text":" group.setAttachments(attachments);","pos":10008}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/","pos":10044,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":10044}},{"java.line_comment_body":{"text":"\/\/","pos":10049,"subs":[{"java.line_comment_text":{"text":"","pos":10051}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/ String url = null;","pos":10052,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":10052}},{"java.line_comment_body":{"text":"\/\/ String url = null;","pos":10057,"subs":[{"java.line_comment_text":{"text":" String url = null;","pos":10059}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/ if (group.getAvatarName() != null) {","pos":10079,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":10079}},{"java.line_comment_body":{"text":"\/\/ if (group.getAvatarName() != null) {","pos":10084,"subs":[{"java.line_comment_text":{"text":" if (group.getAvatarName() != null) {","pos":10086}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/ url = CouchDB.getUrl() + group.getId() + \"\/\"","pos":10124,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":10124}},{"java.line_comment_body":{"text":"\/\/ url = CouchDB.getUrl() + group.getId() + \"\/\"","pos":10129,"subs":[{"java.line_comment_text":{"text":" url = CouchDB.getUrl() + group.getId() + \"\/\"","pos":10131}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/ + group.getAvatarName();","pos":10177,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":10177}},{"java.line_comment_body":{"text":"\/\/ + group.getAvatarName();","pos":10182,"subs":[{"java.line_comment_text":{"text":" + group.getAvatarName();","pos":10184}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/ } else {","pos":10210,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":10210}},{"java.line_comment_body":{"text":"\/\/ } else {","pos":10215,"subs":[{"java.line_comment_text":{"text":" } else {","pos":10217}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/ url = CouchDB.getUrl() + group.getId() + \"\/\"","pos":10227,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":10227}},{"java.line_comment_body":{"text":"\/\/ url = CouchDB.getUrl() + group.getId() + \"\/\"","pos":10232,"subs":[{"java.line_comment_text":{"text":" url = CouchDB.getUrl() + group.getId() + \"\/\"","pos":10234}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/ + Const.GROUP_AVATAR;","pos":10280,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":10280}},{"java.line_comment_body":{"text":"\/\/ + Const.GROUP_AVATAR;","pos":10285,"subs":[{"java.line_comment_text":{"text":" + Const.GROUP_AVATAR;","pos":10287}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/ }","pos":10310,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":10310}},{"java.line_comment_body":{"text":"\/\/ }","pos":10315,"subs":[{"java.line_comment_text":{"text":" }","pos":10317}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/ group.setImageUrl(url);","pos":10320,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":10320}},{"java.line_comment_body":{"text":"\/\/ group.setImageUrl(url);","pos":10325,"subs":[{"java.line_comment_text":{"text":" group.setImageUrl(url);","pos":10327}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/","pos":10352,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":10352}},{"java.line_comment_body":{"text":"\/\/","pos":10357,"subs":[{"java.line_comment_text":{"text":"","pos":10359}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/ } else {","pos":10360,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":10360}},{"java.line_comment_body":{"text":"\/\/ } else {","pos":10365,"subs":[{"java.line_comment_text":{"text":" } else {","pos":10367}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/ group.setImageUrl(null);","pos":10377,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":10377}},{"java.line_comment_body":{"text":"\/\/ group.setImageUrl(null);","pos":10382,"subs":[{"java.line_comment_text":{"text":" group.setImageUrl(null);","pos":10384}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\/\/ }","pos":10410,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t","pos":10410}},{"java.line_comment_body":{"text":"\/\/ }","pos":10415,"subs":[{"java.line_comment_text":{"text":" }","pos":10417}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ Get the element that holds the users ( JSONArray )","pos":15489,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":15489}},{"java.line_comment_body":{"text":"\/\/ Get the element that holds the users ( JSONArray )","pos":15493,"subs":[{"java.line_comment_text":{"text":" Get the element that holds the users ( JSONArray )","pos":15495}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ if (userJson.has(Const.ATTACHMENTS)) {","pos":15894,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":15894}},{"java.line_comment_body":{"text":"\/\/ if (userJson.has(Const.ATTACHMENTS)) {","pos":15900,"subs":[{"java.line_comment_text":{"text":" if (userJson.has(Const.ATTACHMENTS)) {","pos":15902}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/","pos":15942,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":15942}},{"java.line_comment_body":{"text":"\/\/","pos":15948,"subs":[{"java.line_comment_text":{"text":"","pos":15950}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ List<Attachment> attachments = new","pos":15951,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":15951}},{"java.line_comment_body":{"text":"\/\/ List<Attachment> attachments = new","pos":15957,"subs":[{"java.line_comment_text":{"text":" List<Attachment> attachments = new","pos":15959}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ ArrayList<Attachment>();","pos":15995,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":15995}},{"java.line_comment_body":{"text":"\/\/ ArrayList<Attachment>();","pos":16001,"subs":[{"java.line_comment_text":{"text":" ArrayList<Attachment>();","pos":16003}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/","pos":16029,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":16029}},{"java.line_comment_body":{"text":"\/\/","pos":16035,"subs":[{"java.line_comment_text":{"text":"","pos":16037}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ JSONObject json_attachments = userJson","pos":16038,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":16038}},{"java.line_comment_body":{"text":"\/\/ JSONObject json_attachments = userJson","pos":16044,"subs":[{"java.line_comment_text":{"text":" JSONObject json_attachments = userJson","pos":16046}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ .getJSONObject(Const.ATTACHMENTS);","pos":16086,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":16086}},{"java.line_comment_body":{"text":"\/\/ .getJSONObject(Const.ATTACHMENTS);","pos":16092,"subs":[{"java.line_comment_text":{"text":" .getJSONObject(Const.ATTACHMENTS);","pos":16094}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/","pos":16130,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":16130}},{"java.line_comment_body":{"text":"\/\/","pos":16136,"subs":[{"java.line_comment_text":{"text":"","pos":16138}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ @SuppressWarnings(\"unchecked\")","pos":16139,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":16139}},{"java.line_comment_body":{"text":"\/\/ @SuppressWarnings(\"unchecked\")","pos":16145,"subs":[{"java.line_comment_text":{"text":" @SuppressWarnings(\"unchecked\")","pos":16147}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ Iterator<String> keys = json_attachments.keys();","pos":16179,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":16179}},{"java.line_comment_body":{"text":"\/\/ Iterator<String> keys = json_attachments.keys();","pos":16185,"subs":[{"java.line_comment_text":{"text":" Iterator<String> keys = json_attachments.keys();","pos":16187}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ while (keys.hasNext()) {","pos":16237,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":16237}},{"java.line_comment_body":{"text":"\/\/ while (keys.hasNext()) {","pos":16243,"subs":[{"java.line_comment_text":{"text":" while (keys.hasNext()) {","pos":16245}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ String key = keys.next();","pos":16271,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":16271}},{"java.line_comment_body":{"text":"\/\/ String key = keys.next();","pos":16277,"subs":[{"java.line_comment_text":{"text":" String key = keys.next();","pos":16279}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ try {","pos":16306,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":16306}},{"java.line_comment_body":{"text":"\/\/ try {","pos":16312,"subs":[{"java.line_comment_text":{"text":" try {","pos":16314}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/","pos":16321,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":16321}},{"java.line_comment_body":{"text":"\/\/","pos":16327,"subs":[{"java.line_comment_text":{"text":"","pos":16329}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ JSONObject json_attachment = json_attachments","pos":16330,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":16330}},{"java.line_comment_body":{"text":"\/\/ JSONObject json_attachment = json_attachments","pos":16336,"subs":[{"java.line_comment_text":{"text":" JSONObject json_attachment = json_attachments","pos":16338}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ .getJSONObject(key);","pos":16385,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":16385}},{"java.line_comment_body":{"text":"\/\/ .getJSONObject(key);","pos":16391,"subs":[{"java.line_comment_text":{"text":" .getJSONObject(key);","pos":16393}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ Attachment attachment = sGsonExpose","pos":16415,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":16415}},{"java.line_comment_body":{"text":"\/\/ Attachment attachment = sGsonExpose","pos":16421,"subs":[{"java.line_comment_text":{"text":" Attachment attachment = sGsonExpose","pos":16423}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ .fromJson(","pos":16460,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":16460}},{"java.line_comment_body":{"text":"\/\/ .fromJson(","pos":16466,"subs":[{"java.line_comment_text":{"text":" .fromJson(","pos":16468}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ json_attachment.toString(),","pos":16480,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":16480}},{"java.line_comment_body":{"text":"\/\/ json_attachment.toString(),","pos":16486,"subs":[{"java.line_comment_text":{"text":" json_attachment.toString(),","pos":16488}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ Attachment.class);","pos":16517,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":16517}},{"java.line_comment_body":{"text":"\/\/ Attachment.class);","pos":16523,"subs":[{"java.line_comment_text":{"text":" Attachment.class);","pos":16525}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ attachment.setName(key);","pos":16545,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":16545}},{"java.line_comment_body":{"text":"\/\/ attachment.setName(key);","pos":16551,"subs":[{"java.line_comment_text":{"text":" attachment.setName(key);","pos":16553}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ attachments.add(attachment);","pos":16579,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":16579}},{"java.line_comment_body":{"text":"\/\/ attachments.add(attachment);","pos":16585,"subs":[{"java.line_comment_text":{"text":" attachments.add(attachment);","pos":16587}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ } catch (Exception e) {","pos":16617,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":16617}},{"java.line_comment_body":{"text":"\/\/ } catch (Exception e) {","pos":16623,"subs":[{"java.line_comment_text":{"text":" } catch (Exception e) {","pos":16625}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ }","pos":16650,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":16650}},{"java.line_comment_body":{"text":"\/\/ }","pos":16656,"subs":[{"java.line_comment_text":{"text":" }","pos":16658}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ }","pos":16661,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":16661}},{"java.line_comment_body":{"text":"\/\/ }","pos":16667,"subs":[{"java.line_comment_text":{"text":" }","pos":16669}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ user.setAttachments(attachments);","pos":16672,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":16672}},{"java.line_comment_body":{"text":"\/\/ user.setAttachments(attachments);","pos":16678,"subs":[{"java.line_comment_text":{"text":" user.setAttachments(attachments);","pos":16680}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/","pos":16715,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":16715}},{"java.line_comment_body":{"text":"\/\/","pos":16721,"subs":[{"java.line_comment_text":{"text":"","pos":16723}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ String url = null;","pos":16724,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":16724}},{"java.line_comment_body":{"text":"\/\/ String url = null;","pos":16730,"subs":[{"java.line_comment_text":{"text":" String url = null;","pos":16732}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ if (user.getAvatarName() != null) {","pos":16752,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":16752}},{"java.line_comment_body":{"text":"\/\/ if (user.getAvatarName() != null) {","pos":16758,"subs":[{"java.line_comment_text":{"text":" if (user.getAvatarName() != null) {","pos":16760}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ url = CouchDB.getUrl() + user.getId() + \"\/\"","pos":16797,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":16797}},{"java.line_comment_body":{"text":"\/\/ url = CouchDB.getUrl() + user.getId() + \"\/\"","pos":16803,"subs":[{"java.line_comment_text":{"text":" url = CouchDB.getUrl() + user.getId() + \"\/\"","pos":16805}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ + user.getAvatarName();","pos":16850,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":16850}},{"java.line_comment_body":{"text":"\/\/ + user.getAvatarName();","pos":16856,"subs":[{"java.line_comment_text":{"text":" + user.getAvatarName();","pos":16858}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ } else {","pos":16883,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":16883}},{"java.line_comment_body":{"text":"\/\/ } else {","pos":16889,"subs":[{"java.line_comment_text":{"text":" } else {","pos":16891}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ url = CouchDB.getUrl() + user.getId() + \"\/\"","pos":16901,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":16901}},{"java.line_comment_body":{"text":"\/\/ url = CouchDB.getUrl() + user.getId() + \"\/\"","pos":16907,"subs":[{"java.line_comment_text":{"text":" url = CouchDB.getUrl() + user.getId() + \"\/\"","pos":16909}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ + Const.USER_AVATAR;","pos":16954,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":16954}},{"java.line_comment_body":{"text":"\/\/ + Const.USER_AVATAR;","pos":16960,"subs":[{"java.line_comment_text":{"text":" + Const.USER_AVATAR;","pos":16962}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ }","pos":16984,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":16984}},{"java.line_comment_body":{"text":"\/\/ }","pos":16990,"subs":[{"java.line_comment_text":{"text":" }","pos":16992}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ user.setImageUrl(url);","pos":16995,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":16995}},{"java.line_comment_body":{"text":"\/\/ user.setImageUrl(url);","pos":17001,"subs":[{"java.line_comment_text":{"text":" user.setImageUrl(url);","pos":17003}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/","pos":17027,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":17027}},{"java.line_comment_body":{"text":"\/\/","pos":17033,"subs":[{"java.line_comment_text":{"text":"","pos":17035}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ } else {","pos":17036,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":17036}},{"java.line_comment_body":{"text":"\/\/ } else {","pos":17042,"subs":[{"java.line_comment_text":{"text":" } else {","pos":17044}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ user.setImageUrl(null);","pos":17054,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":17054}},{"java.line_comment_body":{"text":"\/\/ user.setImageUrl(null);","pos":17060,"subs":[{"java.line_comment_text":{"text":" user.setImageUrl(null);","pos":17062}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ }","pos":17087,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":17087}},{"java.line_comment_body":{"text":"\/\/ }","pos":17093,"subs":[{"java.line_comment_text":{"text":" }","pos":17095}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ Get the element that holds the users ( JSONArray )","pos":18411,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":18411}},{"java.line_comment_body":{"text":"\/\/ Get the element that holds the users ( JSONArray )","pos":18415,"subs":[{"java.line_comment_text":{"text":" Get the element that holds the users ( JSONArray )","pos":18417}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ if (groupJson.has(Const.ATTACHMENTS)) {","pos":25407,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":25407}},{"java.line_comment_body":{"text":"\/\/ if (groupJson.has(Const.ATTACHMENTS)) {","pos":25411,"subs":[{"java.line_comment_text":{"text":" if (groupJson.has(Const.ATTACHMENTS)) {","pos":25413}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ List<Attachment> attachments = new ArrayList<Attachment>();","pos":25454,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":25454}},{"java.line_comment_body":{"text":"\/\/ List<Attachment> attachments = new ArrayList<Attachment>();","pos":25458,"subs":[{"java.line_comment_text":{"text":" List<Attachment> attachments = new ArrayList<Attachment>();","pos":25460}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/","pos":25521,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":25521}},{"java.line_comment_body":{"text":"\/\/","pos":25525,"subs":[{"java.line_comment_text":{"text":"","pos":25527}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ JSONObject json_attachments = groupJson","pos":25528,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":25528}},{"java.line_comment_body":{"text":"\/\/ JSONObject json_attachments = groupJson","pos":25532,"subs":[{"java.line_comment_text":{"text":" JSONObject json_attachments = groupJson","pos":25534}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ .getJSONObject(Const.ATTACHMENTS);","pos":25575,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":25575}},{"java.line_comment_body":{"text":"\/\/ .getJSONObject(Const.ATTACHMENTS);","pos":25579,"subs":[{"java.line_comment_text":{"text":" .getJSONObject(Const.ATTACHMENTS);","pos":25581}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/","pos":25617,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":25617}},{"java.line_comment_body":{"text":"\/\/","pos":25621,"subs":[{"java.line_comment_text":{"text":"","pos":25623}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ @SuppressWarnings(\"unchecked\")","pos":25624,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":25624}},{"java.line_comment_body":{"text":"\/\/ @SuppressWarnings(\"unchecked\")","pos":25628,"subs":[{"java.line_comment_text":{"text":" @SuppressWarnings(\"unchecked\")","pos":25630}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ Iterator<String> keys = json_attachments.keys();","pos":25662,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":25662}},{"java.line_comment_body":{"text":"\/\/ Iterator<String> keys = json_attachments.keys();","pos":25666,"subs":[{"java.line_comment_text":{"text":" Iterator<String> keys = json_attachments.keys();","pos":25668}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ while (keys.hasNext()) {","pos":25718,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":25718}},{"java.line_comment_body":{"text":"\/\/ while (keys.hasNext()) {","pos":25722,"subs":[{"java.line_comment_text":{"text":" while (keys.hasNext()) {","pos":25724}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ String key = keys.next();","pos":25750,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":25750}},{"java.line_comment_body":{"text":"\/\/ String key = keys.next();","pos":25754,"subs":[{"java.line_comment_text":{"text":" String key = keys.next();","pos":25756}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ try {","pos":25783,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":25783}},{"java.line_comment_body":{"text":"\/\/ try {","pos":25787,"subs":[{"java.line_comment_text":{"text":" try {","pos":25789}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/","pos":25796,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":25796}},{"java.line_comment_body":{"text":"\/\/","pos":25800,"subs":[{"java.line_comment_text":{"text":"","pos":25802}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ JSONObject json_attachment = json_attachments","pos":25803,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":25803}},{"java.line_comment_body":{"text":"\/\/ JSONObject json_attachment = json_attachments","pos":25807,"subs":[{"java.line_comment_text":{"text":" JSONObject json_attachment = json_attachments","pos":25809}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ .getJSONObject(key);","pos":25856,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":25856}},{"java.line_comment_body":{"text":"\/\/ .getJSONObject(key);","pos":25860,"subs":[{"java.line_comment_text":{"text":" .getJSONObject(key);","pos":25862}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ Attachment attachment = sGsonExpose.fromJson(","pos":25884,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":25884}},{"java.line_comment_body":{"text":"\/\/ Attachment attachment = sGsonExpose.fromJson(","pos":25888,"subs":[{"java.line_comment_text":{"text":" Attachment attachment = sGsonExpose.fromJson(","pos":25890}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ json_attachment.toString(),","pos":25937,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":25937}},{"java.line_comment_body":{"text":"\/\/ json_attachment.toString(),","pos":25941,"subs":[{"java.line_comment_text":{"text":" json_attachment.toString(),","pos":25943}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ Attachment.class);","pos":25972,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":25972}},{"java.line_comment_body":{"text":"\/\/ Attachment.class);","pos":25976,"subs":[{"java.line_comment_text":{"text":" Attachment.class);","pos":25978}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ attachment.setName(key);","pos":25998,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":25998}},{"java.line_comment_body":{"text":"\/\/ attachment.setName(key);","pos":26002,"subs":[{"java.line_comment_text":{"text":" attachment.setName(key);","pos":26004}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ attachments.add(attachment);","pos":26030,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":26030}},{"java.line_comment_body":{"text":"\/\/ attachments.add(attachment);","pos":26034,"subs":[{"java.line_comment_text":{"text":" attachments.add(attachment);","pos":26036}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ } catch (Exception e) {","pos":26066,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":26066}},{"java.line_comment_body":{"text":"\/\/ } catch (Exception e) {","pos":26070,"subs":[{"java.line_comment_text":{"text":" } catch (Exception e) {","pos":26072}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ }","pos":26097,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":26097}},{"java.line_comment_body":{"text":"\/\/ }","pos":26101,"subs":[{"java.line_comment_text":{"text":" }","pos":26103}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ }","pos":26106,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":26106}},{"java.line_comment_body":{"text":"\/\/ }","pos":26110,"subs":[{"java.line_comment_text":{"text":" }","pos":26112}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ group.setAttachments(attachments);","pos":26115,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":26115}},{"java.line_comment_body":{"text":"\/\/ group.setAttachments(attachments);","pos":26119,"subs":[{"java.line_comment_text":{"text":" group.setAttachments(attachments);","pos":26121}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/","pos":26157,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":26157}},{"java.line_comment_body":{"text":"\/\/","pos":26161,"subs":[{"java.line_comment_text":{"text":"","pos":26163}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ String url = null;","pos":26164,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":26164}},{"java.line_comment_body":{"text":"\/\/ String url = null;","pos":26168,"subs":[{"java.line_comment_text":{"text":" String url = null;","pos":26170}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ if (group.getAvatarName() != null) {","pos":26190,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":26190}},{"java.line_comment_body":{"text":"\/\/ if (group.getAvatarName() != null) {","pos":26194,"subs":[{"java.line_comment_text":{"text":" if (group.getAvatarName() != null) {","pos":26196}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ url = CouchDB.getUrl() + group.getId() + \"\/\"","pos":26234,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":26234}},{"java.line_comment_body":{"text":"\/\/ url = CouchDB.getUrl() + group.getId() + \"\/\"","pos":26238,"subs":[{"java.line_comment_text":{"text":" url = CouchDB.getUrl() + group.getId() + \"\/\"","pos":26240}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ + group.getAvatarName();","pos":26286,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":26286}},{"java.line_comment_body":{"text":"\/\/ + group.getAvatarName();","pos":26290,"subs":[{"java.line_comment_text":{"text":" + group.getAvatarName();","pos":26292}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ } else {","pos":26318,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":26318}},{"java.line_comment_body":{"text":"\/\/ } else {","pos":26322,"subs":[{"java.line_comment_text":{"text":" } else {","pos":26324}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ url = CouchDB.getUrl() + group.getId() + \"\/\"","pos":26334,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":26334}},{"java.line_comment_body":{"text":"\/\/ url = CouchDB.getUrl() + group.getId() + \"\/\"","pos":26338,"subs":[{"java.line_comment_text":{"text":" url = CouchDB.getUrl() + group.getId() + \"\/\"","pos":26340}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ + Const.GROUP_AVATAR;","pos":26386,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":26386}},{"java.line_comment_body":{"text":"\/\/ + Const.GROUP_AVATAR;","pos":26390,"subs":[{"java.line_comment_text":{"text":" + Const.GROUP_AVATAR;","pos":26392}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ }","pos":26415,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":26415}},{"java.line_comment_body":{"text":"\/\/ }","pos":26419,"subs":[{"java.line_comment_text":{"text":" }","pos":26421}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ group.setImageUrl(url);","pos":26424,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":26424}},{"java.line_comment_body":{"text":"\/\/ group.setImageUrl(url);","pos":26428,"subs":[{"java.line_comment_text":{"text":" group.setImageUrl(url);","pos":26430}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ } else {","pos":26455,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":26455}},{"java.line_comment_body":{"text":"\/\/ } else {","pos":26459,"subs":[{"java.line_comment_text":{"text":" } else {","pos":26461}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ group.setImageUrl(null);","pos":26471,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":26471}},{"java.line_comment_body":{"text":"\/\/ group.setImageUrl(null);","pos":26475,"subs":[{"java.line_comment_text":{"text":" group.setImageUrl(null);","pos":26477}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\/\/ }","pos":26503,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t","pos":26503}},{"java.line_comment_body":{"text":"\/\/ }","pos":26507,"subs":[{"java.line_comment_text":{"text":" }","pos":26509}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ if (groupJson.has(Const.ATTACHMENTS)) {","pos":28091,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":28091}},{"java.line_comment_body":{"text":"\/\/ if (groupJson.has(Const.ATTACHMENTS)) {","pos":28097,"subs":[{"java.line_comment_text":{"text":" if (groupJson.has(Const.ATTACHMENTS)) {","pos":28099}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ List<Attachment> attachments = new","pos":28140,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":28140}},{"java.line_comment_body":{"text":"\/\/ List<Attachment> attachments = new","pos":28146,"subs":[{"java.line_comment_text":{"text":" List<Attachment> attachments = new","pos":28148}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ ArrayList<Attachment>();","pos":28184,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":28184}},{"java.line_comment_body":{"text":"\/\/ ArrayList<Attachment>();","pos":28190,"subs":[{"java.line_comment_text":{"text":" ArrayList<Attachment>();","pos":28192}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/","pos":28218,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":28218}},{"java.line_comment_body":{"text":"\/\/","pos":28224,"subs":[{"java.line_comment_text":{"text":"","pos":28226}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ JSONObject json_attachments = groupJson","pos":28227,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":28227}},{"java.line_comment_body":{"text":"\/\/ JSONObject json_attachments = groupJson","pos":28233,"subs":[{"java.line_comment_text":{"text":" JSONObject json_attachments = groupJson","pos":28235}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ .getJSONObject(Const.ATTACHMENTS);","pos":28276,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":28276}},{"java.line_comment_body":{"text":"\/\/ .getJSONObject(Const.ATTACHMENTS);","pos":28282,"subs":[{"java.line_comment_text":{"text":" .getJSONObject(Const.ATTACHMENTS);","pos":28284}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/","pos":28320,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":28320}},{"java.line_comment_body":{"text":"\/\/","pos":28326,"subs":[{"java.line_comment_text":{"text":"","pos":28328}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ @SuppressWarnings(\"unchecked\")","pos":28329,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":28329}},{"java.line_comment_body":{"text":"\/\/ @SuppressWarnings(\"unchecked\")","pos":28335,"subs":[{"java.line_comment_text":{"text":" @SuppressWarnings(\"unchecked\")","pos":28337}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ Iterator<String> keys = json_attachments.keys();","pos":28369,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":28369}},{"java.line_comment_body":{"text":"\/\/ Iterator<String> keys = json_attachments.keys();","pos":28375,"subs":[{"java.line_comment_text":{"text":" Iterator<String> keys = json_attachments.keys();","pos":28377}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ while (keys.hasNext()) {","pos":28427,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":28427}},{"java.line_comment_body":{"text":"\/\/ while (keys.hasNext()) {","pos":28433,"subs":[{"java.line_comment_text":{"text":" while (keys.hasNext()) {","pos":28435}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ String attachmentKey = keys.next();","pos":28461,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":28461}},{"java.line_comment_body":{"text":"\/\/ String attachmentKey = keys.next();","pos":28467,"subs":[{"java.line_comment_text":{"text":" String attachmentKey = keys.next();","pos":28469}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ try {","pos":28506,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":28506}},{"java.line_comment_body":{"text":"\/\/ try {","pos":28512,"subs":[{"java.line_comment_text":{"text":" try {","pos":28514}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/","pos":28521,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":28521}},{"java.line_comment_body":{"text":"\/\/","pos":28527,"subs":[{"java.line_comment_text":{"text":"","pos":28529}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ JSONObject json_attachment = json_attachments","pos":28530,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":28530}},{"java.line_comment_body":{"text":"\/\/ JSONObject json_attachment = json_attachments","pos":28536,"subs":[{"java.line_comment_text":{"text":" JSONObject json_attachment = json_attachments","pos":28538}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ .getJSONObject(attachmentKey);","pos":28585,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":28585}},{"java.line_comment_body":{"text":"\/\/ .getJSONObject(attachmentKey);","pos":28591,"subs":[{"java.line_comment_text":{"text":" .getJSONObject(attachmentKey);","pos":28593}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ Attachment attachment = sGsonExpose","pos":28625,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":28625}},{"java.line_comment_body":{"text":"\/\/ Attachment attachment = sGsonExpose","pos":28631,"subs":[{"java.line_comment_text":{"text":" Attachment attachment = sGsonExpose","pos":28633}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ .fromJson(","pos":28670,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":28670}},{"java.line_comment_body":{"text":"\/\/ .fromJson(","pos":28676,"subs":[{"java.line_comment_text":{"text":" .fromJson(","pos":28678}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ json_attachment.toString(),","pos":28690,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":28690}},{"java.line_comment_body":{"text":"\/\/ json_attachment.toString(),","pos":28696,"subs":[{"java.line_comment_text":{"text":" json_attachment.toString(),","pos":28698}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ Attachment.class);","pos":28727,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":28727}},{"java.line_comment_body":{"text":"\/\/ Attachment.class);","pos":28733,"subs":[{"java.line_comment_text":{"text":" Attachment.class);","pos":28735}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ attachment.setName(attachmentKey);","pos":28755,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":28755}},{"java.line_comment_body":{"text":"\/\/ attachment.setName(attachmentKey);","pos":28761,"subs":[{"java.line_comment_text":{"text":" attachment.setName(attachmentKey);","pos":28763}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ attachments.add(attachment);","pos":28799,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":28799}},{"java.line_comment_body":{"text":"\/\/ attachments.add(attachment);","pos":28805,"subs":[{"java.line_comment_text":{"text":" attachments.add(attachment);","pos":28807}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ } catch (Exception e) {","pos":28837,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":28837}},{"java.line_comment_body":{"text":"\/\/ } catch (Exception e) {","pos":28843,"subs":[{"java.line_comment_text":{"text":" } catch (Exception e) {","pos":28845}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ }","pos":28870,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":28870}},{"java.line_comment_body":{"text":"\/\/ }","pos":28876,"subs":[{"java.line_comment_text":{"text":" }","pos":28878}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ }","pos":28881,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":28881}},{"java.line_comment_body":{"text":"\/\/ }","pos":28887,"subs":[{"java.line_comment_text":{"text":" }","pos":28889}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ group.setAttachments(attachments);","pos":28892,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":28892}},{"java.line_comment_body":{"text":"\/\/ group.setAttachments(attachments);","pos":28898,"subs":[{"java.line_comment_text":{"text":" group.setAttachments(attachments);","pos":28900}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/","pos":28936,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":28936}},{"java.line_comment_body":{"text":"\/\/","pos":28942,"subs":[{"java.line_comment_text":{"text":"","pos":28944}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ String url = null;","pos":28945,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":28945}},{"java.line_comment_body":{"text":"\/\/ String url = null;","pos":28951,"subs":[{"java.line_comment_text":{"text":" String url = null;","pos":28953}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ if (group.getAvatarName() != null) {","pos":28973,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":28973}},{"java.line_comment_body":{"text":"\/\/ if (group.getAvatarName() != null) {","pos":28979,"subs":[{"java.line_comment_text":{"text":" if (group.getAvatarName() != null) {","pos":28981}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ url = CouchDB.getUrl() + group.getId() + \"\/\"","pos":29019,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":29019}},{"java.line_comment_body":{"text":"\/\/ url = CouchDB.getUrl() + group.getId() + \"\/\"","pos":29025,"subs":[{"java.line_comment_text":{"text":" url = CouchDB.getUrl() + group.getId() + \"\/\"","pos":29027}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ + group.getAvatarName();","pos":29073,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":29073}},{"java.line_comment_body":{"text":"\/\/ + group.getAvatarName();","pos":29079,"subs":[{"java.line_comment_text":{"text":" + group.getAvatarName();","pos":29081}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ } else {","pos":29107,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":29107}},{"java.line_comment_body":{"text":"\/\/ } else {","pos":29113,"subs":[{"java.line_comment_text":{"text":" } else {","pos":29115}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ url = CouchDB.getUrl() + group.getId() + \"\/\"","pos":29125,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":29125}},{"java.line_comment_body":{"text":"\/\/ url = CouchDB.getUrl() + group.getId() + \"\/\"","pos":29131,"subs":[{"java.line_comment_text":{"text":" url = CouchDB.getUrl() + group.getId() + \"\/\"","pos":29133}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ + Const.GROUP_AVATAR;","pos":29179,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":29179}},{"java.line_comment_body":{"text":"\/\/ + Const.GROUP_AVATAR;","pos":29185,"subs":[{"java.line_comment_text":{"text":" + Const.GROUP_AVATAR;","pos":29187}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ }","pos":29210,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":29210}},{"java.line_comment_body":{"text":"\/\/ }","pos":29216,"subs":[{"java.line_comment_text":{"text":" }","pos":29218}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ group.setImageUrl(url);","pos":29221,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":29221}},{"java.line_comment_body":{"text":"\/\/ group.setImageUrl(url);","pos":29227,"subs":[{"java.line_comment_text":{"text":" group.setImageUrl(url);","pos":29229}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/","pos":29254,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":29254}},{"java.line_comment_body":{"text":"\/\/","pos":29260,"subs":[{"java.line_comment_text":{"text":"","pos":29262}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ } else {","pos":29263,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":29263}},{"java.line_comment_body":{"text":"\/\/ } else {","pos":29269,"subs":[{"java.line_comment_text":{"text":" } else {","pos":29271}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ group.setImageUrl(null);","pos":29281,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":29281}},{"java.line_comment_body":{"text":"\/\/ group.setImageUrl(null);","pos":29287,"subs":[{"java.line_comment_text":{"text":" group.setImageUrl(null);","pos":29289}}]}}]}},{"java.line_comment":{"text":"\t\t\t\t\t\t\/\/ }","pos":29315,"subs":[{"java.line_comment_context":{"text":"\t\t\t\t\t\t","pos":29315}},{"java.line_comment_body":{"text":"\/\/ }","pos":29321,"subs":[{"java.line_comment_text":{"text":" }","pos":29323}}]}}]}},{"java.line_comment":{"text":"\/\/\t\t\t\t\t\tSpikaApp.getFileDir().saveFile(","pos":42929,"subs":[{"java.line_comment_context":{"text":"","pos":42929}},{"java.line_comment_body":{"text":"\/\/\t\t\t\t\t\tSpikaApp.getFileDir().saveFile(","pos":42929,"subs":[{"java.line_comment_text":{"text":"\t\t\t\t\t\tSpikaApp.getFileDir().saveFile(","pos":42931}}]}}]}},{"java.line_comment":{"text":"\/\/\t\t\t\t\t\t\t\temoticon.getIdentifier(),","pos":42969,"subs":[{"java.line_comment_context":{"text":"","pos":42969}},{"java.line_comment_body":{"text":"\/\/\t\t\t\t\t\t\t\temoticon.getIdentifier(),","pos":42969,"subs":[{"java.line_comment_text":{"text":"\t\t\t\t\t\t\t\temoticon.getIdentifier(),","pos":42971}}]}}]}},{"java.line_comment":{"text":"\/\/\t\t\t\t\t\t\t\temoticon.getImageUrl());","pos":43005,"subs":[{"java.line_comment_context":{"text":"","pos":43005}},{"java.line_comment_body":{"text":"\/\/\t\t\t\t\t\t\t\temoticon.getImageUrl());","pos":43005,"subs":[{"java.line_comment_text":{"text":"\t\t\t\t\t\t\t\temoticon.getImageUrl());","pos":43007}}]}}]}}]}}
