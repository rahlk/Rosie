{
	"java.classes" : {
		"pos" : 1,
		"subs" : [{
				"java.class" : {
					"pos" : 2573,
					"subs" : [{
							"java.access_sp" : {
								"pos" : 2574,
								"text" : "public "
							}
						}, {
							"java.class_name" : {
								"pos" : 2587,
								"text" : "CouchDBHelper"
							}
						}, {
							"java.hierarchy" : {
								"pos" : 2600,
								"subs" : [{
										"java.parent_name" : {
											"pos" : 2609,
											"text" : "c"
										}
									}
								],
								"text" : " extends c"
							}
						}, {
							"java.implementation" : {
								"pos" : 2610,
								"subs" : [{
										"java.single_inter" : {
											"pos" : 2622,
											"text" : "a"
										}
									}, {
										"java.single_inter" : {
											"pos" : 2624,
											"text" : " b"
										}
									}
								],
								"text" : " implements a, b {"
							}
						}
					],
					"text" : "\npublic class CouchDBHelper extends c implements a, b {"
				}
			}
		],
		"text" : "\/*\n * The MIT License (MIT)\n * \n * Copyright (c) 2013 Clover Studio Ltd. All rights reserved.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\/\n\npackage com.cloverstudio.spikademo.couchdb;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport android.util.Log;\n\nimport com.cloverstudio.spikademo.SpikaApp;\nimport com.cloverstudio.spikademo.couchdb.model.ActivitySummary;\nimport com.cloverstudio.spikademo.couchdb.model.Attachment;\nimport com.cloverstudio.spikademo.couchdb.model.Comment;\nimport com.cloverstudio.spikademo.couchdb.model.Emoticon;\nimport com.cloverstudio.spikademo.couchdb.model.Group;\nimport com.cloverstudio.spikademo.couchdb.model.GroupCategory;\nimport com.cloverstudio.spikademo.couchdb.model.Message;\nimport com.cloverstudio.spikademo.couchdb.model.Notification;\nimport com.cloverstudio.spikademo.couchdb.model.NotificationMessage;\nimport com.cloverstudio.spikademo.couchdb.model.RecentActivity;\nimport com.cloverstudio.spikademo.couchdb.model.User;\nimport com.cloverstudio.spikademo.couchdb.model.UserGroup;\nimport com.cloverstudio.spikademo.extendables.SideBarActivity;\nimport com.cloverstudio.spikademo.management.UsersManagement;\nimport com.cloverstudio.spikademo.utils.Const;\nimport com.cloverstudio.spikademo.utils.Logger;\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\n\n\/**\n * CouchDBHelper\n * \n * Used for parsing JSON response from server.\n *\/\npublic class CouchDBHelper extends c implements a, b {\n\n\tprivate static String TAG = \"CouchDbHelper: \";\n\n\tprivate static final Gson sGsonExpose = new GsonBuilder()\n\t\t\t.excludeFieldsWithoutExposeAnnotation().create();\n\n\t\/**\n\t * Parse a single user JSON object\n\t * \n\t * @param json\n\t * @return\n\t * @throws JSONException\n\t *\/\n\tpublic static User parseSingleUserObject(JSONObject json)\n\t\t\tthrows JSONException {\n\t\tUser user = null;\n\t\tArrayList<String> contactsIds = new ArrayList<String>();\n\n\t\tif (json != null) {\n\t\t\t\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\tJSONArray rows = json.getJSONArray(Const.ROWS);\n\t\t\t\tJSONObject row = rows.getJSONObject(0);\n\t\t\t\tJSONObject userJson = row.getJSONObject(Const.VALUE);\n\n\t\t\t\tuser = sGsonExpose.fromJson(userJson.toString(), User.class);\n\t\t\t\t\n\t\t\t\tif (userJson.has(Const.FAVORITE_GROUPS)) {\n\t\t\t\t\tJSONArray favorite_groups = userJson\n\t\t\t\t\t\t\t.getJSONArray(Const.FAVORITE_GROUPS);\n\n\t\t\t\t\tList<String> groups = new ArrayList<String>();\n\n\t\t\t\t\tfor (int i = 0; i < favorite_groups.length(); i++) {\n\t\t\t\t\t\tgroups.add(favorite_groups.getString(i));\n\t\t\t\t\t}\n\n\t\t\t\t\tuser.setGroupIds(groups);\n\t\t\t\t}\n\n\t\t\t\tif (userJson.has(Const.CONTACTS)) {\n\t\t\t\t\tJSONArray contacts = userJson.getJSONArray(Const.CONTACTS);\n\n\t\t\t\t\tfor (int i = 0; i < contacts.length(); i++) {\n\t\t\t\t\t\tcontactsIds.add(contacts.getString(i));\n\t\t\t\t\t}\n\n\t\t\t\t\tuser.setContactIds(contactsIds);\n\t\t\t\t}\n\t\t\t} catch (JSONException e) {\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn user;\n\t}\n\n\t   \/**\n     * Parse a single user JSON object\n     * \n     * @param json\n     * @return\n     * @throws JSONException\n     *\/\n    public static User parseSingleUserObjectWithoutRowParam(JSONObject userJson)\n            throws JSONException {\n        User user = null;\n        ArrayList<String> contactsIds = new ArrayList<String>();\n\n        if (userJson != null) {\n        \t\n        \tif (userJson.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(userJson));\n\t\t\t\treturn null;\n\t\t\t}\n\n            try {\n\n                user = sGsonExpose.fromJson(userJson.toString(), User.class);\n                \n                if (userJson.has(Const.FAVORITE_GROUPS)) {\n                    JSONArray favorite_groups = userJson\n                            .getJSONArray(Const.FAVORITE_GROUPS);\n\n                    List<String> groups = new ArrayList<String>();\n\n                    for (int i = 0; i < favorite_groups.length(); i++) {\n                        groups.add(favorite_groups.getString(i));\n                    }\n\n                    user.setGroupIds(groups);\n                }\n\n                if (userJson.has(Const.CONTACTS)) {\n                    JSONArray contacts = userJson.getJSONArray(Const.CONTACTS);\n\n                    for (int i = 0; i < contacts.length(); i++) {\n                        contactsIds.add(contacts.getString(i));\n                    }\n\n                    user.setContactIds(contactsIds);\n                }\n            } catch (JSONException e) {\n\n            }\n\n        }\n\n        return user;\n    }\n    \n\t\/**\n\t * Parse multi JSON objects of type user\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static List<User> parseMultiUserObjects(JSONObject json) {\n\n\t\tList<User> users = null;\n\t\tArrayList<String> contactsIds = new ArrayList<String>();\n\n\t\tif (json != null) {\n\t\t\t\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tusers = new ArrayList<User>();\n\n\t\t\t\t\/\/ Get the element that holds the users ( JSONArray )\n\t\t\t\tJSONArray rows = json.getJSONArray(Const.ROWS);\n\n\t\t\t\tfor (int i = 0; i < rows.length(); i++) {\n\n\t\t\t\t\tJSONObject row = rows.getJSONObject(i);\n\t\t\t\t\tJSONObject userJson = row.getJSONObject(Const.VALUE);\n\n\t\t\t\t\tUser user = new User();\n\n\t\t\t\t\tuser = sGsonExpose\n\t\t\t\t\t\t\t.fromJson(userJson.toString(), User.class);\n\n\t\t\t\t\tif (userJson.has(Const.CONTACTS)) {\n\n\t\t\t\t\t\tJSONArray contacts = userJson\n\t\t\t\t\t\t\t\t.getJSONArray(Const.CONTACTS);\n\n\t\t\t\t\t\tfor (int j = 0; j < contacts.length(); j++) {\n\t\t\t\t\t\t\tcontactsIds.add(contacts.getString(j));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tuser.setContactIds(contactsIds);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (userJson.has(Const.FAVORITE_GROUPS)) {\n\t\t\t\t\t\tJSONArray favorite_groups = userJson\n\t\t\t\t\t\t\t\t.getJSONArray(Const.FAVORITE_GROUPS);\n\n\t\t\t\t\t\tList<String> groups = new ArrayList<String>();\n\n\t\t\t\t\t\tfor (int k = 0; k < favorite_groups.length(); k++) {\n\t\t\t\t\t\t\tgroups.add(favorite_groups.getString(k));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tuser.setGroupIds(groups);\n\t\t\t\t\t}\n\n\t\t\t\t\tusers.add(user);\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(\n\t\t\t\t\t\tTAG + \"parseMultiUserObjects\",\n\t\t\t\t\t\t\"Error while retrieving data from json... Probably no users found!\",\n\t\t\t\t\t\te);\n\t\t\t}\n\t\t}\n\n\t\treturn users;\n\t}\n\n\t\/**\n\t * Parse multi JSON objects of type user for search users\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static List<User> parseSearchUsersResult(JSONArray jsonArray) {\n\n\t\tList<User> users = null;\n\t\tArrayList<String> contactsIds = new ArrayList<String>();\n\n\t\tif (jsonArray != null) {\n\n\t\t\ttry {\n\t\t\t\tusers = new ArrayList<User>();\n\n\t\t\t\t\/\/ Get the element that holds the users ( JSONArray )\n\n\t\t\t\tfor (int i = 0; i < jsonArray.length(); i++) {\n\n\t\t\t\t\tJSONObject userJson = jsonArray.getJSONObject(i);\n\n\t\t\t\t\tUser user = new User();\n\n\t\t\t\t\tuser = sGsonExpose\n\t\t\t\t\t\t\t.fromJson(userJson.toString(), User.class);\n\n\n\t\t\t\t\tif (userJson.has(Const.CONTACTS)) {\n\n\t\t\t\t\t\tJSONArray contacts = userJson\n\t\t\t\t\t\t\t\t.getJSONArray(Const.CONTACTS);\n\n\t\t\t\t\t\tfor (int j = 0; j < contacts.length(); j++) {\n\t\t\t\t\t\t\tcontactsIds.add(contacts.getString(j));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tuser.setContactIds(contactsIds);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (userJson.has(Const.FAVORITE_GROUPS)) {\n\t\t\t\t\t\tJSONArray favorite_groups = userJson\n\t\t\t\t\t\t\t\t.getJSONArray(Const.FAVORITE_GROUPS);\n\n\t\t\t\t\t\tList<String> groups = new ArrayList<String>();\n\n\t\t\t\t\t\tfor (int k = 0; k < favorite_groups.length(); k++) {\n\t\t\t\t\t\t\tgroups.add(favorite_groups.getString(k));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tuser.setGroupIds(groups);\n\t\t\t\t\t}\n\n\t\t\t\t\tusers.add(user);\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(\n\t\t\t\t\t\tTAG + \"parseMultiUserObjects\",\n\t\t\t\t\t\t\"Error while retrieving data from json... Probably no users found!\",\n\t\t\t\t\t\te);\n\t\t\t}\n\t\t}\n\n\t\treturn users;\n\t}\n\n\t\/**\n\t * Parse multi JSON objects of type group for search groups\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static List<Group> parseSearchGroupsResult(JSONArray jsonArray) {\n\n\t\tList<Group> groups = null;\n\n\t\tif (jsonArray != null) {\n\n\t\t\ttry {\n\t\t\t\tgroups = new ArrayList<Group>();\n\n\t\t\t\t\/\/ Get the element that holds the groups ( JSONArray )\n\n\t\t\t\tfor (int i = 0; i < jsonArray.length(); i++) {\n\n\t\t\t\t\tJSONObject groupJson = jsonArray.getJSONObject(i);\n\n\t\t\t\t\tGroup group = new Group();\n\n\t\t\t\t\tgroup = sGsonExpose.fromJson(groupJson.toString(),\n\t\t\t\t\t\t\tGroup.class);\n\n\t\t\t\t\t\/\/ if (groupJson.has(Const.ATTACHMENTS)) {\n\t\t\t\t\t\/\/\n\t\t\t\t\t\/\/ List<Attachment> attachments = new\n\t\t\t\t\t\/\/ ArrayList<Attachment>();\n\t\t\t\t\t\/\/\n\t\t\t\t\t\/\/ JSONObject json_attachments = groupJson\n\t\t\t\t\t\/\/ .getJSONObject(Const.ATTACHMENTS);\n\t\t\t\t\t\/\/\n\t\t\t\t\t\/\/ @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\/\/ Iterator<String> keys = json_attachments.keys();\n\t\t\t\t\t\/\/ while (keys.hasNext()) {\n\t\t\t\t\t\/\/ String key = keys.next();\n\t\t\t\t\t\/\/ try {\n\t\t\t\t\t\/\/\n\t\t\t\t\t\/\/ JSONObject json_attachment = json_attachments\n\t\t\t\t\t\/\/ .getJSONObject(key);\n\t\t\t\t\t\/\/ Attachment attachment = sGsonExpose.fromJson(\n\t\t\t\t\t\/\/ json_attachment.toString(),\n\t\t\t\t\t\/\/ Attachment.class);\n\t\t\t\t\t\/\/ attachment.setName(key);\n\t\t\t\t\t\/\/ attachments.add(attachment);\n\t\t\t\t\t\/\/ } catch (Exception e) {\n\t\t\t\t\t\/\/ }\n\t\t\t\t\t\/\/ }\n\t\t\t\t\t\/\/ group.setAttachments(attachments);\n\t\t\t\t\t\/\/\n\t\t\t\t\t\/\/ String url = null;\n\t\t\t\t\t\/\/ if (group.getAvatarName() != null) {\n\t\t\t\t\t\/\/ url = CouchDB.getUrl() + group.getId() + \"\/\"\n\t\t\t\t\t\/\/ + group.getAvatarName();\n\t\t\t\t\t\/\/ } else {\n\t\t\t\t\t\/\/ url = CouchDB.getUrl() + group.getId() + \"\/\"\n\t\t\t\t\t\/\/ + Const.GROUP_AVATAR;\n\t\t\t\t\t\/\/ }\n\t\t\t\t\t\/\/ group.setImageUrl(url);\n\t\t\t\t\t\/\/\n\t\t\t\t\t\/\/ } else {\n\t\t\t\t\t\/\/ group.setImageUrl(null);\n\t\t\t\t\t\/\/ }\n\n\t\t\t\t\tgroups.add(group);\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(\n\t\t\t\t\t\tTAG + \"parseMultiUserObjects\",\n\t\t\t\t\t\t\"Error while retrieving data from json... Probably no users found!\",\n\t\t\t\t\t\te);\n\t\t\t}\n\t\t}\n\n\t\treturn groups;\n\t}\n\n\t\/**\n\t * Parses a single activity summary JSON object\n\t * \n\t * @param json\n\t * @return\n\t * @throws JSONException\n\t *\/\n\tpublic static ActivitySummary parseSingleActivitySummaryObject(\n\t\t\tJSONObject json) {\n\n\t\tActivitySummary activitySummary = null;\n\n\t\tif (json != null) {\n\t\t\t\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\tJSONArray rows = json.getJSONArray(Const.ROWS);\n\n\t\t\t\tif (rows.length() > 0) {\n\t\t\t\t\tJSONObject row = rows.getJSONObject(0);\n\t\t\t\t\tJSONObject activitySummaryJson = row\n\t\t\t\t\t\t\t.getJSONObject(Const.VALUE);\n\n\t\t\t\t\tactivitySummary = new ActivitySummary();\n\t\t\t\t\tactivitySummary = sGsonExpose.fromJson(\n\t\t\t\t\t\t\tactivitySummaryJson.toString(),\n\t\t\t\t\t\t\tActivitySummary.class);\n\n\t\t\t\t\tif (activitySummaryJson.has(Const.RECENT_ACTIVITY)) {\n\t\t\t\t\t\tJSONObject recentActivityListJson = activitySummaryJson\n\t\t\t\t\t\t\t\t.getJSONObject(Const.RECENT_ACTIVITY);\n\t\t\t\t\t\tList<RecentActivity> recentActivityList = CouchDBHelper\n\t\t\t\t\t\t\t\t.parseMultiRecentActivityObjects(recentActivityListJson);\n\t\t\t\t\t\tactivitySummary\n\t\t\t\t\t\t\t\t.setRecentActivityList(recentActivityList);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"parseSingleActivitySummaryObject\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\treturn activitySummary;\n\t}\n\n\t\/**\n\t * Parses multi RecentActivity JSON Objects\n\t * \n\t * @param recentActivityListJson\n\t * @return\n\t *\/\n\tpublic static List<RecentActivity> parseMultiRecentActivityObjects(\n\t\t\tJSONObject recentActivityListJson) {\n\n\t\tList<RecentActivity> recentActivityList = new ArrayList<RecentActivity>();\n\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tIterator<String> iterator = recentActivityListJson.keys();\n\t\twhile (iterator.hasNext()) {\n\t\t\tString key = iterator.next();\n\t\t\ttry {\n\t\t\t\tJSONObject recentActivityJson = recentActivityListJson\n\t\t\t\t\t\t.getJSONObject(key);\n\t\t\t\tRecentActivity recentActivity = new RecentActivity();\n\t\t\t\trecentActivity = sGsonExpose.fromJson(\n\t\t\t\t\t\trecentActivityJson.toString(), RecentActivity.class);\n\n\t\t\t\tif (recentActivityJson.has(Const.NOTIFICATIONS)) {\n\t\t\t\t\tJSONObject notificationsJson = recentActivityJson\n\t\t\t\t\t\t\t.getJSONObject(Const.NOTIFICATIONS);\n\t\t\t\t\trecentActivity\n\t\t\t\t\t\t\t.set_notifications(parseMultiNotificationObjects(notificationsJson));\n\t\t\t\t}\n\t\t\t\trecentActivityList.add(recentActivity);\n\n\t\t\t} catch (JSONException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\n\t\treturn recentActivityList;\n\t}\n\n\t\/**\n\t * Parses multi notification objects\n\t * \n\t * @param notificationsJson\n\t * @return\n\t *\/\n\tpublic static List<Notification> parseMultiNotificationObjects(\n\t\t\tJSONObject notificationsJson) {\n\n\t\tList<Notification> notifications = new ArrayList<Notification>();\n\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tIterator<String> iterator = notificationsJson.keys();\n\t\twhile (iterator.hasNext()) {\n\t\t\tString key = iterator.next();\n\t\t\ttry {\n\t\t\t\tJSONObject notificationJson = notificationsJson\n\t\t\t\t\t\t.getJSONObject(key);\n\t\t\t\tNotification notification = new Notification();\n\t\t\t\tnotification = sGsonExpose.fromJson(\n\t\t\t\t\t\tnotificationJson.toString(), Notification.class);\n\n\t\t\t\tif (notificationJson.has(Const.MESSAGES)) {\n\t\t\t\t\tJSONObject messagesJson = notificationJson\n\t\t\t\t\t\t\t.getJSONObject(Const.MESSAGES);\n\t\t\t\t\tnotification\n\t\t\t\t\t\t\t.setMessages(parseMultiNotificationMessageObjects(\n\t\t\t\t\t\t\t\t\tmessagesJson, notification.getTargetId()));\n\t\t\t\t}\n\n\t\t\t\tnotifications.add(notification);\n\t\t\t} catch (JSONException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn notifications;\n\t}\n\n\t\/**\n\t * Parses multi notification message objects\n\t * \n\t * @param messagesJson\n\t * @return\n\t *\/\n\tpublic static List<NotificationMessage> parseMultiNotificationMessageObjects(\n\t\t\tJSONObject messagesJson, String targetId) {\n\n\t\tList<NotificationMessage> messages = new ArrayList<NotificationMessage>();\n\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tIterator<String> iterator = messagesJson.keys();\n\t\twhile (iterator.hasNext()) {\n\t\t\tString key = iterator.next();\n\t\t\ttry {\n\t\t\t\tJSONObject messageJson = messagesJson.getJSONObject(key);\n\t\t\t\tNotificationMessage notificationMessage = new NotificationMessage();\n\t\t\t\tnotificationMessage = sGsonExpose.fromJson(\n\t\t\t\t\t\tmessageJson.toString(), NotificationMessage.class);\n\t\t\t\tnotificationMessage.setTargetId(targetId);\n\t\t\t\tnotificationMessage.setUserAvatarFileId(CouchDB\n\t\t\t\t\t\t.findAvatarFileId(notificationMessage.getFromUserId()));\n\t\t\t\tmessages.add(notificationMessage);\n\t\t\t} catch (JSONException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn messages;\n\t}\n\n\t\/**\n\t * Parse user JSON objects from get user contacts call\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static List<User> parseUserContacts(JSONObject json) {\n\n\t\tList<User> users = null;\n\n\t\tif (json != null) {\n\t\t\t\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tusers = new ArrayList<User>();\n\n\t\t\t\t\/\/ Get the element that holds the users ( JSONArray )\n\t\t\t\tJSONArray rows = json.getJSONArray(Const.ROWS);\n\n\t\t\t\tfor (int i = 0; i < rows.length(); i++) {\n\n\t\t\t\t\tJSONObject row = rows.getJSONObject(i);\n\t\t\t\t\tif (!row.isNull(Const.DOC)) {\n\t\t\t\t\t\tJSONObject userJson = row.getJSONObject(Const.DOC);\n\n\t\t\t\t\t\tUser user = new User();\n\n\t\t\t\t\t\tuser = sGsonExpose.fromJson(userJson.toString(),\n\t\t\t\t\t\t\t\tUser.class);\n\n\t\t\t\t\t\t\/\/ if (userJson.has(Const.ATTACHMENTS)) {\n\t\t\t\t\t\t\/\/\n\t\t\t\t\t\t\/\/ List<Attachment> attachments = new\n\t\t\t\t\t\t\/\/ ArrayList<Attachment>();\n\t\t\t\t\t\t\/\/\n\t\t\t\t\t\t\/\/ JSONObject json_attachments = userJson\n\t\t\t\t\t\t\/\/ .getJSONObject(Const.ATTACHMENTS);\n\t\t\t\t\t\t\/\/\n\t\t\t\t\t\t\/\/ @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\t\/\/ Iterator<String> keys = json_attachments.keys();\n\t\t\t\t\t\t\/\/ while (keys.hasNext()) {\n\t\t\t\t\t\t\/\/ String key = keys.next();\n\t\t\t\t\t\t\/\/ try {\n\t\t\t\t\t\t\/\/\n\t\t\t\t\t\t\/\/ JSONObject json_attachment = json_attachments\n\t\t\t\t\t\t\/\/ .getJSONObject(key);\n\t\t\t\t\t\t\/\/ Attachment attachment = sGsonExpose\n\t\t\t\t\t\t\/\/ .fromJson(\n\t\t\t\t\t\t\/\/ json_attachment.toString(),\n\t\t\t\t\t\t\/\/ Attachment.class);\n\t\t\t\t\t\t\/\/ attachment.setName(key);\n\t\t\t\t\t\t\/\/ attachments.add(attachment);\n\t\t\t\t\t\t\/\/ } catch (Exception e) {\n\t\t\t\t\t\t\/\/ }\n\t\t\t\t\t\t\/\/ }\n\t\t\t\t\t\t\/\/ user.setAttachments(attachments);\n\t\t\t\t\t\t\/\/\n\t\t\t\t\t\t\/\/ String url = null;\n\t\t\t\t\t\t\/\/ if (user.getAvatarName() != null) {\n\t\t\t\t\t\t\/\/ url = CouchDB.getUrl() + user.getId() + \"\/\"\n\t\t\t\t\t\t\/\/ + user.getAvatarName();\n\t\t\t\t\t\t\/\/ } else {\n\t\t\t\t\t\t\/\/ url = CouchDB.getUrl() + user.getId() + \"\/\"\n\t\t\t\t\t\t\/\/ + Const.USER_AVATAR;\n\t\t\t\t\t\t\/\/ }\n\t\t\t\t\t\t\/\/ user.setImageUrl(url);\n\t\t\t\t\t\t\/\/\n\t\t\t\t\t\t\/\/ } else {\n\t\t\t\t\t\t\/\/ user.setImageUrl(null);\n\t\t\t\t\t\t\/\/ }\n\n\t\t\t\t\t\tif (userJson.has(Const.FAVORITE_GROUPS)) {\n\t\t\t\t\t\t\tJSONArray favorite_groups = userJson\n\t\t\t\t\t\t\t\t\t.getJSONArray(Const.FAVORITE_GROUPS);\n\n\t\t\t\t\t\t\tList<String> groups = new ArrayList<String>();\n\n\t\t\t\t\t\t\tfor (int z = 0; z < favorite_groups.length(); z++) {\n\t\t\t\t\t\t\t\tgroups.add(favorite_groups.getString(z));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tuser.setGroupIds(groups);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (userJson.has(Const.CONTACTS)) {\n\t\t\t\t\t\t\tJSONArray contacts = userJson\n\t\t\t\t\t\t\t\t\t.getJSONArray(Const.CONTACTS);\n\n\t\t\t\t\t\t\tList<String> contactsIds = new ArrayList<String>();\n\n\t\t\t\t\t\t\tfor (int j = 0; j < contacts.length(); j++) {\n\t\t\t\t\t\t\t\tcontactsIds.add(contacts.getString(j));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tuser.setContactIds(contactsIds);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tusers.add(user);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(\n\t\t\t\t\t\tTAG + \"parseUserContacts\",\n\t\t\t\t\t\t\"Error while retrieving data from json... Probably no users found!\",\n\t\t\t\t\t\te);\n\t\t\t}\n\t\t}\n\n\t\treturn users;\n\t}\n\n\t\/**\n\t * Parse comment JSON objects from get message comments\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static List<Comment> parseMessageComments(JSONObject json) {\n\n\t\tList<Comment> comments = null;\n\n\t\tif (json != null) {\n\t\t\t\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcomments = new ArrayList<Comment>();\n\n\t\t\t\t\/\/ Get the element that holds the users ( JSONArray )\n\t\t\t\tJSONArray rows = json.getJSONArray(Const.ROWS);\n\n\t\t\t\tfor (int i = 0; i < rows.length(); i++) {\n\n\t\t\t\t\tJSONObject row = rows.getJSONObject(i);\n\t\t\t\t\tif (!row.isNull(Const.DOC)) {\n\t\t\t\t\t\tJSONObject commentJson = row.getJSONObject(Const.DOC);\n\n\t\t\t\t\t\tComment comment = new Comment();\n\t\t\t\t\t\tcomment = sGsonExpose.fromJson(commentJson.toString(),\n\t\t\t\t\t\t\t\tComment.class);\n\t\t\t\t\t\tcomments.add(comment);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(\n\t\t\t\t\t\tTAG + \"parseMessageComments\",\n\t\t\t\t\t\t\"Error while retrieving data from json... Probably no comments found!\",\n\t\t\t\t\t\te);\n\t\t\t}\n\t\t}\n\n\t\treturn comments;\n\t}\n\n\t\/**\n\t * Create user response object\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static String createUser(JSONObject json) {\n\n\t\tboolean ok = false;\n\t\tString id = null;\n\n\t\tif (json != null) {\n\t\t\t\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tok = json.getBoolean(Const.OK);\n\t\t\t\tid = json.getString(Const.ID);\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"createUser\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\tif (!ok) {\n\t\t\tLogger.error(TAG + \"createUser\", \"error in creating user\");\n\t\t}\n\n\t\treturn id;\n\t}\n\n\t\/**\n\t * Update user response object, the Const.REV value is important in order to\n\t * continue using the application\n\t * \n\t * If you are updating contacts or favorites on of them should be null\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static boolean updateUser(JSONObject json, List<String> contactsIds,\n\t\t\tList<String> groupsIds) {\n\n\t\tboolean ok = false;\n\t\tString rev = \"\";\n\n\t\tif (json != null) {\n\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(false, true, isInvalidToken(json));\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tok = json.getBoolean(Const.OK);\n\t\t\t\trev = json.getString(Const.REV);\n\n\t\t\t\tif (ok) {\n\t\t\t\t\tUsersManagement.getLoginUser().setRev(rev);\n\n\t\t\t\t\tif (null != contactsIds) {\n\t\t\t\t\t\tUsersManagement.getLoginUser().setContactIds(\n\t\t\t\t\t\t\t\tcontactsIds);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (null != groupsIds) {\n\t\t\t\t\t\tUsersManagement.getLoginUser().setGroupIds(groupsIds);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"updateUser\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t\/**\n\t * JSON response from creating a group\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static String createGroup(JSONObject json) {\n\n\t\tboolean ok = false;\n\t\tString id = null;\n\n\t\tif (json != null) {\n\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tok = json.getBoolean(Const.OK);\n\t\t\t\tid = json.getString(Const.ID);\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"createGroup\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\tif (!ok) {\n\t\t\tLogger.error(TAG + \"createGroup\", \"error in creating a group\");\n\t\t\treturn null;\n\t\t}\n\n\t\treturn id;\n\t}\n\n\t\/**\n\t * JSON response from deleting a group\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static boolean deleteGroup(JSONObject json) {\n\n\t\tboolean ok = false;\n\n\t\tif (json != null) {\n\n\t\t    if (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(false, false, isInvalidToken(json));\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tok = json.getBoolean(Const.OK);\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"deleteGroup\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\treturn ok;\n\t}\n\n\tpublic static String findAvatarFileId(JSONObject json) {\n\t\tString avatarFileId = null;\n\n\t\tif (json != null) {\n\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\tJSONArray rows = json.getJSONArray(Const.ROWS);\n\n\t\t\t\tfor (int i = 0; i < rows.length(); i++) {\n\n\t\t\t\t\tJSONObject row = rows.getJSONObject(i);\n\t\t\t\t\tavatarFileId = row.getString(Const.VALUE);\n\n\t\t\t\t}\n\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"findAvatarFileId\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\treturn avatarFileId;\n\t}\n\n\t\/**\n\t * JSON response from deleting a user group\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static boolean deleteUserGroup(JSONObject json) {\n\n\t\tboolean ok = false;\n\n\t\tif (json != null) {\n\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(false, false, isInvalidToken(json));\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tok = json.getBoolean(Const.OK);\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"deleteUserGroup\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\treturn ok;\n\t}\n\n\t\/**\n\t * JSON response from creating a user group\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static String createUserGroup(JSONObject json) {\n\n\t\tboolean ok = false;\n\t\tString id = null;\n\n\t\tif (json != null) {\n\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tok = json.getBoolean(Const.OK);\n\t\t\t\tid = json.getString(Const.ID);\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"createUserGroup\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\tif (!ok) {\n\t\t\tLogger.error(TAG + \"createUserGroup\", \"error in creating a group\");\n\t\t\treturn null;\n\t\t}\n\n\t\treturn id;\n\t}\n\n\t\/**\n\t * JSON response from creating a comment\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static String createComment(JSONObject json) {\n\n\t\tboolean ok = false;\n\t\tString id = null;\n\n\t\tif (json != null) {\n\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tok = json.getBoolean(Const.OK);\n\t\t\t\tid = json.getString(Const.ID);\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"createComment\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\tif (!ok) {\n\t\t\tLogger.error(TAG + \"createComment\", \"error in creating comment\");\n\t\t\treturn null;\n\t\t}\n\n\t\treturn id;\n\t}\n\n\t\/**\n\t * JSON response from updating a group you own\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static boolean updateGroup(JSONObject json) {\n\n\t\tboolean ok = false;\n\n\t\tif (json != null) {\n\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(false, false, isInvalidToken(json));\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tok = json.getBoolean(Const.OK);\n\n\t\t\t\t\/* Important *\/\n\t\t\t\tUsersManagement.getToGroup().setRev(json.getString(Const.REV));\n\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"updateGroup\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\tif (!ok) {\n\t\t\tLogger.error(TAG + \"updateGroup\", \"error in updating a group\");\n\t\t}\n\n\t\treturn ok;\n\t}\n\n\t\/**\n\t * Parse single JSON object of type Group\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static Group parseSingleGroupObject(JSONObject json) {\n\n\t\tGroup group = null;\n\n\t\tif (json != null) {\n\t\t\t\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\tJSONArray rows = json.getJSONArray(Const.ROWS);\n\t\t\t\tJSONObject row = rows.getJSONObject(0);\n\n\t\t\t\tJSONObject groupJson = row.getJSONObject(Const.VALUE);\n\t\t\t\tgroup = sGsonExpose.fromJson(groupJson.toString(), Group.class);\n\n\t\t\t\t\/\/ if (groupJson.has(Const.ATTACHMENTS)) {\n\t\t\t\t\/\/ List<Attachment> attachments = new ArrayList<Attachment>();\n\t\t\t\t\/\/\n\t\t\t\t\/\/ JSONObject json_attachments = groupJson\n\t\t\t\t\/\/ .getJSONObject(Const.ATTACHMENTS);\n\t\t\t\t\/\/\n\t\t\t\t\/\/ @SuppressWarnings(\"unchecked\")\n\t\t\t\t\/\/ Iterator<String> keys = json_attachments.keys();\n\t\t\t\t\/\/ while (keys.hasNext()) {\n\t\t\t\t\/\/ String key = keys.next();\n\t\t\t\t\/\/ try {\n\t\t\t\t\/\/\n\t\t\t\t\/\/ JSONObject json_attachment = json_attachments\n\t\t\t\t\/\/ .getJSONObject(key);\n\t\t\t\t\/\/ Attachment attachment = sGsonExpose.fromJson(\n\t\t\t\t\/\/ json_attachment.toString(),\n\t\t\t\t\/\/ Attachment.class);\n\t\t\t\t\/\/ attachment.setName(key);\n\t\t\t\t\/\/ attachments.add(attachment);\n\t\t\t\t\/\/ } catch (Exception e) {\n\t\t\t\t\/\/ }\n\t\t\t\t\/\/ }\n\t\t\t\t\/\/ group.setAttachments(attachments);\n\t\t\t\t\/\/\n\t\t\t\t\/\/ String url = null;\n\t\t\t\t\/\/ if (group.getAvatarName() != null) {\n\t\t\t\t\/\/ url = CouchDB.getUrl() + group.getId() + \"\/\"\n\t\t\t\t\/\/ + group.getAvatarName();\n\t\t\t\t\/\/ } else {\n\t\t\t\t\/\/ url = CouchDB.getUrl() + group.getId() + \"\/\"\n\t\t\t\t\/\/ + Const.GROUP_AVATAR;\n\t\t\t\t\/\/ }\n\t\t\t\t\/\/ group.setImageUrl(url);\n\t\t\t\t\/\/ } else {\n\t\t\t\t\/\/ group.setImageUrl(null);\n\t\t\t\t\/\/ }\n\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"parseSingleGroupObject\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\treturn group;\n\t}\n\n\t   \/**\n     * Parse single JSON object of type Group\n     * \n     * @param json\n     * @return\n     *\/\n    public static Group parseSingleGroupObjectWithoutRowParam(JSONObject json) {\n\n        Group group = null;\n\n        if (json != null) {\n        \t\n        \tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n            try {\n\n                group = sGsonExpose.fromJson(json.toString(), Group.class);\n\n            } catch (Exception e) {\n                Logger.error(TAG + \"parseSingleGroupObject\",\n                        \"Error while retrieving data from json\", e);\n            }\n        }\n\n        return group;\n    }\n    \n\t\/**\n\t * Parse multi JSON objects of type Group\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static List<Group> parseMultiGroupObjects(JSONObject json) {\n\n\t\tList<Group> groups = null;\n\n\t\tif (json != null) {\n\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tgroups = new ArrayList<Group>();\n\n\t\t\t\tJSONArray rows = json.getJSONArray(Const.ROWS);\n\n\t\t\t\tfor (int i = 0; i < rows.length(); i++) {\n\n\t\t\t\t\tJSONObject row = rows.getJSONObject(i);\n\t\t\t\t\tString key = row.getString(Const.KEY);\n\n\t\t\t\t\tif (!key.equals(Const.NULL)) {\n\n\t\t\t\t\t\tJSONObject groupJson = row.getJSONObject(Const.VALUE);\n\n\t\t\t\t\t\tGroup group = sGsonExpose.fromJson(\n\t\t\t\t\t\t\t\tgroupJson.toString(), Group.class);\n\n\t\t\t\t\t\t\/\/ if (groupJson.has(Const.ATTACHMENTS)) {\n\t\t\t\t\t\t\/\/ List<Attachment> attachments = new\n\t\t\t\t\t\t\/\/ ArrayList<Attachment>();\n\t\t\t\t\t\t\/\/\n\t\t\t\t\t\t\/\/ JSONObject json_attachments = groupJson\n\t\t\t\t\t\t\/\/ .getJSONObject(Const.ATTACHMENTS);\n\t\t\t\t\t\t\/\/\n\t\t\t\t\t\t\/\/ @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\t\/\/ Iterator<String> keys = json_attachments.keys();\n\t\t\t\t\t\t\/\/ while (keys.hasNext()) {\n\t\t\t\t\t\t\/\/ String attachmentKey = keys.next();\n\t\t\t\t\t\t\/\/ try {\n\t\t\t\t\t\t\/\/\n\t\t\t\t\t\t\/\/ JSONObject json_attachment = json_attachments\n\t\t\t\t\t\t\/\/ .getJSONObject(attachmentKey);\n\t\t\t\t\t\t\/\/ Attachment attachment = sGsonExpose\n\t\t\t\t\t\t\/\/ .fromJson(\n\t\t\t\t\t\t\/\/ json_attachment.toString(),\n\t\t\t\t\t\t\/\/ Attachment.class);\n\t\t\t\t\t\t\/\/ attachment.setName(attachmentKey);\n\t\t\t\t\t\t\/\/ attachments.add(attachment);\n\t\t\t\t\t\t\/\/ } catch (Exception e) {\n\t\t\t\t\t\t\/\/ }\n\t\t\t\t\t\t\/\/ }\n\t\t\t\t\t\t\/\/ group.setAttachments(attachments);\n\t\t\t\t\t\t\/\/\n\t\t\t\t\t\t\/\/ String url = null;\n\t\t\t\t\t\t\/\/ if (group.getAvatarName() != null) {\n\t\t\t\t\t\t\/\/ url = CouchDB.getUrl() + group.getId() + \"\/\"\n\t\t\t\t\t\t\/\/ + group.getAvatarName();\n\t\t\t\t\t\t\/\/ } else {\n\t\t\t\t\t\t\/\/ url = CouchDB.getUrl() + group.getId() + \"\/\"\n\t\t\t\t\t\t\/\/ + Const.GROUP_AVATAR;\n\t\t\t\t\t\t\/\/ }\n\t\t\t\t\t\t\/\/ group.setImageUrl(url);\n\t\t\t\t\t\t\/\/\n\t\t\t\t\t\t\/\/ } else {\n\t\t\t\t\t\t\/\/ group.setImageUrl(null);\n\t\t\t\t\t\t\/\/ }\n\n\t\t\t\t\t\tgroups.add(group);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"parseMultiGroupObjects\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\treturn groups;\n\t}\n\n\t\/**\n\t * Parse favorite groups JSON objects\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static List<Group> parseFavoriteGroups(JSONObject json) {\n\n\t\tList<Group> groups = null;\n\n\t\tif (json != null) {\n\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tgroups = new ArrayList<Group>();\n\n\t\t\t\tJSONArray rows = json.getJSONArray(Const.ROWS);\n\n\t\t\t\tfor (int i = 0; i < rows.length(); i++) {\n\n\t\t\t\t\tJSONObject row = rows.getJSONObject(i);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tJSONObject groupJson = row.getJSONObject(Const.DOC);\n\n\t\t\t\t\t\tString type = groupJson.getString(Const.TYPE);\n\t\t\t\t\t\tif (!type.equals(Const.GROUP)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tGroup group = sGsonExpose.fromJson(\n\t\t\t\t\t\t\t\tgroupJson.toString(), Group.class);\n\n\t\t\t\t\t\tgroups.add(group);\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"parseFavoriteGroups\", e);\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\n\t\treturn groups;\n\t}\n\n\t\/**\n\t * Parse multi JSON objects of type UserGroup\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static List<UserGroup> parseMultiUserGroupObjects(JSONObject json) {\n\n\t\tList<UserGroup> usersGroup = null;\n\n\t\tif (json != null) {\n\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tusersGroup = new ArrayList<UserGroup>();\n\n\t\t\t\tJSONArray rows = json.getJSONArray(Const.ROWS);\n\n\t\t\t\tfor (int i = 0; i < rows.length(); i++) {\n\n\t\t\t\t\tJSONObject row = rows.getJSONObject(i);\n\t\t\t\t\tString key = row.getString(Const.KEY);\n\n\t\t\t\t\tif (!key.equals(Const.NULL)) {\n\n\t\t\t\t\t\tJSONObject userGroupJson = row\n\t\t\t\t\t\t\t\t.getJSONObject(Const.VALUE);\n\n\t\t\t\t\t\tUserGroup userGroup = sGsonExpose.fromJson(\n\t\t\t\t\t\t\t\tuserGroupJson.toString(), UserGroup.class);\n\t\t\t\t\t\tusersGroup.add(userGroup);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"parseMultiUserGroupObjects\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\treturn usersGroup;\n\t}\n\t\n\t\/**\n\t * Parse multi JSON objects of type GroupCategory\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static List<GroupCategory> parseMultiGroupCategoryObjects(JSONObject json) {\n\t\tList<GroupCategory> groupCategories = null;\n\n\t\tif (json != null) {\n\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tgroupCategories = new ArrayList<GroupCategory>();\n\n\t\t\t\tJSONArray rows = json.getJSONArray(Const.ROWS);\n\n\t\t\t\tfor (int i = 0; i < rows.length(); i++) {\n\n\t\t\t\t\tJSONObject row = rows.getJSONObject(i);\n\t\t\t\t\tString key = row.getString(Const.KEY);\n\n\t\t\t\t\tif (!key.equals(Const.NULL)) {\n\n\t\t\t\t\t\tJSONObject groupCategoryJson = row.getJSONObject(Const.VALUE);\n\n\t\t\t\t\t\tGroupCategory groupCategory = sGsonExpose.fromJson(\n\t\t\t\t\t\t\t\tgroupCategoryJson.toString(), GroupCategory.class);\n\n\t\t\t\t\t\tif (groupCategoryJson.has(Const.ATTACHMENTS)) {\n\t\t\t\t\t\t\tList<Attachment> attachments = new ArrayList<Attachment>();\n\n\t\t\t\t\t\t\tJSONObject json_attachments = groupCategoryJson\n\t\t\t\t\t\t\t\t\t.getJSONObject(Const.ATTACHMENTS);\n\n\t\t\t\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\t\tIterator<String> keys = json_attachments.keys();\n\t\t\t\t\t\t\twhile (keys.hasNext()) {\n\t\t\t\t\t\t\t\tString attachmentKey = keys.next();\n\t\t\t\t\t\t\t\ttry {\n\n\t\t\t\t\t\t\t\t\tJSONObject json_attachment = json_attachments\n\t\t\t\t\t\t\t\t\t\t\t.getJSONObject(attachmentKey);\n\t\t\t\t\t\t\t\t\tAttachment attachment = sGsonExpose\n\t\t\t\t\t\t\t\t\t\t\t.fromJson(\n\t\t\t\t\t\t\t\t\t\t\t\t\tjson_attachment.toString(),\n\t\t\t\t\t\t\t\t\t\t\t\t\tAttachment.class);\n\t\t\t\t\t\t\t\t\tattachment.setName(attachmentKey);\n\t\t\t\t\t\t\t\t\tattachments.add(attachment);\n\t\t\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tgroupCategory.setAttachments(attachments);\n\n\t\t\t\t\t\t\tString imageUrl = CouchDB.getUrl() + groupCategory.getId() + \"\/\"\n\t\t\t\t\t\t\t\t\t\t+ Const.GROUP_CATEGORY_AVATAR;\n\t\t\t\t\t\t\tgroupCategory.setImageUrl(imageUrl);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tgroupCategory.setImageUrl(null);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgroupCategories.add(groupCategory);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"parseMultiGroupObjects\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\treturn groupCategories;\n\t}\n\n\t\/**\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static int getCommentCount(JSONObject json) {\n\n\t\tint count = 0;\n\n\t\tif (json != null) {\n\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\tJSONArray rows = json.getJSONArray(Const.ROWS);\n\n\t\t\t\tfor (int i = 0; i < rows.length(); i++) {\n\n\t\t\t\t\tJSONObject row = rows.getJSONObject(i);\n\t\t\t\t\tcount = row.getInt(Const.VALUE);\n\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"getCommentCount\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\treturn count;\n\t}\n\n\t\/**\n\t * Find a single Message object\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static Message findMessage(JSONObject json) {\n\t\t\n\t\tif (json.has(Const.ERROR)) {\n\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\treturn parseMessageObject(json, false, false, false);\n\t}\n\n\t\/**\n\t * Find all messages for current user\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static ArrayList<Message> findMessagesForUser(JSONObject json) {\n\t\tArrayList<Message> messages = null;\n\n\t\tif (json != null) {\n\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tmessages = new ArrayList<Message>();\n\n\t\t\t\tJSONArray rows = json.getJSONArray(Const.ROWS);\n\n\t\t\t\tfor (int i = 0; i < rows.length(); i++) {\n\n\t\t\t\t\tJSONObject row = rows.getJSONObject(i);\n\t\t\t\t\tJSONObject msgJson = row.getJSONObject(Const.VALUE);\n\n\t\t\t\t\tMessage message = null;\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tString messageType = msgJson\n\t\t\t\t\t\t\t\t.getString(Const.MESSAGE_TYPE);\n\n\t\t\t\t\t\tif (messageType.equals(Const.TEXT)) {\n\n\t\t\t\t\t\t\tmessage = new Gson().fromJson(msgJson.toString(),\n\t\t\t\t\t\t\t\t\tMessage.class);\n\n\t\t\t\t\t\t} else if (messageType.equals(Const.IMAGE)) {\n\n\t\t\t\t\t\t\tmessage = parseMessageObject(msgJson, true, false,\n\t\t\t\t\t\t\t\t\tfalse);\n\n\t\t\t\t\t\t} else if (messageType.equals(Const.VOICE)) {\n\n\t\t\t\t\t\t\tmessage = parseMessageObject(msgJson, false, true,\n\t\t\t\t\t\t\t\t\tfalse);\n\n\t\t\t\t\t\t} else if (messageType.equals(Const.VIDEO)) {\n\n\t\t\t\t\t\t\tmessage = parseMessageObject(msgJson, false, false,\n\t\t\t\t\t\t\t\t\ttrue);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (messageType.equals(Const.EMOTICON)) {\n\n\t\t\t\t\t\t\tmessage = parseMessageObject(msgJson, false, false,\n\t\t\t\t\t\t\t\t\tfalse);\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tmessage = new Gson().fromJson(msgJson.toString(),\n\t\t\t\t\t\t\t\t\tMessage.class);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (null == message) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else {\n\t\t\t\t\t    \n\t\t\t\t\t    String avatarFileId = CouchDB.getFromMemCache(message.getFromUserId());\n\t\t\t\t\t    \n\t\t\t\t\t    if(avatarFileId == null){\n\t                        avatarFileId = CouchDB.findAvatarFileId(message.getFromUserId());\n\t                        CouchDB.saveToMemCache(message.getFromUserId(),avatarFileId);\n\t\t\t\t\t    }else{\n\t\t\t\t\t        Log.d(\"test\",avatarFileId);\n\t\t\t\t\t    }\n\n\t\t\t\t\t\tmessage.setUserAvatarFileId(avatarFileId);\n\t\t\t\t\t\tmessages.add(message);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"findMessagesForUser\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\tif (null != messages) {\n\t\t\tCollections.sort(messages);\n\t\t}\n\n\t\treturn messages;\n\t}\n\n\t\/**\n\t * Parse a single JSON object of Message type\n\t * \n\t * @param json\n\t * @param image\n\t * @param voice\n\t * @return\n\t *\/\n\tprivate static Message parseMessageObject(JSONObject json, boolean image,\n\t\t\tboolean voice, boolean video) {\n\n\t\tMessage message = new Message();\n\n\t\tif (json == null) {\n\t\t\treturn message;\n\t\t}\n\n\t\tif (json.has(Const.ERROR)) {\n\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\treturn null;\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setId(json.getString(Const._ID));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setId(\"\");\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setRev(json.getString(Const._REV));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setRev(\"\");\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setType(json.getString(Const.TYPE));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setType(\"\");\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setMessageType(json.getString(Const.MESSAGE_TYPE));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setMessageType(\"\");\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setMessageTargetType(json\n\t\t\t\t\t.getString(Const.MESSAGE_TARGET_TYPE));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setMessageTargetType(\"\");\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setBody(json.getString(Const.BODY));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setBody(\"\");\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setFromUserId(json.getString(Const.FROM_USER_ID));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setFromUserId(\"\");\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setFromUserName(json.getString(Const.FROM_USER_NAME));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setFromUserName(\"\");\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setToUserId(json.getString(Const.TO_USER_ID));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setToUserId(\"\");\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setToGroupName(json.getString(Const.TO_USER_NAME));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setToGroupName(\"\");\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setToGroupId(json.getString(Const.TO_GROUP_ID));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setToGroupId(\"\");\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setToGroupName(json.getString(Const.TO_GROUP_NAME));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setToGroupName(\"\");\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setCreated(json.getLong(Const.CREATED));\n\t\t} catch (JSONException e) {\n\t\t\treturn null;\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setModified(json.getLong(Const.MODIFIED));\n\t\t} catch (JSONException e) {\n\t\t\treturn null;\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setValid(json.getBoolean(Const.VALID));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setValid(true);\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setAttachments(json.getJSONObject(Const.ATTACHMENTS)\n\t\t\t\t\t.toString());\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setAttachments(\"\");\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setLatitude(json.getString(Const.LATITUDE));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setLatitude(\"\");\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setLongitude(json.getString(Const.LONGITUDE));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setLongitude(\"\");\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setImageFileId((json.getString(Const.PICTURE_FILE_ID)));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setImageFileId(\"\");\n\t\t}\n\n       try {\n                message.setImageThumbFileId((json.getString(Const.PICTURE_THUMB_FILE_ID)));\n        } catch (JSONException e) {\n                message.setImageThumbFileId(\"\");\n        }\n\t      \n\t\ttry {\n\t\t\tmessage.setVideoFileId((json.getString(Const.VIDEO_FILE_ID)));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setVideoFileId(\"\");\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setVoiceFileId((json.getString(Const.VOICE_FILE_ID)));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setVoiceFileId(\"\");\n\t\t}\n\n\t\ttry {\n\t\t\tmessage.setEmoticonImageUrl(json\n\t\t\t\t\t.getString(Const.EMOTICON_IMAGE_URL));\n\t\t} catch (JSONException e) {\n\t\t\tmessage.setEmoticonImageUrl(\"\");\n\t\t}\n\n\t\tif (image || video || voice) {\n\t\t\tmessage.setCommentCount(CouchDB.getCommentCount(message.getId()));\n\t\t}\n\n\t\treturn message;\n\t}\n\n\t\/**\n\t * Parse comments Json\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static List<Comment> parseCommentsJson(JSONObject json) {\n\n\t\tList<Comment> comments = null;\n\n\t\tif (json != null) {\n\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcomments = new ArrayList<Comment>();\n\n\t\t\t\tJSONArray rows = json.getJSONArray(Const.COMMENTS);\n\n\t\t\t\tfor (int i = 0; i < rows.length(); i++) {\n\n\t\t\t\t\tJSONObject commentJson = rows.getJSONObject(i);\n\n\t\t\t\t\tComment comment = sGsonExpose.fromJson(\n\t\t\t\t\t\t\tcommentJson.toString(), Comment.class);\n\n\t\t\t\t\tcomments.add(comment);\n\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"parseCommentsJson\",\n\t\t\t\t\t\t\"Error in parsing JSON data\", e);\n\t\t\t}\n\t\t}\n\n\t\treturn comments;\n\t}\n\n\t\/**\n\t * Parse multi comment objects\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static List<Comment> parseMultiCommentObjects(JSONObject json) {\n\n\t\tList<Comment> comments = null;\n\n\t\tif (json != null) {\n\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcomments = new ArrayList<Comment>();\n\n\t\t\t\tJSONArray rows = json.getJSONArray(Const.ROWS);\n\n\t\t\t\tfor (int i = 0; i < rows.length(); i++) {\n\n\t\t\t\t\tJSONObject row = rows.getJSONObject(i);\n\n\t\t\t\t\tString key = row.getString(Const.KEY);\n\n\t\t\t\t\tif (!\"null\".equals(key)) {\n\n\t\t\t\t\t\tJSONObject commentJson = row.getJSONObject(Const.VALUE);\n\n\t\t\t\t\t\tComment comment = sGsonExpose.fromJson(\n\t\t\t\t\t\t\t\tcommentJson.toString(), Comment.class);\n\n\t\t\t\t\t\tcomments.add(comment);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"parseMultiComments\",\n\t\t\t\t\t\t\"Error in parsing JSON data\", e);\n\t\t\t}\n\t\t}\n\n\t\treturn comments;\n\t}\n\n\t\/**\n\t * Parse multi emoticon objects\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static List<Emoticon> parseMultiEmoticonObjects(JSONObject json) {\n\n\t\tList<Emoticon> emoticons = null;\n\n\t\tif (json != null) {\n\t\t\t\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\temoticons = new ArrayList<Emoticon>();\n\n\t\t\t\tJSONArray rows = json.getJSONArray(Const.ROWS);\n\n\t\t\t\tfor (int i = 0; i < rows.length(); i++) {\n\n\t\t\t\t\tJSONObject row = rows.getJSONObject(i);\n\n\t\t\t\t\tString key = row.getString(Const.KEY);\n\n\t\t\t\t\tif (!\"null\".equals(key)) {\n\n\t\t\t\t\t\tJSONObject emoticonJson = row\n\t\t\t\t\t\t\t\t.getJSONObject(Const.VALUE);\n\n\t\t\t\t\t\tEmoticon emoticon = sGsonExpose.fromJson(\n\t\t\t\t\t\t\t\temoticonJson.toString(), Emoticon.class);\n\n\t\t\t\t\t\temoticons.add(emoticon);\n\n\/\/\t\t\t\t\t\tSpikaApp.getFileDir().saveFile(\n\/\/\t\t\t\t\t\t\t\temoticon.getIdentifier(),\n\/\/\t\t\t\t\t\t\t\temoticon.getImageUrl());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"parseMultiEmoticons\",\n\t\t\t\t\t\t\"Error i parsing JSON data\", e);\n\t\t\t}\n\t\t}\n\n\t\treturn emoticons;\n\t}\n\t\n\t\/**\n\t * JSON response from creating a watching group log\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static String createWatchingGroupLog(JSONObject json) {\n\n\t\tboolean ok = false;\n\t\tString id = null;\n\t\tString rev = null;\n\n\t\tif (json != null) {\n\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(null, false, isInvalidToken(json));\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tok = json.getBoolean(Const.OK);\n\t\t\t\tid = json.getString(Const.ID);\n\t\t\t\trev = json.getString(Const.REV);\n\t\t\t\t\n\t\t\t\tSpikaApp.getPreferences().setWatchingGroupId(id);\n\t\t\t\tSpikaApp.getPreferences().setWatchingGroupRev(rev);\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"createWatchingGroupLog\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\tif (!ok) {\n\t\t\tLogger.error(TAG + \"createWatchingGroupLog\", \"error in creating a watching group log\");\n\t\t\treturn null;\n\t\t}\n\n\t\treturn id;\n\t}\n\t\n\t\/**\n\t * JSON response from deleting a watching group log\n\t * \n\t * @param json\n\t * @return\n\t *\/\n\tpublic static boolean deleteWatchingGroupLog(JSONObject json) {\n\n\t\tboolean ok = false;\n\n\t\tif (json != null) {\n\n\t\t\tif (json.has(Const.ERROR)) {\n\t\t\t\tappLogout(false, false, isInvalidToken(json));\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tok = json.getBoolean(Const.OK);\n\t\t\t\t\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.error(TAG + \"deleteWatchingGroupLog\",\n\t\t\t\t\t\t\"Error while retrieving data from json\", e);\n\t\t\t}\n\t\t}\n\n\t\treturn ok;\n\t}\n\t\n\tprivate static boolean isInvalidToken(JSONObject json) {\n\t\tif (json.has(Const.MESSAGE)) {\n\t\t\ttry {\n\t\t\t\tString errorMessage = json.getString(Const.MESSAGE);\n\t\t\t\tif (errorMessage.equalsIgnoreCase(Const.INVALID_TOKEN)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} catch (JSONException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static Object appLogout(Object object, boolean isUserUpdateConflict, boolean isInvalidToken) {\n\t\tSideBarActivity.appLogout(isUserUpdateConflict, true, isInvalidToken);\n\t\treturn object;\n\t}\n\t\n\n}"
	}
}
