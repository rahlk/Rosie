{"java.functions":{"text":"package com.beardedhen.androidbootstrap;\n\nimport android.content.Context;\nimport android.content.res.TypedArray;\nimport android.os.Bundle;\nimport android.os.Parcelable;\nimport android.support.annotation.NonNull;\nimport android.support.annotation.Nullable;\nimport android.util.AttributeSet;\nimport android.view.Gravity;\nimport android.view.animation.AlphaAnimation;\nimport android.view.animation.Animation;\nimport android.view.animation.LinearInterpolator;\nimport android.view.animation.RotateAnimation;\nimport android.widget.TextView;\n\nimport com.beardedhen.androidbootstrap.api.attributes.BootstrapBrand;\nimport com.beardedhen.androidbootstrap.api.defaults.DefaultBootstrapBrand;\nimport com.beardedhen.androidbootstrap.api.view.BootstrapBrandView;\nimport com.beardedhen.androidbootstrap.api.view.BootstrapTextView;\nimport com.beardedhen.androidbootstrap.font.FontAwesome;\nimport com.beardedhen.androidbootstrap.font.IconSet;\nimport com.beardedhen.androidbootstrap.font.MaterialIcons;\nimport com.beardedhen.androidbootstrap.font.Typicon;\n\nimport java.io.Serializable;\n\n\/**\n * This class extends the default Android TextView to supply Bootstrap behaviour. The text color\n * can be set by changing the BootstrapBrand, and scalable Typeface icons can be interspersed with\n * regular text, using the BootstrapText spannable.\n *\/\npublic class AwesomeTextView extends TextView implements BootstrapTextView, BootstrapBrandView {\n\n    private static final String TAG = \"com.beardedhen.androidbootstrap.AwesomeTextView\";\n\n    private BootstrapText bootstrapText;\n    private BootstrapBrand bootstrapBrand;\n\n    public enum AnimationSpeed {\n        FAST(500, 200),\n        MEDIUM(1000, 500),\n        SLOW(2000, 1000);\n\n        private final long rotateDuration;\n        private final long flashDuration;\n\n        AnimationSpeed(long rotateDuration, long flashDuration) {\n            this.rotateDuration = rotateDuration;\n            this.flashDuration = flashDuration;\n        }\n\n        public long getRotateDuration() {\n            return rotateDuration;\n        }\n\n        public long getFlashDuration() {\n            return flashDuration;\n        }\n    }\n\n    public AwesomeTextView(Context context) {\n        super(context);\n        initialise(null);\n    }\n\n    public AwesomeTextView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        initialise(attrs);\n    }\n\n    public AwesomeTextView(Context context, AttributeSet attrs, int defStyle) {\n        super(context, attrs, defStyle);\n        initialise(attrs);\n    }\n\n    private void initialise(AttributeSet attrs) {\n        TypedArray a = getContext().obtainStyledAttributes(attrs, R.styleable.AwesomeTextView);\n        String markdownText;\n\n        try {\n            int typeOrdinal = a.getInt(R.styleable.AwesomeTextView_bootstrapBrand, -1);\n            int faIconOrdinal = a.getInt(R.styleable.AwesomeTextView_fontAwesomeIcon, -1);\n            int typiconOrdinal = a.getInt(R.styleable.AwesomeTextView_typicon, -1);\n            int materialIconOrdinal = a.getInt(R.styleable.AwesomeTextView_materialIcon, -1);\n\n            boolean clickable = a.getBoolean(R.styleable.AwesomeTextView_android_clickable, true);\n\n            this.bootstrapBrand = DefaultBootstrapBrand.fromAttributeValue(typeOrdinal);\n            boolean editMode = isInEditMode();\n\n            if (typiconOrdinal != -1) {\n                final IconSet typicon = TypefaceProvider.retrieveRegisteredIconSet(Typicon.FONT_PATH, editMode);\n\n                if (!editMode) {\n                    setIcon(typicon.iconCodeForAttrIndex(typiconOrdinal), typicon);\n                }\n            }\n            if (faIconOrdinal != -1) {\n                final IconSet fontAwesome = TypefaceProvider.retrieveRegisteredIconSet(FontAwesome.FONT_PATH, editMode);\n\n                if (!editMode) {\n                    setIcon(fontAwesome.iconCodeForAttrIndex(faIconOrdinal), fontAwesome);\n                }\n            }\n            if (materialIconOrdinal != -1) {\n                final IconSet materialIcons = TypefaceProvider.retrieveRegisteredIconSet(MaterialIcons.FONT_PATH, editMode);\n\n                if (!editMode) {\n                    setIcon(materialIcons.iconCodeForAttrIndex(materialIconOrdinal), materialIcons);\n                }\n            }\n            markdownText = a.getString(R.styleable.AwesomeTextView_bootstrapText);\n\n            setClickable(clickable); \/\/ allows view to reach android:state_pressed\n\n            int gravity = a.getInt(R.styleable.AwesomeTextView_android_gravity, Gravity.CENTER);\n            setGravity(gravity);\n        }\n        finally {\n            a.recycle();\n        }\n\n        if (markdownText != null) {\n            setMarkdownText(markdownText);\n        }\n        updateBootstrapState();\n    }\n\n    @Override public Parcelable onSaveInstanceState() {\n        Bundle bundle = new Bundle();\n        bundle.putParcelable(TAG, super.onSaveInstanceState());\n        bundle.putSerializable(BootstrapTextView.KEY, bootstrapText);\n        bundle.putSerializable(BootstrapBrand.KEY, bootstrapBrand);\n        return bundle;\n    }\n\n    @Override public void onRestoreInstanceState(Parcelable state) {\n        if (state instanceof Bundle) {\n            Bundle bundle = (Bundle) state;\n\n            Serializable text = bundle.getSerializable(BootstrapTextView.KEY);\n            Serializable brand = bundle.getSerializable(BootstrapBrand.KEY);\n\n            if (brand instanceof BootstrapBrand) {\n                bootstrapBrand = (BootstrapBrand) brand;\n            }\n            if (text instanceof BootstrapText) {\n                bootstrapText = (BootstrapText) text;\n            }\n            state = bundle.getParcelable(TAG);\n        }\n        super.onRestoreInstanceState(state);\n        updateBootstrapState();\n    }\n\n    \/**\n     * Starts a Flashing Animation on the AwesomeTextView\n     *\n     * @param forever whether the animation should be infinite or play once\n     * @param speed   how fast the item should flash\n     *\/\n    public void startFlashing(boolean forever, AnimationSpeed speed) {\n        Animation fadeIn = new AlphaAnimation(0, 1);\n\n        \/\/set up extra variables\n        fadeIn.setDuration(50);\n        fadeIn.setRepeatMode(Animation.REVERSE);\n\n        \/\/default repeat count is 0, however if user wants, set it up to be infinite\n        fadeIn.setRepeatCount(0);\n        if (forever) {\n            fadeIn.setRepeatCount(Animation.INFINITE);\n        }\n\n        fadeIn.setStartOffset(speed.getFlashDuration());\n        startAnimation(fadeIn);\n    }\n\n    \/**\n     * Starts a rotating animation on the AwesomeTextView\n     *\n     * @param clockwise true for clockwise, false for anti clockwise spinning\n     * @param speed     how fast the item should rotate\n     *\/\n    public void startRotate(boolean clockwise, AnimationSpeed speed) {\n        Animation rotate;\n\n        \/\/set up the rotation animation\n        if (clockwise) {\n            rotate = new RotateAnimation(0, 360, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);\n        }\n        else {\n            rotate = new RotateAnimation(360, 0, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);\n        }\n\n        \/\/set up some extra variables\n        rotate.setRepeatCount(Animation.INFINITE);\n        rotate.setInterpolator(new LinearInterpolator());\n        rotate.setStartOffset(0);\n        rotate.setRepeatMode(Animation.RESTART);\n        rotate.setDuration(speed.getRotateDuration());\n        startAnimation(rotate);\n    }\n\n    \/**\n     * Sets the text to display a FontIcon, replacing whatever text is already present.\n     * Used to set the text to display a FontAwesome Icon.\n     *\n     * @param iconSet - An implementation of FontIcon\n     *\/\n    public void setIcon(CharSequence iconCode, IconSet iconSet) {\n        setBootstrapText(new BootstrapText.Builder(getContext(), isInEditMode()).addIcon(iconCode, iconSet).build());\n    }\n\n    \/**\n     * Sets the text to display a FontIcon, replacing whatever text is already present.\n     * Used to set the text to display a FontAwesome Icon.\n     *\n     * @param iconCode the fontawesome icon code e.g. \"fa_play\"\n     *\/\n    public void setFontAwesomeIcon(@FontAwesome.Icon CharSequence iconCode) {\n        setBootstrapText(new BootstrapText.Builder(getContext(), isInEditMode()).addFontAwesomeIcon(iconCode).build());\n    }\n\n    \/**\n     * Sets the text to display a MaterialIcon, replacing whatever text is already present.\n     * Used to set the text to display a MaterialIcon Icon.\n     *\n     * @param iconCode the fontawesome icon code e.g. \"md_share\"\n     *\/\n    public void setMaterialIcon(@FontAwesome.Icon CharSequence iconCode) {\n        setBootstrapText(new BootstrapText.Builder(getContext(), isInEditMode()).addMaterialIcon(iconCode).build());\n    }\n\n    \/**\n     * Sets the text to display a FontIcon, replacing whatever text is already present.\n     * Used to set the text to display a Typicon.\n     *\n     * @param iconCode the typicon icon code e.g. \"ty_adjust_brightness\"\n     *\/\n    public void setTypicon(@Typicon.Icon CharSequence iconCode) {\n        setBootstrapText(new BootstrapText.Builder(getContext(), isInEditMode()).addTypicon(iconCode).build());\n    }\n\n    @Override public void setMarkdownText(String text) {\n        setBootstrapText(IconResolver.resolveMarkdown(getContext(), text, isInEditMode()));\n    }\n\n    protected void updateBootstrapState() {\n        if (bootstrapText != null) {\n            setText(bootstrapText);\n        }\n        if (bootstrapBrand != null) {\n            setTextColor(bootstrapBrand.defaultFill(getContext()));\n        }\n    }\n\n    \/*\n     * Getters\/Setters\n     *\/\n\n    @Override public void setBootstrapText(BootstrapText bootstrapText) {\n        this.bootstrapText = bootstrapText;\n        updateBootstrapState();\n    }\n\n    @Nullable @Override public BootstrapText getBootstrapText() {\n        return bootstrapText;\n    }\n\n    @Override public void setBootstrapBrand(@NonNull BootstrapBrand bootstrapBrand) {\n        this.bootstrapBrand = bootstrapBrand;\n        updateBootstrapState();\n    }\n\n    @NonNull @Override public BootstrapBrand getBootstrapBrand() {\n        return bootstrapBrand;\n    }\n\n    @Override public void setText(CharSequence text, BufferType type) {\n        super.setText(text, type);\n        bootstrapText = null;\n    }\n\n}\n","pos":1,"subs":[{"java.function":{"text":"public long getRotateDuration() {","pos":1979,"subs":[{"java.access_sp":{"text":"public ","pos":1979}},{"java.return_type":{"text":"long ","pos":1986}},{"java.function_name":{"text":"getRotateDuration","pos":1991}},{"java.parameters":{"text":"() ","pos":2008,"subs":[{"java.single_param":{"text":"","pos":2009}}]}}]}},{"java.function":{"text":"public long getFlashDuration() {","pos":2067,"subs":[{"java.access_sp":{"text":"public ","pos":2067}},{"java.return_type":{"text":"long ","pos":2074}},{"java.function_name":{"text":"getFlashDuration","pos":2079}},{"java.parameters":{"text":"() ","pos":2095,"subs":[{"java.single_param":{"text":"","pos":2096}}]}}]}},{"java.function":{"text":"private void initialise(AttributeSet attrs) {","pos":2544,"subs":[{"java.access_sp":{"text":"private ","pos":2544}},{"java.return_type":{"text":"void ","pos":2552}},{"java.function_name":{"text":"initialise","pos":2557}},{"java.parameters":{"text":"(AttributeSet attrs) ","pos":2567,"subs":[{"java.single_param":{"text":"AttributeSet attrs","pos":2568}}]}}]}},{"java.function":{"text":"public Parcelable onSaveInstanceState() {","pos":4786,"subs":[{"java.access_sp":{"text":"public ","pos":4786}},{"java.return_type":{"text":"Parcelable ","pos":4793}},{"java.function_name":{"text":"onSaveInstanceState","pos":4804}},{"java.parameters":{"text":"() ","pos":4823,"subs":[{"java.single_param":{"text":"","pos":4824}}]}}]}},{"java.function":{"text":"public void onRestoreInstanceState(Parcelable state) {","pos":5112,"subs":[{"java.access_sp":{"text":"public ","pos":5112}},{"java.return_type":{"text":"void ","pos":5119}},{"java.function_name":{"text":"onRestoreInstanceState","pos":5124}},{"java.parameters":{"text":"(Parcelable state) ","pos":5146,"subs":[{"java.single_param":{"text":"Parcelable state","pos":5147}}]}}]}},{"java.function":{"text":"public void startFlashing(boolean forever, AnimationSpeed speed) {","pos":6002,"subs":[{"java.access_sp":{"text":"public ","pos":6002}},{"java.return_type":{"text":"void ","pos":6009}},{"java.function_name":{"text":"startFlashing","pos":6014}},{"java.parameters":{"text":"(boolean forever, AnimationSpeed speed) ","pos":6027,"subs":[{"java.single_param":{"text":"boolean forever","pos":6028}},{"java.single_param":{"text":" AnimationSpeed speed","pos":6044}}]}}]}},{"java.function":{"text":"public void startRotate(boolean clockwise, AnimationSpeed speed) {","pos":6761,"subs":[{"java.access_sp":{"text":"public ","pos":6761}},{"java.return_type":{"text":"void ","pos":6768}},{"java.function_name":{"text":"startRotate","pos":6773}},{"java.parameters":{"text":"(boolean clockwise, AnimationSpeed speed) ","pos":6784,"subs":[{"java.single_param":{"text":"boolean clockwise","pos":6785}},{"java.single_param":{"text":" AnimationSpeed speed","pos":6803}}]}}]}},{"java.function":{"text":" animation\n        if (clockwise) {","pos":6884,"subs":[{"java.return_type":{"text":"animation\n","pos":6885}},{"java.function_name":{"text":"if","pos":6903}},{"java.parameters":{"text":"(clockwise) ","pos":6906,"subs":[{"java.single_param":{"text":"clockwise","pos":6907}}]}}]}},{"java.function":{"text":"public void setIcon(CharSequence iconCode, IconSet iconSet) {","pos":7744,"subs":[{"java.access_sp":{"text":"public ","pos":7744}},{"java.return_type":{"text":"void ","pos":7751}},{"java.function_name":{"text":"setIcon","pos":7756}},{"java.parameters":{"text":"(CharSequence iconCode, IconSet iconSet) ","pos":7763,"subs":[{"java.single_param":{"text":"CharSequence iconCode","pos":7764}},{"java.single_param":{"text":" IconSet iconSet","pos":7786}}]}}]}},{"java.function":{"text":"public void setFontAwesomeIcon(@FontAwesome.Icon CharSequence iconCode) {","pos":8169,"subs":[{"java.access_sp":{"text":"public ","pos":8169}},{"java.return_type":{"text":"void ","pos":8176}},{"java.function_name":{"text":"setFontAwesomeIcon","pos":8181}},{"java.parameters":{"text":"(@FontAwesome.Icon CharSequence iconCode) ","pos":8199,"subs":[{"java.single_param":{"text":"@FontAwesome.Icon CharSequence iconCode","pos":8200}}]}}]}},{"java.function":{"text":"public void setMaterialIcon(@FontAwesome.Icon CharSequence iconCode) {","pos":8614,"subs":[{"java.access_sp":{"text":"public ","pos":8614}},{"java.return_type":{"text":"void ","pos":8621}},{"java.function_name":{"text":"setMaterialIcon","pos":8626}},{"java.parameters":{"text":"(@FontAwesome.Icon CharSequence iconCode) ","pos":8641,"subs":[{"java.single_param":{"text":"@FontAwesome.Icon CharSequence iconCode","pos":8642}}]}}]}},{"java.function":{"text":"public void setTypicon(@Typicon.Icon CharSequence iconCode) {","pos":9047,"subs":[{"java.access_sp":{"text":"public ","pos":9047}},{"java.return_type":{"text":"void ","pos":9054}},{"java.function_name":{"text":"setTypicon","pos":9059}},{"java.parameters":{"text":"(@Typicon.Icon CharSequence iconCode) ","pos":9069,"subs":[{"java.single_param":{"text":"@Typicon.Icon CharSequence iconCode","pos":9070}}]}}]}},{"java.function":{"text":"public void setMarkdownText(String text) {","pos":9242,"subs":[{"java.access_sp":{"text":"public ","pos":9242}},{"java.return_type":{"text":"void ","pos":9249}},{"java.function_name":{"text":"setMarkdownText","pos":9254}},{"java.parameters":{"text":"(String text) ","pos":9269,"subs":[{"java.single_param":{"text":"String text","pos":9270}}]}}]}},{"java.function":{"text":"protected void updateBootstrapState() {","pos":9388,"subs":[{"java.access_sp":{"text":"protected ","pos":9388}},{"java.return_type":{"text":"void ","pos":9398}},{"java.function_name":{"text":"updateBootstrapState","pos":9403}},{"java.parameters":{"text":"() ","pos":9423,"subs":[{"java.single_param":{"text":"","pos":9424}}]}}]}},{"java.function":{"text":"public void setBootstrapText(BootstrapText bootstrapText) {","pos":9687,"subs":[{"java.access_sp":{"text":"public ","pos":9687}},{"java.return_type":{"text":"void ","pos":9694}},{"java.function_name":{"text":"setBootstrapText","pos":9699}},{"java.parameters":{"text":"(BootstrapText bootstrapText) ","pos":9715,"subs":[{"java.single_param":{"text":"BootstrapText bootstrapText","pos":9716}}]}}]}},{"java.function":{"text":"public BootstrapText getBootstrapText() {","pos":9854,"subs":[{"java.access_sp":{"text":"public ","pos":9854}},{"java.return_type":{"text":"BootstrapText ","pos":9861}},{"java.function_name":{"text":"getBootstrapText","pos":9875}},{"java.parameters":{"text":"() ","pos":9891,"subs":[{"java.single_param":{"text":"","pos":9892}}]}}]}},{"java.function":{"text":"public void setBootstrapBrand(@NonNull BootstrapBrand bootstrapBrand) {","pos":9947,"subs":[{"java.access_sp":{"text":"public ","pos":9947}},{"java.return_type":{"text":"void ","pos":9954}},{"java.function_name":{"text":"setBootstrapBrand","pos":9959}},{"java.parameters":{"text":"(@NonNull BootstrapBrand bootstrapBrand) ","pos":9976,"subs":[{"java.single_param":{"text":"@NonNull BootstrapBrand bootstrapBrand","pos":9977}}]}}]}},{"java.function":{"text":"public BootstrapBrand getBootstrapBrand() {","pos":10127,"subs":[{"java.access_sp":{"text":"public ","pos":10127}},{"java.return_type":{"text":"BootstrapBrand ","pos":10134}},{"java.function_name":{"text":"getBootstrapBrand","pos":10149}},{"java.parameters":{"text":"() ","pos":10166,"subs":[{"java.single_param":{"text":"","pos":10167}}]}}]}},{"java.function":{"text":"public void setText(CharSequence text, BufferType type) {","pos":10223,"subs":[{"java.access_sp":{"text":"public ","pos":10223}},{"java.return_type":{"text":"void ","pos":10230}},{"java.function_name":{"text":"setText","pos":10235}},{"java.parameters":{"text":"(CharSequence text, BufferType type) ","pos":10242,"subs":[{"java.single_param":{"text":"CharSequence text","pos":10243}},{"java.single_param":{"text":" BufferType type","pos":10261}}]}}]}}]}}
