{"js.line_comments":{"pos":1,"subs":[{"js.line_comment":{"pos":1,"subs":[{"js.line_comment_context":{"pos":1,"text":"\/*:"}},{"js.line_comment_body":{"pos":4,"subs":[{"js.line_comment_text":{"pos":6,"text":"github.com\/gre\/bezier-easing"}}],"text":"\/\/github.com\/gre\/bezier-easing"}}],"text":"\/*:\/\/github.com\/gre\/bezier-easing"}},{"js.line_comment":{"pos":154,"subs":[{"js.line_comment_context":{"pos":154,"text":""}},{"js.line_comment_body":{"pos":154,"subs":[{"js.line_comment_text":{"pos":156,"text":" These values are established by empiricism with tests (tradeoff: performance VS precision)"}}],"text":"\/\/ These values are established by empiricism with tests (tradeoff: performance VS precision)"}}],"text":"\/\/ These values are established by empiricism with tests (tradeoff: performance VS precision)"}},{"js.line_comment":{"pos":692,"subs":[{"js.line_comment_context":{"pos":692,"text":""}},{"js.line_comment_body":{"pos":692,"subs":[{"js.line_comment_text":{"pos":694,"text":" Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2."}}],"text":"\/\/ Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2."}}],"text":"\/\/ Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2."}},{"js.line_comment":{"pos":860,"subs":[{"js.line_comment_context":{"pos":860,"text":""}},{"js.line_comment_body":{"pos":860,"subs":[{"js.line_comment_text":{"pos":862,"text":" Returns dx\/dt given t, x1, and x2, or dy\/dt given t, y1, and y2."}}],"text":"\/\/ Returns dx\/dt given t, x1, and x2, or dy\/dt given t, y1, and y2."}}],"text":"\/\/ Returns dx\/dt given t, x1, and x2, or dy\/dt given t, y1, and y2."}},{"js.line_comment":{"pos":1601,"subs":[{"js.line_comment_context":{"pos":1601,"text":"     return aGuessT;    "}},{"js.line_comment_body":{"pos":1625,"subs":[{"js.line_comment_text":{"pos":1627,"text":" This is an inline comment that we need to catch."}}],"text":"\/\/ This is an inline comment that we need to catch."}}],"text":"     return aGuessT;    \/\/ This is an inline comment that we need to catch."}},{"js.line_comment":{"pos":1980,"subs":[{"js.line_comment_context":{"pos":1980,"text":"  "}},{"js.line_comment_body":{"pos":1982,"subs":[{"js.line_comment_text":{"pos":1984,"text":" Precompute samples table"}}],"text":"\/\/ Precompute samples table"}}],"text":"  \/\/ Precompute samples table"}},{"js.line_comment":{"pos":2283,"subs":[{"js.line_comment_context":{"pos":2283,"text":""}},{"js.line_comment_body":{"pos":2283,"subs":[{"js.line_comment_text":{"pos":2285,"text":"This is an inline comment."}}],"text":"\/\/This is an inline comment."}}],"text":"\/\/This is an inline comment."}},{"js.line_comment":{"pos":2368,"subs":[{"js.line_comment_context":{"pos":2368,"text":"    var currentSample = 1; "}},{"js.line_comment_body":{"pos":2395,"subs":[{"js.line_comment_text":{"pos":2397,"text":"This is a tests inline"}}],"text":"\/\/This is a tests inline"}}],"text":"    var currentSample = 1; \/\/This is a tests inline"}},{"js.line_comment":{"pos":2629,"subs":[{"js.line_comment_context":{"pos":2629,"text":"    "}},{"js.line_comment_body":{"pos":2633,"subs":[{"js.line_comment_text":{"pos":2635,"text":" Interpolate to provide an initial guess for t"}}],"text":"\/\/ Interpolate to provide an initial guess for t"}}],"text":"    \/\/ Interpolate to provide an initial guess for t"}},{"js.line_comment":{"pos":3272,"subs":[{"js.line_comment_context":{"pos":3272,"text":"      return x; "}},{"js.line_comment_body":{"pos":3288,"subs":[{"js.line_comment_text":{"pos":3290,"text":" linear"}}],"text":"\/\/ linear"}}],"text":"      return x; \/\/ linear"}},{"js.line_comment":{"pos":3304,"subs":[{"js.line_comment_context":{"pos":3304,"text":"    "}},{"js.line_comment_body":{"pos":3308,"subs":[{"js.line_comment_text":{"pos":3310,"text":" Because JavaScript number are imprecise, we should guarantee the extremes are right."}}],"text":"\/\/ Because JavaScript number are imprecise, we should guarantee the extremes are right."}}],"text":"    \/\/ Because JavaScript number are imprecise, we should guarantee the extremes are right."}}],"text":"\/*:\/\/github.com\/gre\/bezier-easing\n * BezierEasing - use bezier curve for transition easing function\n * by Gatan Renaudeau 2014 - 2015 - MIT License\n *\/\n\n\/\/ These values are established by empiricism with tests (tradeoff: performance VS precision)\nvar NEWTON_ITERATIONS = 4;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\n\nvar kSplineTableSize = 11;\nvar kSampleStepSize = 1.0 \/ (kSplineTableSize - 1.0);\n\nvar float32ArraySupported = typeof Float32Array === 'function';\n\nfunction A (aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }\nfunction B (aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }\nfunction C (aA1)      { return 3.0 * aA1; }\n\n\/\/ Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nfunction calcBezier (aT, aA1, aA2) { return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT; }\n\n\/\/ Returns dx\/dt given t, x1, and x2, or dy\/dt given t, y1, and y2.\nfunction getSlope (aT, aA1, aA2) { return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1); }\n\nfunction binarySubdivide (aX, aA, aB, mX1, mX2) {\n  var currentX, currentT, i = 0;\n  do {\n    currentT = aA + (aB - aA) \/ 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n  return currentT;\n}\n\nfunction newtonRaphsonIterate (aX, aGuessT, mX1, mX2) {\n for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n   var currentSlope = getSlope(aGuessT, mX1, mX2);\n   if (currentSlope === 0.0) {\n     return aGuessT;    \/\/ This is an inline comment that we need to catch.\n   }\n   var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n   aGuessT -= currentX \/ currentSlope;\n }\n return aGuessT;\n}\n\nmodule.exports = function bezier (mX1, mY1, mX2, mY2) {\n  if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {\n    throw new Error('bezier x values must be in [0, 1] range');\n  }\n\n  \/\/ Precompute samples table\n  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n  if (mX1 !== mY1 || mX2 !== mY2) {\n    for (var i = 0; i < kSplineTableSize; ++i) {\n      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n    }\n  }\n\/\/This is an inline comment.\n  function getTForX (aX) {\n    var intervalStart = 0.0;\n    var currentSample = 1; \/\/This is a tests inline\n    var lastSample = kSplineTableSize - 1;\n\n    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n      intervalStart += kSampleStepSize;\n    }\n    --currentSample;\n\n    \/\/ Interpolate to provide an initial guess for t\n    var dist = (aX - sampleValues[currentSample]) \/ (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    var guessForT = intervalStart + dist * kSampleStepSize;\n\n    var initialSlope = getSlope(guessForT, mX1, mX2);\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n    }\n  }\n\n  return function BezierEasing (x) {\n    if (mX1 === mY1 && mX2 === mY2) {\n      return x; \/\/ linear\n    }\n    \/\/ Because JavaScript number are imprecise, we should guarantee the extremes are right.\n    if (x === 0) {\n      return 0;\n    }\n    if (x === 1) {\n      return 1;\n    }\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n};\n\n"}}
