{"js.functions":{"pos":1,"subs":[{"js.function":{"pos":528,"subs":[{"js.function_name":{"pos":538,"text":"A "}},{"js.parameters":{"pos":540,"subs":[{"js.single_param":{"pos":541,"text":"aA1"}},{"js.single_param":{"pos":546,"text":"aA2"}}],"text":"(aA1, aA2)"}}],"text":"\nfunction A (aA1, aA2)"}},{"js.function":{"pos":590,"subs":[{"js.function_name":{"pos":600,"text":"B "}},{"js.parameters":{"pos":602,"subs":[{"js.single_param":{"pos":603,"text":"aA1"}},{"js.single_param":{"pos":608,"text":"aA2"}}],"text":"(aA1, aA2)"}}],"text":"\nfunction B (aA1, aA2)"}},{"js.function":{"pos":646,"subs":[{"js.function_name":{"pos":656,"text":"C "}},{"js.parameters":{"pos":658,"subs":[{"js.single_param":{"pos":659,"text":"aA1"}}],"text":"(aA1)"}}],"text":"\nfunction C (aA1)"}},{"js.function":{"pos":757,"subs":[{"js.function_name":{"pos":767,"text":"calcBezier "}},{"js.parameters":{"pos":778,"subs":[{"js.single_param":{"pos":779,"text":"aT"}},{"js.single_param":{"pos":783,"text":"aA1"}},{"js.single_param":{"pos":788,"text":"aA2"}}],"text":"(aT, aA1, aA2)"}}],"text":"\nfunction calcBezier (aT, aA1, aA2)"}},{"js.function":{"pos":927,"subs":[{"js.function_name":{"pos":937,"text":"getSlope "}},{"js.parameters":{"pos":946,"subs":[{"js.single_param":{"pos":947,"text":"aT"}},{"js.single_param":{"pos":951,"text":"aA1"}},{"js.single_param":{"pos":956,"text":"aA2"}}],"text":"(aT, aA1, aA2)"}}],"text":"\nfunction getSlope (aT, aA1, aA2)"}},{"js.function":{"pos":1035,"subs":[{"js.function_name":{"pos":1045,"text":"binarySubdivide "}},{"js.parameters":{"pos":1061,"subs":[{"js.single_param":{"pos":1062,"text":"aX"}},{"js.single_param":{"pos":1066,"text":"aA"}},{"js.single_param":{"pos":1070,"text":"aB"}},{"js.single_param":{"pos":1074,"text":"mX1"}},{"js.single_param":{"pos":1079,"text":"mX2"}}],"text":"(aX, aA, aB, mX1, mX2)"}}],"text":"\nfunction binarySubdivide (aX, aA, aB, mX1, mX2)"}},{"js.function":{"pos":1415,"subs":[{"js.function_name":{"pos":1425,"text":"newtonRaphsonIterate "}},{"js.parameters":{"pos":1446,"subs":[{"js.single_param":{"pos":1447,"text":"aX"}},{"js.single_param":{"pos":1451,"text":"aGuessT"}},{"js.single_param":{"pos":1460,"text":"mX1"}},{"js.single_param":{"pos":1465,"text":"mX2"}}],"text":"(aX, aGuessT, mX1, mX2)"}}],"text":"\nfunction newtonRaphsonIterate (aX, aGuessT, mX1, mX2)"}},{"js.function":{"pos":1815,"subs":[{"js.function_name":{"pos":1824,"text":"bezier "}},{"js.parameters":{"pos":1831,"subs":[{"js.single_param":{"pos":1832,"text":"mX1"}},{"js.single_param":{"pos":1837,"text":"mY1"}},{"js.single_param":{"pos":1842,"text":"mX2"}},{"js.single_param":{"pos":1847,"text":"mY2"}}],"text":"(mX1, mY1, mX2, mY2)"}}],"text":"function bezier (mX1, mY1, mX2, mY2)"}},{"js.function":{"pos":2314,"subs":[{"js.function_name":{"pos":2323,"text":"getTForX "}},{"js.parameters":{"pos":2332,"subs":[{"js.single_param":{"pos":2333,"text":"aX"}}],"text":"(aX)"}}],"text":"function getTForX (aX)"}},{"js.function":{"pos":3199,"subs":[{"js.function_name":{"pos":3215,"text":"BezierEasing "}},{"js.parameters":{"pos":3228,"subs":[{"js.single_param":{"pos":3229,"text":"x"}}],"text":"(x)"}}],"text":"return function BezierEasing (x)"}}],"text":"\/*:\/\/github.com\/gre\/bezier-easing\n * BezierEasing - use bezier curve for transition easing function\n * by Gatan Renaudeau 2014 - 2015 - MIT License\n *\/\n\n\/\/ These values are established by empiricism with tests (tradeoff: performance VS precision)\nvar NEWTON_ITERATIONS = 4;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\n\nvar kSplineTableSize = 11;\nvar kSampleStepSize = 1.0 \/ (kSplineTableSize - 1.0);\n\nvar float32ArraySupported = typeof Float32Array === 'function';\n\nfunction A (aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }\nfunction B (aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }\nfunction C (aA1)      { return 3.0 * aA1; }\n\n\/\/ Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nfunction calcBezier (aT, aA1, aA2) { return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT; }\n\n\/\/ Returns dx\/dt given t, x1, and x2, or dy\/dt given t, y1, and y2.\nfunction getSlope (aT, aA1, aA2) { return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1); }\n\nfunction binarySubdivide (aX, aA, aB, mX1, mX2) {\n  var currentX, currentT, i = 0;\n  do {\n    currentT = aA + (aB - aA) \/ 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n  return currentT;\n}\n\nfunction newtonRaphsonIterate (aX, aGuessT, mX1, mX2) {\n for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n   var currentSlope = getSlope(aGuessT, mX1, mX2);\n   if (currentSlope === 0.0) {\n     return aGuessT;    \/\/ This is an inline comment that we need to catch.\n   }\n   var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n   aGuessT -= currentX \/ currentSlope;\n }\n return aGuessT;\n}\n\nmodule.exports = function bezier (mX1, mY1, mX2, mY2) {\n  if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {\n    throw new Error('bezier x values must be in [0, 1] range');\n  }\n\n  \/\/ Precompute samples table\n  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n  if (mX1 !== mY1 || mX2 !== mY2) {\n    for (var i = 0; i < kSplineTableSize; ++i) {\n      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n    }\n  }\n\/\/This is an inline comment.\n  function getTForX (aX) {\n    var intervalStart = 0.0;\n    var currentSample = 1; \/\/This is a tests inline\n    var lastSample = kSplineTableSize - 1;\n\n    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n      intervalStart += kSampleStepSize;\n    }\n    --currentSample;\n\n    \/\/ Interpolate to provide an initial guess for t\n    var dist = (aX - sampleValues[currentSample]) \/ (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    var guessForT = intervalStart + dist * kSampleStepSize;\n\n    var initialSlope = getSlope(guessForT, mX1, mX2);\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n    }\n  }\n\n  return function BezierEasing (x) {\n    if (mX1 === mY1 && mX2 === mY2) {\n      return x; \/\/ linear\n    }\n    \/\/ Because JavaScript number are imprecise, we should guarantee the extremes are right.\n    if (x === 0) {\n      return 0;\n    }\n    if (x === 1) {\n      return 1;\n    }\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n};\n\n"}}
