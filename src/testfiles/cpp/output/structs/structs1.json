{"cpp.structs":{"pos":1,"text":"Skip to content\nThis repository\nSearch\nPull requests\nIssues\nGist\n @jorconnor\n Sign out\n Watch 7\n  Star 16\n Fork 13 sandyre\/libopencad\n Code  Issues 3  Pull requests 1  Projects 0  Wiki  Pulse  Graphs\nBranch: master Find file Copy pathlibopencad\/lib\/cadgeometry.h\n160485d  on Jan 19\n@jamierobertson1 jamierobertson1 Added Polyline2D geometry, additional Polyline functions\n3 contributors @sandyre @BishopGIS @jamierobertson1\nRawBlameHistory     \n740 lines (606 sloc)  17.8 KB\n\/*******************************************************************************\n *  Project: libopencad\n *  Purpose: OpenSource CAD formats support library\n *  Author: Alexandr Borzykh, mush3d at gmail.com\n *  Author: Dmitry Baryshnikov, bishop.dev@gmail.com\n *  Language: C++\n *******************************************************************************\n *  The MIT License (MIT)\n *\n *  Copyright (c) 2016 Alexandr Borzykh\n *  Copyright (c) 2016 NextGIS, <info@nextgis.com>\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"Software\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in all\n *  copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n *  SOFTWARE.\n *******************************************************************************\/\n#ifndef CADGEOMETRIES_H\n#define CADGEOMETRIES_H\n\n#include \"cadobjects.h\"\n#include \"cadcolors.h\"\n\n#include <array>\n\nusing namespace std;\n\nclass CADAttdef;\n\nclass CADAttrib;\n\n\/**\n * @brief The Matrix class\n *\/\nclass Matrix\n{\npublic:\n              Matrix();\n    void      translate( const CADVector& vector );\n    void      rotate( double rotation );\n    void      scale( const CADVector& vector );\n    CADVector multiply( const CADVector& vector ) const;\nprotected:\n    array<double, 9> matrix;\n};\n\n\/**\n * @brief Base CAD geometry class\n *\/\nclass CADGeometry\n{\npublic:\n    CADGeometry();\n    virtual ~CADGeometry();\n    \/**\n     * @brief The CAD geometry types enum\n     *\/\n    enum GeometryType\n    {\n        UNDEFINED = 0,\n        POINT,\n        CIRCLE,\n        LWPOLYLINE,\n        ELLIPSE,\n        LINE,\n\t\tPOLYLINE2D,\n        POLYLINE3D,\n        TEXT,\n        ARC,\n        SPLINE,\n        SOLID,\n        RAY,\n        HATCH, \/\/ NOT IMPLEMENTED\n        IMAGE,\n        MTEXT,\n        MLINE,\n        XLINE,\n        FACE3D,\n        POLYLINE_PFACE,\n        ATTRIB,\n        ATTDEF\n    };\n\n    enum GeometryType getType() const;\n    double            getThickness() const;\n    void              setThickness( double thicknes );\n    RGBColor          getColor() const;\n    void              setColor( RGBColor color );\/\/ TODO: in 2004+ ACI is not the only way to set the color.\n\n    vector<CADAttrib> getBlockAttributes() const;\n    void              setBlockAttributes( const vector<CADAttrib>& value );\n\n    vector<string> getEED() const;\n    void           setEED( vector<string> eed );\n\n    virtual void print() const                     = 0;\n    virtual void transform( const Matrix& matrix ) = 0;\nprotected:\n    vector<CADAttrib> blockAttributes; \/\/ attributes of block reference this geometry is attached to.\n\n    vector<string>    asEED;\n    enum GeometryType geometryType;\n    double            thickness;\n    RGBColor          geometry_color;\n};\n\n\/**\n * @brief Geometry class which represents Unhandled geometry (means that library cant read it yet)\n *\/\nclass CADUnknown : public CADGeometry\n{\npublic:\n    CADUnknown();\n\n    virtual void print() const override;\n    void         transform( const Matrix& matrix ) override;\n};\n\n\/**\n * @brief Geometry class which a single Point\n *\/\nclass CADPoint3D : public CADGeometry\n{\npublic:\n              CADPoint3D();\n              CADPoint3D( const CADVector& positionIn, double thicknessIn );\n    CADVector getPosition() const;\n    void      setPosition( const CADVector& value );\n\n    CADVector getExtrusion() const;\n    void      setExtrusion( const CADVector& value );\n\n    double getXAxisAng() const;\n    void   setXAxisAng( double value );\n\n    virtual void print() const override;\n    virtual void transform( const Matrix& matrix ) override;\nprotected:\n    CADVector position;\n    CADVector extrusion;\n    double    xAxisAng;\n};\n\n\/**\n * @brief Geometry class which represents a simple Line\n *\/\nclass CADLine : public CADGeometry\n{\npublic:\n    CADLine();\n    CADLine( const CADPoint3D& startIn, const CADPoint3D& endIn );\n\n    CADPoint3D getStart() const;\n    void       setStart( const CADPoint3D& value );\n\n    CADPoint3D getEnd() const;\n    void       setEnd( const CADPoint3D& value );\n\n    virtual void print() const override;\n    virtual void transform( const Matrix& matrix ) override;\nprotected:\n    CADPoint3D start;\n    CADPoint3D end;\n};\n\n\/**\n* @brief Geometry class which represents Polyline 2D\n*\/\nclass CADPolyline2D : public CADGeometry\n{\npublic:\n\tCADPolyline2D();\n\n\tvoid\t   addVertex(const CADVector& vertex);\n\tsize_t\t   getVertexCount() const;\n\tCADVector& getVertex(size_t index);\n\n\tbool isClosed() const;\n\tvoid setClosed(bool state);\n\n\tbool isSplined() const; \/\/ if splined there will be extra 2 vertexes at end defining end vector, if closed two at start also\n\tvoid setSplined( bool state );\n\n\tdouble getStartSegWidth() const;\n\tvoid   setStartSegWidth( double value );\n\n\tdouble getEndSegWidth() const;\n\tvoid   setEndSegWidth( double value );\n\n\tdouble getElevation() const;\n\tvoid   setElevation( double value );\n\n\tCADVector getVectExtrusion() const;\n\tvoid      setVectExtrusion( const CADVector& value );\n\n\tvector<pair<double, double> > getWidths() const;\n\tvoid                          setWidths(const vector<pair<double, double> >& value);\n\n\tbool\t\t   hasBulges() const; \/\/ true if any vertexes have non zero bulges\n\tvector<double> getBulges() const;\n\tvoid           setBulges(const vector<double>& value);\n\n\tvirtual void print() const override;\n\tvirtual void transform( const Matrix& matrix ) override;\n\nprotected:\n\tbool\t\t\t\t\t\t  bClosed;\n\tbool\t\t\t\t\t\t  bSplined;\n\tdouble\t\t\t\t\t\t  dfStartWidth;\n\tdouble\t\t\t\t\t\t  dfEndWidth;\n\tdouble\t\t\t\t\t\t  elevation;\n\tCADVector\t\t\t\t\t  vectExtrusion;\n\tbool\t\t\t\t\t\t  hasNonZeroBulges;\n\tvector<double>\t\t\t\t  bulges;\n\tvector<pair<double, double> > widths; \/\/ start, end.\n\tvector<CADVector>\t          vertexes;\n};\n\n\n\/**\n * @brief Geometry class which represents Polyline 3D\n *\/\nclass CADPolyline3D : public CADGeometry\n{\npublic:\n    CADPolyline3D();\n\n    void       addVertex( const CADVector& vertex );\n    size_t\t   getVertexCount() const;\n    CADVector& getVertex( size_t index );\n\n\tbool isClosed() const;\n\tvoid setClosed( bool state );\n\n\tbool isSplined() const; \/\/ if splined there will be extra 2 vertexes at end defining end direction, if closed two at start also\n\tvoid setSplined( bool state );\n\n    virtual void print() const override;\n    virtual void transform( const Matrix& matrix ) override;\n\nprotected:\n\tbool\t\t\t  bClosed;\n\tbool\t\t\t  bSplined;\n    vector<CADVector> vertexes;\n};\n\n\/**\n * @brief Geometry class which represents LWPolyline\n *\/\n\nclass CADLWPolyline : public CADGeometry\n{\npublic:\n    CADLWPolyline();\n\n\tvoid       addVertex(const CADVector& vertex);\n\tsize_t\t   getVertexCount() const;\n\tCADVector& getVertex(size_t index);\n\n\tbool isClosed() const;\n\tvoid setClosed(bool state);\n\n    double getConstWidth() const;\n    void   setConstWidth( double value );\n\n    double getElevation() const;\n    void   setElevation( double value );\n\n    CADVector getVectExtrusion() const;\n    void      setVectExtrusion( const CADVector& value );\n\n    vector<pair<double, double> > getWidths() const;\n    void                          setWidths( const vector<pair<double, double> >& value );\n\n\tbool\t\t   hasBulges() const; \/\/ true if any vertexes have non zero bulges\n    vector<double> getBulges() const;\n    void           setBulges( const vector<double>& value );\n\n    virtual void print() const override;\n\tvirtual void transform(const Matrix& matrix) override;\n\nprotected:\n\tbool\t\t\t\t\t\t  bClosed;\n    double                        constWidth;\n    double                        elevation;\n    CADVector                     vectExtrusion;\n\tbool\t\t\t\t\t\t  hasNonZeroBulges;\n    vector<double>                bulges;\n    vector<pair<double, double> > widths; \/\/ start, end.\n\tvector<CADVector>\t\t      vertexes;\n};\n\n\/**\n * @brief Geometry class which represents Circle\n *\/\nclass CADCircle : public CADPoint3D\n{\npublic:\n    CADCircle();\n\n    double getRadius() const;\n    void   setRadius( double value );\n\n    virtual void print() const override;\nprotected:\n    double radius;\n};\n\n\/**\n * @brief Geometry class which represents Text\n *\/\nclass CADText : public CADPoint3D\n{\npublic:\n    CADText();\n\n    string getTextValue() const;\n    void   setTextValue( const string& value );\n\n    double getHeight() const;\n    void   setHeight( double value );\n\n    double getRotationAngle() const;\n    void   setRotationAngle( double value );\n\n    double getObliqueAngle() const;\n    void   setObliqueAngle( double value );\n\n    virtual void print() const override;\nprotected:\n    double obliqueAngle;\n    double rotationAngle;\n    double height;\n    string textValue;\n};\n\n\/**\n * @brief Geometry class which represents Arc\n *\/\nclass CADArc : public CADCircle\n{\npublic:\n    CADArc();\n\n    double getStartingAngle() const;\n    void   setStartingAngle( double value );\n\n    double getEndingAngle() const;\n    void   setEndingAngle( double value );\n\n    virtual void print() const override;\nprotected:\n    double startingAngle;\n    double endingAngle;\n};\n\n\/**\n * @brief Geometry class which represents Ellipse\n *\/\nclass CADEllipse : public CADArc\n{\npublic:\n    CADEllipse();\n\n    double getAxisRatio() const;\n    void   setAxisRatio( double value );\n\n    CADVector getSMAxis();\n    void      setSMAxis( const CADVector& vectSMA );\n\n    virtual void print() const override;\nprotected:\n    CADVector vectSMAxis;\n    double    axisRatio;\n};\n\n\/**\n * @brief Geometry class which represents Spline\n *\/\nclass CADSpline : public CADGeometry\n{\npublic:\n    CADSpline();\n\n    long getScenario() const;\n    void setScenario( long value );\n\n    bool isRational() const;\n    void setRational( bool value );\n\n    bool isClosed() const;\n    void setClosed( bool value );\n\n    vector<CADVector>& getControlPoints();\n    vector<CADVector>& getFitPoints();\n    vector<double>   & getControlPointsWeights();\n\n    void addControlPointsWeight( double p_weight );\n    void addControlPoint( const CADVector& point );\n    void addFitPoint( const CADVector& point );\n\n    bool getWeight() const;\n    void setWeight( bool value );\n\n    double getFitTollerance() const;\n    void   setFitTollerance( double value );\n\n    long getDegree() const;\n    void setDegree( long value );\n\n    virtual void print() const override;\n    virtual void transform( const Matrix& matrix ) override;\nprotected:\n    long   scenario;\n    bool   rational;\n    bool   closed;\n    bool   weight;\n    double fitTollerance;\n    long   degree;\n\n    vector<double>    ctrlPointsWeight;\n    vector<CADVector> avertCtrlPoints;\n    vector<CADVector> averFitPoints;\n};\n\n\/**\n * @brief Geometry class which represents Solid\n *\/\nclass CADSolid : public CADPoint3D\n{\npublic:\n    CADSolid();\n\n    double getElevation() const;\n    void   setElevation( double value );\n    void   addCorner( const CADVector& corner );\n    vector<CADVector> getCorners();\n\n    virtual void print() const override;\n    virtual void transform( const Matrix& matrix ) override;\nprotected:\n    double            elevation;\n    vector<CADVector> avertCorners;\n};\n\n\/**\n * @brief Geometry class which represents Ray\n *\/\nclass CADRay : public CADPoint3D\n{\npublic:\n    CADRay();\n\n    CADVector getVectVector() const;\n    void      setVectVector( const CADVector& value );\n\n    virtual void print() const override;\n};\n\n\/**\n * @brief Geometry class which represents Hatch\n *\/\nclass CADHatch : public CADGeometry\n{\npublic:\n    CADHatch();\n};\n\n\/**\n * @brief Geometry class which represents Image (Raster Image)\n *\/\nclass CADImage : public CADGeometry\n{\npublic:\n    \/**\n     * @brief enum which describes in which units Image resolutions is present \n     *\/\n    enum ResolutionUnit\n    {\n        NONE = 0, CENTIMETER = 2, INCH = 5\n    };\n\n    CADImage();\n\n    CADVector getVertInsertionPoint() const;\n    void      setVertInsertionPoint( const CADVector& value );\n\n    CADVector getImageSize() const;\n    void      setImageSize( const CADVector& value );\n\n    CADVector getImageSizeInPx() const;\n    void      setImageSizeInPx( const CADVector& value );\n\n    CADVector getPixelSizeInACADUnits() const;\n    void      setPixelSizeInACADUnits( const CADVector& value );\n\n    short getClippingBoundaryType() const;\n    void  setClippingBoundaryType( short value );\n\n    enum ResolutionUnit getResolutionUnits() const;\n    void                setResolutionUnits( enum ResolutionUnit value );\n\n    string getFilePath() const;\n    void   setFilePath( const string& value );\n\n    void setOptions( bool transparency, bool clip, unsigned char brightness, unsigned char contrast );\n\n    void addClippingPoint( const CADVector& pt );\n\n    virtual void print() const override;\n    virtual void transform( const Matrix& matrix ) override;\nprotected:\n    CADVector     vertInsertionPoint;\n    \/\/CADVector vectUDirection;\n    \/\/CADVector vectVDirection;\n    CADVector     imageSize;\n    \/\/bool bShow;\n    \/\/bool bShowWhenNotAlignedWithScreen;\n    \/\/bool bUseClippingBoundary;\n    bool          bTransparency;\n    bool          bClipping;\n    unsigned char dBrightness;\n    unsigned char dContrast;\n    \/\/char dFade;\n\n    CADVector           imageSizeInPx;\n    string              filePath;\n    \/\/bool bIsLoaded;\n    enum ResolutionUnit resolutionUnits;\n    \/\/unsigned char       resolutionUnit; \/\/ 0 == none, 2 == centimeters, 5 == inches;\n    CADVector           pixelSizeInACADUnits;\n\n    short             clippingBoundaryType; \/\/ 1 == rect, 2 == polygon\n    vector<CADVector> avertClippingPolygon;\n};\n\n\/**\n * @brief Geometry class which represents MText\n *\/\nclass CADMText : public CADText\n{\npublic:\n    CADMText();\n\n    double getRectWidth() const;\n    void   setRectWidth( double value );\n\n    double getExtents() const;\n    void   setExtents( double value );\n\n    double getExtentsWidth() const;\n    void   setExtentsWidth( double value );\n\n    virtual void print() const override;\nprotected:\n    double rectWidth;\n    double extents;\n    double extentsWidth;\n    \/\/ TODO: do we need this here?\n    \/\/short dDrawingDir;\n    \/\/short dLineSpacingStyle;\n    \/\/short dLineSpacingFactor;\n    \/\/long dBackgroundFlags; \/\/ R2004+\n    \/\/long dBackgroundScaleFactor;\n    \/\/short dBackgroundColor;\n    \/\/long dBackgroundTransparency;\n};\n\n\/**\n * @brief Geometry class which represents 3DFace\n *\/\nclass CADFace3D : public CADGeometry\n{\npublic:\n    CADFace3D();\n\n    void      addCorner( const CADVector& corner );\n    CADVector getCorner( size_t index );\n\n    short getInvisFlags() const;\n    void  setInvisFlags( short value );\n\n    virtual void print() const override;\n    virtual void transform( const Matrix& matrix ) override;\nprotected:\n    vector<CADVector> avertCorners;\n    short             invisFlags;\n};\n\n\/**\n * @brief Geometry class which represents Polyline (PFace)\n *\/\nclass CADPolylinePFace : public CADGeometry\n{\npublic:\n    CADPolylinePFace();\n\n    void addVertex( const CADVector& vertex );\n\n    virtual void print() const override;\n    virtual void transform( const Matrix& matrix ) override;\nprotected:\n    vector<CADVector> vertexes;\n};\n\n\/**\n * @brief Geometry class which represents XLine\n *\/\nclass CADXLine : public CADRay\n{\npublic:\n    CADXLine();\n\n    virtual void print() const override;\n};\n\n\/**\n * @brief Geometry class which represents MLine\n *\/\nclass CADMLine : public CADPoint3D\n{\npublic:\n    CADMLine();\n\n    double getScale() const;\n    void   setScale( double value );\n\n    bool isOpened() const;\n    void setOpened( bool value );\n\n    void addVertex( const CADVector& vertex );\n\n    virtual void print() const override;\n    virtual void transform( const Matrix& matrix ) override;\nprotected:\n    double            scale;\n    \/\/char dJust;\n    bool              opened; \/\/ 1 == open, 0 == close\n    \/\/ TODO: do we need more properties here?\n    vector<CADVector> avertVertexes;\n};\n\n\/**\n * @brief Geometry class which represents Attribute\n *\/\nclass CADAttrib : public CADText\n{\npublic:\n    CADAttrib();\n\n    double getElevation() const;\n    void   setElevation( double );\n\n    string getTag() const;\n    void   setTag( const string& );\n\n    CADVector getAlignmentPoint() const;\n    void      setAlignmentPoint( const CADVector& );\n\n    bool isPositionLocked() const;\n    void setPositionLocked( bool );\n\n    virtual void print() const override;\n    virtual void transform( const Matrix& matrix ) override;\nprotected:\n    CADVector vertAlignmentPoint;\n    double    dfElevation;\n    string    sTag;\n    bool      bLockPosition;\n};\n\n\/**\n * @brief Geometry class which represents Attribute definition\n *\/\nclass CADAttdef : public CADAttrib\n{\npublic:\n    CADAttdef();\n\n    string getPrompt() const;\n    void   setPrompt( const string& );\n\n    virtual void print() const override;\nprotected:\n    string sPrompt;\n};\n\n\/\/class EXTERN LineType\n\/\/{\n\/\/public:\n\/\/    string sEntryName;\n\/\/    string sDescription;\n\/\/    double dfPatternLen;\n\/\/    char dAlignment;\n\/\/    char nNumDashes;\n\/\/    struct Dash\n\/\/    {\n\/\/        double dfLength;\n\/\/        short dComplexShapecode;\n\/\/        double dfXOffset;\n\/\/        double dfYOffset;\n\/\/        double dfScale;\n\/\/        double dfRotation;\n\/\/        short dShapeflag;\n\/\/    };\n\/\/    vector < char > abyTextArea; \/\/ TODO: what is it?\n\/\/    vector < CADHandle > hShapefiles; \/\/ TODO: one for each dash?\n\/\/};\n\n\/\/class EXTERN Block\n\/\/{\n\/\/public:\n\/\/    Block(CADFile * pCADFile)\n\/\/    {\n\/\/        pstCADFile_m = pCADFile;\n\/\/    }\n\/\/\n\/\/    string sBlockName;\n\/\/\n\/\/    CADFile * pstCADFile_m;\n\/\/\n\/\/    vector < pair < long long, short > > astAttachedGeometries;\n\/\/};\n\n\n#endif \/\/ CADGEOMETRIES_H\nContact GitHub API Training Shop Blog About\n"}}
