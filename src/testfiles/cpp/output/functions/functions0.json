{"cpp.functions":{"subs":[{"cpp.function":{"subs":[{"cpp.return_type":{"pos":1708,"text":"<iostream>\n\n"}},{"cpp.function_name":{"pos":1720,"text":"CADFile::CADFile"}},{"cpp.parameters":{"subs":[{"cpp.single_param":{"pos":1737,"text":" CADFileIO * poFileIO "}}],"pos":1736,"text":"( CADFileIO * poFileIO )\n"}}],"pos":1707,"text":" <iostream>\n\nCADFile::CADFile( CADFileIO * poFileIO )\n{"}},{"cpp.function":{"subs":[{"cpp.return_type":{"pos":1790,"text":"CADFile"}},{"cpp.function_name":{"pos":1797,"text":"::~CADFile"}},{"cpp.parameters":{"subs":[{"cpp.single_param":{"pos":1808,"text":""}}],"pos":1807,"text":"()\n"}}],"pos":1788,"text":"\n\nCADFile::~CADFile()\n{"}},{"cpp.function":{"subs":[{"cpp.return_type":{"pos":1868,"text":"const CADHeader& "}},{"cpp.function_name":{"pos":1885,"text":"CADFile::getHeader"}},{"cpp.parameters":{"subs":[{"cpp.single_param":{"pos":1904,"text":""}}],"pos":1903,"text":"() "}}],"pos":1866,"text":"\n\nconst CADHeader& CADFile::getHeader() const\n{"}},{"cpp.function":{"subs":[{"cpp.return_type":{"pos":1937,"text":"const CADClasses& "}},{"cpp.function_name":{"pos":1955,"text":"CADFile::getClasses"}},{"cpp.parameters":{"subs":[{"cpp.single_param":{"pos":1975,"text":""}}],"pos":1974,"text":"() "}}],"pos":1935,"text":"\n\nconst CADClasses& CADFile::getClasses() const\n{"}},{"cpp.function":{"subs":[{"cpp.return_type":{"pos":2009,"text":"const CADTables& "}},{"cpp.function_name":{"pos":2026,"text":"CADFile::getTables"}},{"cpp.parameters":{"subs":[{"cpp.single_param":{"pos":2045,"text":""}}],"pos":2044,"text":"() "}}],"pos":2007,"text":"\n\nconst CADTables& CADFile::getTables() const\n{"}},{"cpp.function":{"subs":[{"cpp.return_type":{"pos":2078,"text":"int "}},{"cpp.function_name":{"pos":2082,"text":"CADFile::ParseFile"}},{"cpp.parameters":{"subs":[{"cpp.single_param":{"pos":2101,"text":" enum OpenOptions eOptions"}},{"cpp.single_param":{"pos":2128,"text":" bool bReadUnsupportedGeometries "}}],"pos":2100,"text":"( enum OpenOptions eOptions, bool bReadUnsupportedGeometries )\n"}}],"pos":2076,"text":"\n\nint CADFile::ParseFile( enum OpenOptions eOptions, bool bReadUnsupportedGeometries )\n{"}},{"cpp.function":{"subs":[{"cpp.return_type":{"pos":3191,"text":"int "}},{"cpp.function_name":{"pos":3195,"text":"CADFile::ReadTables"}},{"cpp.parameters":{"subs":[{"cpp.single_param":{"pos":3215,"text":" CADFile::OpenOptions "}}],"pos":3214,"text":"( CADFile::OpenOptions )\n"}}],"pos":3189,"text":"\n\nint CADFile::ReadTables( CADFile::OpenOptions )\n{"}},{"cpp.function":{"subs":[{"cpp.return_type":{"pos":3429,"text":"size_t "}},{"cpp.function_name":{"pos":3436,"text":"CADFile::GetLayersCount"}},{"cpp.parameters":{"subs":[{"cpp.single_param":{"pos":3460,"text":""}}],"pos":3459,"text":"() "}}],"pos":3427,"text":"\n\nsize_t CADFile::GetLayersCount() const\n{"}},{"cpp.function":{"subs":[{"cpp.return_type":{"pos":3509,"text":"CADLayer& "}},{"cpp.function_name":{"pos":3519,"text":"CADFile::GetLayer"}},{"cpp.parameters":{"subs":[{"cpp.single_param":{"pos":3537,"text":" size_t index "}}],"pos":3536,"text":"( size_t index )\n"}}],"pos":3507,"text":"\n\nCADLayer& CADFile::GetLayer( size_t index )\n{"}},{"cpp.function":{"subs":[{"cpp.return_type":{"pos":3596,"text":"bool "}},{"cpp.function_name":{"pos":3601,"text":"CADFile::isReadingUnsupportedGeometries"}},{"cpp.parameters":{"subs":[{"cpp.single_param":{"pos":3641,"text":""}}],"pos":3640,"text":"()\n"}}],"pos":3594,"text":"\n\nbool CADFile::isReadingUnsupportedGeometries()\n{"}}],"pos":1,"text":"\/*******************************************************************************\n *  Project: libopencad\n *  Purpose: OpenSource CAD formats support library\n *  Author: Alexandr Borzykh, mush3d at gmail.com\n *  Author: Dmitry Baryshnikov, bishop.dev@gmail.com\n *  Language: C++\n *******************************************************************************\n *  The MIT License (MIT)\n *\n *  Copyright (c) 2016 Alexandr Borzykh\n *  Copyright (c) 2016 NextGIS, <info@nextgis.com>\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"Software\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in all\n *  copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n *  SOFTWARE.\n *******************************************************************************\/\n#include \"cadfile.h\"\n#include \"opencad_api.h\"\n\n#include <iostream>\n\nCADFile::CADFile( CADFileIO * poFileIO )\n{\n    pFileIO = poFileIO;\n}\n\nCADFile::~CADFile()\n{\n    if( nullptr != pFileIO )\n        delete pFileIO;\n}\n\nconst CADHeader& CADFile::getHeader() const\n{\n    return oHeader;\n}\n\nconst CADClasses& CADFile::getClasses() const\n{\n    return oClasses;\n}\n\nconst CADTables& CADFile::getTables() const\n{\n    return oTables;\n}\n\nint CADFile::ParseFile( enum OpenOptions eOptions, bool bReadUnsupportedGeometries )\n{\n    if( nullptr == pFileIO )\n        return CADErrorCodes::FILE_OPEN_FAILED;\n\n    if( !pFileIO->IsOpened() )\n    {\n        if( !pFileIO->Open( CADFileIO::read | CADFileIO::binary ) )\n            return CADErrorCodes::FILE_OPEN_FAILED;\n    }\n\n    \/\/ Set flag which will tell CADLayer to skip\/not skip unsupported geoms\n    bReadingUnsupportedGeometries = bReadUnsupportedGeometries;\n\n    int nResultCode;\n    nResultCode = ReadSectionLocators();\n    if( nResultCode != CADErrorCodes::SUCCESS )\n        return nResultCode;\n    nResultCode = ReadHeader( eOptions );\n    if( nResultCode != CADErrorCodes::SUCCESS )\n        return nResultCode;\n    nResultCode = ReadClasses( eOptions );\n    if( nResultCode != CADErrorCodes::SUCCESS )\n        return nResultCode;\n    nResultCode = CreateFileMap();\n    if( nResultCode != CADErrorCodes::SUCCESS )\n        return nResultCode;\n    nResultCode = ReadTables( eOptions );\n    if( nResultCode != CADErrorCodes::SUCCESS )\n        return nResultCode;\n\n    return CADErrorCodes::SUCCESS;\n}\n\nint CADFile::ReadTables( CADFile::OpenOptions )\n{\n    \/\/ TODO: read other tables in ALL option mode\n\n    int nResult = oTables.ReadTable( this, CADTables::LayersTable );\n\/\/    if(nResult != CADErrorCodes::SUCCESS)\n    return nResult;\n\n}\n\nsize_t CADFile::GetLayersCount() const\n{\n    return oTables.GetLayerCount();\n}\n\nCADLayer& CADFile::GetLayer( size_t index )\n{\n    return oTables.GetLayer( index );\n}\n\nbool CADFile::isReadingUnsupportedGeometries()\n{\n    return bReadingUnsupportedGeometries;\n}"}}
