{"cs.functions":{"subs":[{"cs.function":{"subs":[{"cs.accessmod":{"text":"public","pos":386}},{"cs.returntype":{"text":"void","pos":393}},{"cs.methodname":{"text":"WriteHeader","pos":398}},{"cs.paramlist":{"subs":[{"cs.param":{"subs":[{"cs.paramtype":{"text":"string","pos":410}},{"cs.paramname":{"text":"message","pos":417}}],"text":"string message","pos":410}},{"cs.param":{"subs":[{"cs.parammod":{"text":"params","pos":426}},{"cs.paramtype":{"text":"object[]","pos":433}},{"cs.paramname":{"text":"args","pos":442}}],"text":"params object[] args","pos":426}}],"text":"string message, params object[] args","pos":410}}],"text":"public void WriteHeader(string message, params object[] args)\n      {","pos":386}},{"cs.function":{"subs":[{"cs.accessmod":{"text":"public","pos":535}},{"cs.returntype":{"text":"void","pos":542}},{"cs.methodname":{"text":"WriteLine","pos":547}},{"cs.paramlist":{"subs":[{"cs.param":{"subs":[{"cs.paramtype":{"text":"string","pos":557}},{"cs.paramname":{"text":"message","pos":564}}],"text":"string message","pos":557}},{"cs.param":{"subs":[{"cs.parammod":{"text":"params","pos":573}},{"cs.paramtype":{"text":"object[]","pos":580}},{"cs.paramname":{"text":"args","pos":589}}],"text":"params object[] args","pos":573}}],"text":"string message, params object[] args","pos":557}}],"text":"public void WriteLine(string message, params object[] args)\n      {","pos":535}},{"cs.function":{"subs":[{"cs.accessmod":{"text":"public","pos":688}},{"cs.returntype":{"text":"void","pos":695}},{"cs.methodname":{"text":"WriteWarning","pos":700}},{"cs.paramlist":{"subs":[{"cs.param":{"subs":[{"cs.paramtype":{"text":"string","pos":713}},{"cs.paramname":{"text":"message","pos":720}}],"text":"string message","pos":713}},{"cs.param":{"subs":[{"cs.parammod":{"text":"params","pos":729}},{"cs.paramtype":{"text":"object[]","pos":736}},{"cs.paramname":{"text":"args","pos":745}}],"text":"params object[] args","pos":729}}],"text":"string message, params object[] args","pos":713}}],"text":"public void WriteWarning(string message, params object[] args)\n      {","pos":688}},{"cs.function":{"subs":[{"cs.accessmod":{"text":"public","pos":842}},{"cs.returntype":{"text":"void","pos":849}},{"cs.methodname":{"text":"WriteError","pos":854}},{"cs.paramlist":{"subs":[{"cs.param":{"subs":[{"cs.paramtype":{"text":"string","pos":865}},{"cs.paramname":{"text":"message","pos":872}}],"text":"string message","pos":865}},{"cs.param":{"subs":[{"cs.parammod":{"text":"params","pos":881}},{"cs.paramtype":{"text":"object[]","pos":888}},{"cs.paramname":{"text":"args","pos":897}}],"text":"params object[] args","pos":881}}],"text":"string message, params object[] args","pos":865}}],"text":"public void WriteError(string message, params object[] args)\n      {","pos":842}},{"cs.function":{"subs":[{"cs.accessmod":{"text":"public","pos":992}},{"cs.returntype":{"text":"void","pos":999}},{"cs.methodname":{"text":"WriteVerbose","pos":1004}},{"cs.paramlist":{"subs":[{"cs.param":{"subs":[{"cs.paramtype":{"text":"string","pos":1017}},{"cs.paramname":{"text":"message","pos":1024}}],"text":"string message","pos":1017}},{"cs.param":{"subs":[{"cs.parammod":{"text":"params","pos":1033}},{"cs.paramtype":{"text":"object[]","pos":1040}},{"cs.paramname":{"text":"args","pos":1049}}],"text":"params object[] args","pos":1033}}],"text":"string message, params object[] args","pos":1017}}],"text":"public void WriteVerbose(string message, params object[] args)\n      {","pos":992}},{"cs.function":{"subs":[{"cs.accessmod":{"text":"private","pos":1184}},{"cs.returntype":{"text":"void","pos":1192}},{"cs.methodname":{"text":"WriteMessage","pos":1197}},{"cs.paramlist":{"subs":[{"cs.param":{"subs":[{"cs.paramtype":{"text":"ConsoleColor","pos":1210}},{"cs.paramname":{"text":"color","pos":1223}}],"text":"ConsoleColor color","pos":1210}},{"cs.param":{"subs":[{"cs.paramtype":{"text":"string","pos":1230}},{"cs.paramname":{"text":"label","pos":1237}}],"text":"string label","pos":1230}},{"cs.param":{"subs":[{"cs.paramtype":{"text":"string","pos":1244}},{"cs.paramname":{"text":"message","pos":1251}}],"text":"string message","pos":1244}},{"cs.param":{"subs":[{"cs.parammod":{"text":"params","pos":1260}},{"cs.paramtype":{"text":"object[]","pos":1267}},{"cs.paramname":{"text":"args","pos":1276}}],"text":"params object[] args","pos":1260}}],"text":"ConsoleColor color, string label, string message, params object[] args","pos":1210}}],"text":"private void WriteMessage(ConsoleColor color, string label, string message, params object[] args)\n      {","pos":1184}},{"cs.function":{"subs":[{"cs.accessmod":{"text":"private","pos":1853}},{"cs.returntype":{"text":"void","pos":1861}},{"cs.methodname":{"text":"WriteLine","pos":1866}},{"cs.paramlist":{"subs":[{"cs.param":{"subs":[{"cs.paramtype":{"text":"ConsoleColor","pos":1876}},{"cs.paramname":{"text":"color","pos":1889}}],"text":"ConsoleColor color","pos":1876}},{"cs.param":{"subs":[{"cs.paramtype":{"text":"string","pos":1896}},{"cs.paramname":{"text":"message","pos":1903}}],"text":"string message","pos":1896}}],"text":"ConsoleColor color, string message","pos":1876}}],"text":"private void WriteLine(ConsoleColor color, string message)\n      {","pos":1853}},{"cs.function":{"subs":[{"cs.accessmod":{"text":"private","pos":2109}},{"cs.returntype":{"text":"string","pos":2117}},{"cs.methodname":{"text":"WordWrap","pos":2124}},{"cs.paramlist":{"subs":[{"cs.param":{"subs":[{"cs.paramtype":{"text":"string","pos":2133}},{"cs.paramname":{"text":"message","pos":2140}}],"text":"string message","pos":2133}},{"cs.param":{"subs":[{"cs.parammod":{"text":"params","pos":2149}},{"cs.paramtype":{"text":"object[]","pos":2156}},{"cs.paramname":{"text":"args","pos":2165}}],"text":"params object[] args","pos":2149}}],"text":"string message, params object[] args","pos":2133}}],"text":"private string WordWrap(string message, params object[] args)\n      {","pos":2109}},{"cs.function":{"subs":[{"cs.accessmod":{"text":"public","pos":2994}},{"cs.returntype":{"text":"void","pos":3001}},{"cs.methodname":{"text":"WriteLine","pos":3006}}],"text":"public void WriteLine()\n      {","pos":2994}},{"cs.function":{"subs":[{"cs.accessmod":{"text":"public","pos":3207}},{"cs.returntype":{"text":"void","pos":3214}},{"cs.methodname":{"text":"WriteTable","pos":3219}},{"cs.paramlist":{"subs":[{"cs.param":{"subs":[{"cs.paramtype":{"text":"StringTable","pos":3230}},{"cs.paramname":{"text":"table","pos":3242}}],"text":"StringTable table","pos":3230}},{"cs.param":{"subs":[{"cs.paramtype":{"text":"int","pos":3249}},{"cs.paramname":{"text":"columnSpacing","pos":3253}},{"cs.defaultval":{"text":"3","pos":3269}}],"text":"int columnSpacing = 3","pos":3249}},{"cs.param":{"subs":[{"cs.paramtype":{"text":"bool","pos":3272}},{"cs.paramname":{"text":"addVerticalSeparation","pos":3277}},{"cs.defaultval":{"text":"false","pos":3301}}],"text":"bool addVerticalSeparation = false","pos":3272}}],"text":"StringTable table, int columnSpacing = 3, bool addVerticalSeparation = false","pos":3230}}],"text":"public void WriteTable(StringTable table, int columnSpacing = 3, bool addVerticalSeparation = false)\n      {","pos":3207}},{"cs.function":{"subs":[{"cs.accessmod":{"text":"public","pos":4566}},{"cs.returntype":{"text":"void","pos":4573}},{"cs.methodname":{"text":"PushIndent","pos":4578}}],"text":"public void PushIndent()\n      {","pos":4566}},{"cs.function":{"subs":[{"cs.accessmod":{"text":"public","pos":4638}},{"cs.returntype":{"text":"void","pos":4645}},{"cs.methodname":{"text":"PopIndent","pos":4650}}],"text":"public void PopIndent()\n      {","pos":4638}},{"cs.function":{"subs":[{"cs.accessmod":{"text":"public","pos":4762}},{"cs.returntype":{"text":"IDisposable","pos":4769}},{"cs.methodname":{"text":"GetIndent","pos":4781}}],"text":"public IDisposable GetIndent()\n      {","pos":4762}},{"cs.function":{"subs":[{"cs.accessmod":{"text":"public","pos":5053}},{"cs.returntype":{"text":"void","pos":5060}},{"cs.methodname":{"text":"Dispose","pos":5065}}],"text":"public void Dispose()\n         {","pos":5053}},{"cs.function":{"subs":[{"cs.accessmod":{"text":"public","pos":5144}},{"cs.returntype":{"text":"void","pos":5151}},{"cs.methodname":{"text":"ExecCommand","pos":5156}},{"cs.paramlist":{"subs":[{"cs.param":{"subs":[{"cs.paramtype":{"text":"string","pos":5168}},{"cs.paramname":{"text":"execCommand","pos":5175}}],"text":"string execCommand","pos":5168}},{"cs.param":{"subs":[{"cs.paramtype":{"text":"string","pos":5188}},{"cs.paramname":{"text":"args","pos":5195}}],"text":"string args","pos":5188}}],"text":"string execCommand, string args","pos":5168}}],"text":"public void ExecCommand(string execCommand, string args)\n      {","pos":5144}},{"cs.function":{"subs":[{"cs.accessmod":{"text":"public","pos":5914}},{"cs.returntype":{"text":"bool","pos":5921}},{"cs.methodname":{"text":"ShouldContinue","pos":5926}}],"text":"public bool ShouldContinue()\n      {","pos":5914}}],"text":"\/\/ Code sourced under MIT License from alphaleonis\/AlphaVSS\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing AlphaShadow.Options;\nusing System.Text;\nusing System.Diagnostics;\n\nnamespace AlphaShadow\n{\n   public class ConsoleHost : IUIHost\n   {\n      private int m_indent = 0;\n\n      public ConsoleHost()\n      {\n         IsWordWrapEnabled = true;\n      }\n\n      public void WriteHeader(string message, params object[] args)\n      {\n         WriteLine(ConsoleColor.Cyan, WordWrap(message, args));\n      }\n\n      public void WriteLine(string message, params object[] args)\n      {\n         WriteLine(Console.ForegroundColor, WordWrap(message, args));\n      }\n\n      public void WriteWarning(string message, params object[] args)\n      {\n         WriteMessage(ConsoleColor.Red, \"Warning:\", message, args);\n      }\n\n      public void WriteError(string message, params object[] args)\n      {\n         WriteMessage(ConsoleColor.Red, \"Error:\", message, args);\n      }\n\n      public void WriteVerbose(string message, params object[] args)\n      {\n         if (VerboseOutputEnabled)\n            WriteLine(ConsoleColor.DarkGray, WordWrap(message, args));\n      }\n\n      private void WriteMessage(ConsoleColor color, string label, string message, params object[] args)\n      {\n         if (IsWordWrapEnabled)\n         {\n            int col1Width = label.Length;\n            int col2Width = Math.Max(1, Console.WindowWidth - col1Width - 2);\n\n            string text = StringFormatter.FormatInColumns(m_indent, 1,\n               new StringFormatter.ColumnInfo(col1Width, label),\n               new StringFormatter.ColumnInfo(col2Width, String.Format(message, args)));\n\n            WriteLine(color, text);\n         }\n         else\n         {\n            WriteLine(color, label + \" \" + String.Format(message, args));\n         }\n      }\n\n\n      private void WriteLine(ConsoleColor color, string message)\n      {\n         ConsoleColor temp = Console.ForegroundColor;\n         Console.ForegroundColor = color;\n         Console.WriteLine(message);\n         Console.ForegroundColor = temp;\n      }\n\n      private string WordWrap(string message, params object[] args)\n      {\n         if (IsWordWrapEnabled)\n         {\n            StringBuilder sb = new StringBuilder();\n            string wrappedString = StringFormatter.WordWrap((args == null || args.Length == 0) ? message : String.Format(message, args), Console.WindowWidth - 5 - m_indent, StringFormatter.WordWrappingMethod.Greedy);\n            IList<string> splitString = StringFormatter.SplitAtLineBreaks(wrappedString);\n            for (int i = 0; i < splitString.Count; i++)\n            {\n               if (i != 0)\n                  sb.AppendLine();\n               sb.Append(String.Format(\"{0}{1}\", new String(' ', m_indent), splitString[i]));\n            }\n            return sb.ToString();\n         }\n         else\n         {\n            return new String(' ', m_indent) + String.Format(message, args);\n         }\n      }\n\n      public void WriteLine()\n      {\n         Console.WriteLine();\n      }\n\n\n      public bool VerboseOutputEnabled\n      {\n         get;\n         set;\n      }\n\n      public bool IsWordWrapEnabled { get; set; }\n\n      public void WriteTable(StringTable table, int columnSpacing = 3, bool addVerticalSeparation = false)\n      {\n         if (table == null)\n            throw new ArgumentNullException(\"table\", \"table is null.\");\n\n         if (IsWordWrapEnabled)\n         {\n            int indent = m_indent;\n            if (indent >= Console.WindowWidth - columnSpacing - 2)\n               indent = 0;\n\n            int maxWidth = Console.WindowWidth - indent;\n            int col1Width = Math.Min(table.Labels.Max(text => text.Length), maxWidth \/ 2);\n            int colSpacing = columnSpacing;\n            int col2Width = maxWidth - col1Width - colSpacing - 1;\n\n            for (int i = 0; i < table.Count; i++)\n            {\n               if (i > 0 && addVerticalSeparation)\n                  Console.WriteLine();\n\n               Console.WriteLine(\n                  StringFormatter.FormatInColumns(indent, colSpacing,\n                  new StringFormatter.ColumnInfo(col1Width, table.Labels[i]),\n                  new StringFormatter.ColumnInfo(col2Width, table.Values[i])));\n\n            }\n         }\n         else\n         {\n            for (int i = 0; i < table.Count; i++)\n            {\n               Console.WriteLine(\"{0}{1}{2}{3}\", new String(' ', m_indent), table.Labels[i], new String(' ', columnSpacing), table.Values[i]);\n            }\n         }\n\n      }\n\n      public void PushIndent()\n      {\n         m_indent += 3;\n      }\n\n      public void PopIndent()\n      {\n         m_indent -= 3;\n         if (m_indent < 0)\n            m_indent = 0;\n      }\n\n      public IDisposable GetIndent()\n      {\n         return new Indenter(this);\n      }\n\n      private class Indenter : IDisposable\n      {\n         IUIHost m_host;\n         public Indenter(IUIHost host)\n         {\n            m_host = host;\n            m_host.PushIndent();\n         }\n\n         public void Dispose()\n         {\n            m_host.PopIndent();\n         }\n      }\n\n      public void ExecCommand(string execCommand, string args)\n      {\n         WriteLine(\"- Executing command '{0}' ...\", execCommand);\n         WriteLine(\"-----------------------------------------------------\");\n\n         ProcessStartInfo ps = new ProcessStartInfo(execCommand, args);\n         ps.CreateNoWindow = false;\n         ps.UseShellExecute = false;\n\n         Process p = Process.Start(ps);\n         p.WaitForExit();\n         WriteLine(\"-----------------------------------------------------\");\n\n         if (p.ExitCode != 0)\n         {\n            WriteError(\"Command line '{0}' failed!. Aborting the backup...\", execCommand);\n            WriteError(\"Returned error code: {0}\", p.ExitCode);\n            throw new CommandAbortedException();\n         }\n      }\n\n      public bool ShouldContinue()\n      {\n         WriteHeader(\"Continue? [Y\/N]\");\n         string response = Console.ReadLine();\n         return response.Equals(\"y\", StringComparison.OrdinalIgnoreCase) || response.Equals(\"yes\", StringComparison.OrdinalIgnoreCase);\n      }\n   }\n}\n","pos":1}}
