{"cs.functions":{"subs":[{"cs.function":{"subs":[{"cs.accessmod":{"text":"internal","pos":604}},{"cs.returntype":{"text":"void","pos":613}},{"cs.methodname":{"text":"Load","pos":618}},{"cs.paramlist":{"subs":[{"cs.param":{"subs":[{"cs.paramtype":{"text":"DatabaseType","pos":623}},{"cs.paramname":{"text":"dbType","pos":636}}],"text":"DatabaseType dbType","pos":623}},{"cs.param":{"subs":[{"cs.paramtype":{"text":"bool","pos":644}},{"cs.paramname":{"text":"loadFromFile","pos":649}}],"text":"bool loadFromFile","pos":644}}],"text":"DatabaseType dbType, bool loadFromFile","pos":623}}],"text":"internal void Load(DatabaseType dbType, bool loadFromFile)\n        {","pos":604}}],"text":"\/\/ Copyright (C) Arctium Software.\n\/\/ Licensed under the MIT license. See LICENSE file in the project root for full license information.\n\nusing System;\nusing System.Data.Common;\nusing System.Linq;\nusing System.Reflection;\nusing LappaORM.Constants;\nusing LappaORM.Misc;\nusing Microsoft.Extensions.DependencyModel;\n\nnamespace LappaORM\n{\n    internal sealed class Connector\n    {\n        public string FilePath { get; set; } = null;\n        public string FileName { get; set; } = null;\n\n        Assembly assembly;\n        Type connectionType;\n        Type commandType;\n        Type parameterType;\n\n        internal void Load(DatabaseType dbType, bool loadFromFile)\n        {\n            \/\/ Use MSSQL as default.\n            var typeBase = \"System.Data.SqlClient.Sql\";\n\n            switch (dbType)\n            {\n                case DatabaseType.MSSql:\n                {\n                    assembly = Assembly.Load(new AssemblyName(\"System.Data.SqlClient, Version=4.3.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\"));\n                    break;\n                }\n                case DatabaseType.MySql:\n                {\n                    typeBase = \"MySql.Data.MySqlClient.MySql\";\n\n                    if (loadFromFile)\n                        assembly = new AssemblyLoader().LoadFromAssemblyPath($\"{FilePath ?? AppContext.BaseDirectory}\/{FileName ?? \"MySqlConnector.dll\"}\");\n                    else\n                    {\n                        var mysqlAssemblyNames = DependencyContext.Default.GetDefaultAssemblyNames().Where(asm => asm.Name.StartsWith(\"MySql.Data\") ||\n                                                                                                                  asm.Name.StartsWith(\"MySqlConnector\"));\n                        \/\/ Let's throw a type load exception if no supported MySql lib is found.\n                        if (mysqlAssemblyNames.Count() == 0)\n                            throw new TypeLoadException(\"No assembly referencing 'MySql' found.\");\n\n                        if (mysqlAssemblyNames.Count() > 1)\n                            throw new NotSupportedException(\"Multiple assemblies referencing 'MySql' found.\");\n\n                        assembly = Assembly.Load(mysqlAssemblyNames.First());\n                    }\n\n                    break;\n                }\n                case DatabaseType.SQLite:\n                {\n                    typeBase = \"Microsoft.Data.Sqlite.Sqlite\";\n                    assembly = Assembly.Load(new AssemblyName(\"Microsoft.Data.Sqlite, Version=1.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\"));\n\n                    break;\n                }\n                default:\n                    break;\n            }\n\n            connectionType = assembly.GetType($\"{typeBase}Connection\");\n            commandType = assembly.GetType($\"{typeBase}Command\");\n            parameterType = assembly.GetType($\"{typeBase}Parameter\");\n\n            if (connectionType == null || commandType == null || parameterType == null)\n                throw new TypeLoadException($\"connectionType: {connectionType}, commandType: {commandType}, parameterType: {parameterType}.\");\n        }\n\n        public DbConnection CreateConnectionObject() => Activator.CreateInstance(connectionType) as DbConnection;\n        public DbCommand CreateCommandObject() => Activator.CreateInstance(commandType) as DbCommand;\n        public DbParameter CreateParameterObject() => Activator.CreateInstance(parameterType) as DbParameter;\n    }\n}\n","pos":1}}
