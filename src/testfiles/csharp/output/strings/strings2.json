{"cs.strings":{"pos":1,"text":"\/*\nThe MIT License(MIT)\nCopyright(c) mxgmn 2016.\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nThe software is provided \"as is\", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. In no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software.\n*\/\n\nusing System;\n\nabstract class Model\n{\n\tprotected bool[][][] wave;\n\tprotected bool[][] changes;\n\tprotected double[] stationary;\n\tprotected int[][] observed;\n\n\tprotected Random random;\n\tprotected int FMX, FMY, T, limit;\n\tprotected bool periodic;\n\n\tdouble[] logProb;\n\tdouble logT;\n\n\tprotected Model(int width, int height)\n\t{\n\t\tFMX = width;\n\t\tFMY = height;\n\n\t\twave = new bool[FMX][][];\n\t\tchanges = new bool[FMX][];\n\t\tfor (int x = 0; x < FMX; x++)\n\t\t{\n\t\t\twave[x] = new bool[FMY][];\n\t\t\tchanges[x] = new bool[FMY];\n\t\t}\n\t}\n\n\tprotected abstract bool Propagate();\n\n\tbool? Observe()\n\t{\n\t\tdouble min = 1E+3, sum, mainSum, logSum, noise, entropy;\n\t\tint argminx = -1, argminy = -1, amount;\n\t\tbool[] w;\n\n\t\tfor (int x = 0; x < FMX; x++) for (int y = 0; y < FMY; y++)\n\t\t\t{\n\t\t\t\tif (OnBoundary(x, y)) continue;\n\n\t\t\t\tw = wave[x][y];\n\t\t\t\tamount = 0;\n\t\t\t\tsum = 0;\n\n\t\t\t\tfor (int t = 0; t < T; t++) if (w[t])\n\t\t\t\t\t{\n\t\t\t\t\t\tamount += 1;\n\t\t\t\t\t\tsum += stationary[t];\n\t\t\t\t\t}\n\n\t\t\t\tif (sum == 0) return false;\n\n\t\t\t\tnoise = 1E-6 * random.NextDouble();\n\n\t\t\t\tif (amount == 1) entropy = 0;\n\t\t\t\telse if (amount == T) entropy = logT;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmainSum = 0;\n\t\t\t\t\tlogSum = Math.Log(sum);\n\t\t\t\t\tfor (int t = 0; t < T; t++) if (w[t]) mainSum += stationary[t] * logProb[t];\n\t\t\t\t\tentropy = logSum - mainSum \/ sum;\n\t\t\t\t}\n\n\t\t\t\tif (entropy > 0 && entropy + noise < min)\n\t\t\t\t{\n\t\t\t\t\tmin = entropy + noise;\n\t\t\t\t\targminx = x;\n\t\t\t\t\targminy = y;\n\t\t\t\t}\n\t\t\t}\n\n\t\tif (argminx == -1 && argminy == -1)\n\t\t{\n\t\t\tobserved = new int[FMX][];\n\t\t\tfor (int x = 0; x < FMX; x++)\n\t\t\t{\n\t\t\t\tobserved[x] = new int[FMY];\n\t\t\t\tfor (int y = 0; y < FMY; y++) for (int t = 0; t < T; t++) if (wave[x][y][t])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tobserved[x][y] = t;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\treturn true;\n\t\t}\n\n\t\tdouble[] distribution = new double[T];\n\t\tfor (int t = 0; t < T; t++) distribution[t] = wave[argminx][argminy][t] ? stationary[t] : 0;\n\t\tint r = distribution.Random(random.NextDouble());\n\t\tfor (int t = 0; t < T; t++) wave[argminx][argminy][t] = t == r;\n\t\tchanges[argminx][argminy] = true;\n\n\t\treturn null;\n\t}\n\n\tpublic bool Run(int seed, int limit)\n\t{\n\t\tlogT = Math.Log(T);\n\t\tlogProb = new double[T];\n\t\tfor (int t = 0; t < T; t++) logProb[t] = Math.Log(stationary[t]);\n\n\t\tClear();\n\n\t\trandom = new Random(seed);\n\n\t\tfor (int l = 0; l < limit || limit == 0; l++)\n\t\t{\n\t\t\tbool? result = Observe();\n\t\t\tif (result != null) return (bool)result;\n\t\t\twhile (Propagate());\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprotected virtual void Clear()\n\t{\n\t\tfor (int x = 0; x < FMX; x++) for (int y = 0; y < FMY; y++)\n\t\t\t{\n\t\t\t\tfor (int t = 0; t < T; t++) wave[x][y][t] = true;\n\t\t\t\tchanges[x][y] = false;\n\t\t\t}\n\t}\n\n\tprotected abstract bool OnBoundary(int x, int y);\n\tpublic abstract System.Drawing.Bitmap Graphics();\n}\n"}}
