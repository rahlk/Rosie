{"cs.classes":{"subs":[{"cs.class":{"subs":[{"cs.visibility":{"pos":228,"text":"public"}},{"cs.declaration":{"pos":235,"text":"class"}},{"cs.classname":{"pos":241,"text":"ConsoleHost"}},{"cs.parentclasslist":{"subs":[{"cs.parentclass":{"pos":255,"text":"IUIHost"}}],"pos":255,"text":"IUIHost"}}],"pos":228,"text":"public class ConsoleHost : IUIHost\n   {"}},{"cs.class":{"subs":[{"cs.declaration":{"pos":4860,"text":"class"}},{"cs.classname":{"pos":4866,"text":"Indenter"}},{"cs.parentclasslist":{"subs":[{"cs.parentclass":{"pos":4877,"text":"IDisposable"}}],"pos":4877,"text":"IDisposable"}}],"pos":4859,"text":" class Indenter : IDisposable\n      {"}}],"pos":1,"text":"\/\/ Code sourced under MIT License from alphaleonis\/AlphaVSS\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing AlphaShadow.Options;\nusing System.Text;\nusing System.Diagnostics;\n\nnamespace AlphaShadow\n{\n   public class ConsoleHost : IUIHost\n   {\n      private int m_indent = 0;\n\n      public ConsoleHost()\n      {\n         IsWordWrapEnabled = true;\n      }\n\n      public void WriteHeader(string message, params object[] args)\n      {\n         WriteLine(ConsoleColor.Cyan, WordWrap(message, args));\n      }\n\n      public void WriteLine(string message, params object[] args)\n      {\n         WriteLine(Console.ForegroundColor, WordWrap(message, args));\n      }\n\n      public void WriteWarning(string message, params object[] args)\n      {\n         WriteMessage(ConsoleColor.Red, \"Warning:\", message, args);\n      }\n\n      public void WriteError(string message, params object[] args)\n      {\n         WriteMessage(ConsoleColor.Red, \"Error:\", message, args);\n      }\n\n      public void WriteVerbose(string message, params object[] args)\n      {\n         if (VerboseOutputEnabled)\n            WriteLine(ConsoleColor.DarkGray, WordWrap(message, args));\n      }\n\n      private void WriteMessage(ConsoleColor color, string label, string message, params object[] args)\n      {\n         if (IsWordWrapEnabled)\n         {\n            int col1Width = label.Length;\n            int col2Width = Math.Max(1, Console.WindowWidth - col1Width - 2);\n\n            string text = StringFormatter.FormatInColumns(m_indent, 1,\n               new StringFormatter.ColumnInfo(col1Width, label),\n               new StringFormatter.ColumnInfo(col2Width, String.Format(message, args)));\n\n            WriteLine(color, text);\n         }\n         else\n         {\n            WriteLine(color, label + \" \" + String.Format(message, args));\n         }\n      }\n\n\n      private void WriteLine(ConsoleColor color, string message)\n      {\n         ConsoleColor temp = Console.ForegroundColor;\n         Console.ForegroundColor = color;\n         Console.WriteLine(message);\n         Console.ForegroundColor = temp;\n      }\n\n      private string WordWrap(string message, params object[] args)\n      {\n         if (IsWordWrapEnabled)\n         {\n            StringBuilder sb = new StringBuilder();\n            string wrappedString = StringFormatter.WordWrap((args == null || args.Length == 0) ? message : String.Format(message, args), Console.WindowWidth - 5 - m_indent, StringFormatter.WordWrappingMethod.Greedy);\n            IList<string> splitString = StringFormatter.SplitAtLineBreaks(wrappedString);\n            for (int i = 0; i < splitString.Count; i++)\n            {\n               if (i != 0)\n                  sb.AppendLine();\n               sb.Append(String.Format(\"{0}{1}\", new String(' ', m_indent), splitString[i]));\n            }\n            return sb.ToString();\n         }\n         else\n         {\n            return new String(' ', m_indent) + String.Format(message, args);\n         }\n      }\n\n      public void WriteLine()\n      {\n         Console.WriteLine();\n      }\n\n\n      public bool VerboseOutputEnabled\n      {\n         get;\n         set;\n      }\n\n      public bool IsWordWrapEnabled { get; set; }\n\n      public void WriteTable(StringTable table, int columnSpacing = 3, bool addVerticalSeparation = false)\n      {\n         if (table == null)\n            throw new ArgumentNullException(\"table\", \"table is null.\");\n\n         if (IsWordWrapEnabled)\n         {\n            int indent = m_indent;\n            if (indent >= Console.WindowWidth - columnSpacing - 2)\n               indent = 0;\n\n            int maxWidth = Console.WindowWidth - indent;\n            int col1Width = Math.Min(table.Labels.Max(text => text.Length), maxWidth \/ 2);\n            int colSpacing = columnSpacing;\n            int col2Width = maxWidth - col1Width - colSpacing - 1;\n\n            for (int i = 0; i < table.Count; i++)\n            {\n               if (i > 0 && addVerticalSeparation)\n                  Console.WriteLine();\n\n               Console.WriteLine(\n                  StringFormatter.FormatInColumns(indent, colSpacing,\n                  new StringFormatter.ColumnInfo(col1Width, table.Labels[i]),\n                  new StringFormatter.ColumnInfo(col2Width, table.Values[i])));\n\n            }\n         }\n         else\n         {\n            for (int i = 0; i < table.Count; i++)\n            {\n               Console.WriteLine(\"{0}{1}{2}{3}\", new String(' ', m_indent), table.Labels[i], new String(' ', columnSpacing), table.Values[i]);\n            }\n         }\n\n      }\n\n      public void PushIndent()\n      {\n         m_indent += 3;\n      }\n\n      public void PopIndent()\n      {\n         m_indent -= 3;\n         if (m_indent < 0)\n            m_indent = 0;\n      }\n\n      public IDisposable GetIndent()\n      {\n         return new Indenter(this);\n      }\n\n      private class Indenter : IDisposable\n      {\n         IUIHost m_host;\n         public Indenter(IUIHost host)\n         {\n            m_host = host;\n            m_host.PushIndent();\n         }\n\n         public void Dispose()\n         {\n            m_host.PopIndent();\n         }\n      }\n\n      public void ExecCommand(string execCommand, string args)\n      {\n         WriteLine(\"- Executing command '{0}' ...\", execCommand);\n         WriteLine(\"-----------------------------------------------------\");\n\n         ProcessStartInfo ps = new ProcessStartInfo(execCommand, args);\n         ps.CreateNoWindow = false;\n         ps.UseShellExecute = false;\n\n         Process p = Process.Start(ps);\n         p.WaitForExit();\n         WriteLine(\"-----------------------------------------------------\");\n\n         if (p.ExitCode != 0)\n         {\n            WriteError(\"Command line '{0}' failed!. Aborting the backup...\", execCommand);\n            WriteError(\"Returned error code: {0}\", p.ExitCode);\n            throw new CommandAbortedException();\n         }\n      }\n\n      public bool ShouldContinue()\n      {\n         WriteHeader(\"Continue? [Y\/N]\");\n         string response = Console.ReadLine();\n         return response.Equals(\"y\", StringComparison.OrdinalIgnoreCase) || response.Equals(\"yes\", StringComparison.OrdinalIgnoreCase);\n      }\n   }\n}\n"}}
