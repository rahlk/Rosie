{"c.line_comments":{"subs":[{"c.line_comment":{"subs":[{"c.line_comment_context":{"text":"","pos":1019}},{"c.line_comment_body":{"subs":[{"c.line_comment_text":{"text":" This is a comment about the filter function","pos":1021}}],"text":"\/\/ This is a comment about the filter function","pos":1019}}],"text":"\/\/ This is a comment about the filter function","pos":1019}},{"c.line_comment":{"subs":[{"c.line_comment_context":{"text":"\t","pos":1114}},{"c.line_comment_body":{"subs":[{"c.line_comment_text":{"text":" Skip current dir \".\", and prev dir \"..\", from list of files","pos":1117}}],"text":"\/\/ Skip current dir \".\", and prev dir \"..\", from list of files","pos":1115}}],"text":"\t\/\/ Skip current dir \".\", and prev dir \"..\", from list of files","pos":1114}},{"c.line_comment":{"subs":[{"c.line_comment_context":{"text":"\tint result = 0; ","pos":2012}},{"c.line_comment_body":{"subs":[{"c.line_comment_text":{"text":" This is a comment","pos":2031}}],"text":"\/\/ This is a comment","pos":2029}}],"text":"\tint result = 0; \/\/ This is a comment","pos":2012}}],"text":"\/* Simple \/bin\/tree replacement\n *\n * Copyright (c) 2015  Joachim Nilsson <troglobit@gmail.com>\n *\n * Permission to use, copy, modify, and\/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n *\/\n\n#include <errno.h>\n#include <dirent.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys\/types.h>\n#include <sys\/stat.h>\n#include <unistd.h>\n\nstatic int all = 0;\n\n\/\/ This is a comment about the filter function\nstatic int filter(const struct dirent *entry)\n{\n\t\/\/ Skip current dir \".\", and prev dir \"..\", from list of files\n\tif ((1 == strlen(entry->d_name) && entry->d_name[0] == '.') ||\n\t    (2 == strlen(entry->d_name) && !strcmp(entry->d_name, \"..\")))\n\t\treturn 0;\n\n\tif (!all && entry->d_name[0] == '.')\n\t\treturn 0;\n\t\n\treturn 1;\n}\n\nstatic void get_perms(struct stat *st, char *buf, size_t len)\n{\n\tmode_t m = st->st_mode;\n\n\tsnprintf(buf, len, \"[%c%c%c%c%c%c%c%c%c%c] \",\n\t\t S_ISCHR(m) ? 'c' : S_ISBLK(m) ? 'b' : S_ISFIFO(m) ? 'p' : S_ISLNK(m) ? 'l' : S_ISSOCK(m) ? 's' : '-',\n\t\t (m & S_IRUSR) ? 'r' : '-',\n\t\t (m & S_IWUSR) ? 'w' : '-',\n\t\t (m & S_ISUID ) ? 's' : (m & S_IXUSR) ? 'x' : '-',\n\t\t (m & S_IRGRP) ? 'r' : '-',\n\t\t (m & S_IWGRP) ? 'w' : '-',\n\t\t (m & S_ISGID) ? 's' : (m & S_IXGRP) ? 'x' : '-',\n\t\t (m & S_IROTH) ? 'r' : '-',\n\t\t (m & S_IWOTH) ? 'w' : '-',\n\t\t (m & S_IXOTH) ? 'x' : '-'\n\t\t);\n}\n\nstatic int descend(char *path, int show_perms, char *pfx)\n{\n\tint result = 0; \/\/ This is a comment\n\tstruct stat st;\n\n\tif (-1 == lstat(path, &st))\n\t\treturn 1;\n\n\tif ((st.st_mode & S_IFMT) == S_IFDIR) {\n\t\tint i, n;\n\t\tstruct dirent **namelist = NULL;\n\n\t\tn = scandir(path, &namelist, filter, alphasort);\n\t\tif (n) {\n\t\t\tfor (i = 0; i < n; i++) {\n\t\t\t\tchar t = ' ', p[14] = \"\", s[256] = \"\";\n\t\t\t\tchar buf[256];\n\t\t\t\tchar dir[80];\n\n\t\t\t\tif (i + 1 == n) {\n\t\t\t\t\tprintf(\"%s `- \", pfx);\n\t\t\t\t\tsnprintf(dir, sizeof(dir), \"%s     \", pfx);\n\t\t\t\t} else {\n\t\t\t\t\tprintf(\"%s|-- \", pfx);\n\t\t\t\t\tsnprintf(dir, sizeof(dir), \"%s|    \", pfx);\n\t\t\t\t}\n\n\t\t\t\tsnprintf(buf, sizeof(buf), \"%s\/%s\", path, namelist[i]->d_name);\n\t\t\t\tif (!lstat(buf, &st)) {\n\t\t\t\t\tif (show_perms)\n\t\t\t\t\t\tget_perms(&st, p, sizeof(p));\n\t\t\t\t\tif ((st.st_mode & S_IFMT) == S_IFDIR)\n\t\t\t\t\t\tt = '\/';\n\t\t\t\t\tif (S_ISLNK(st.st_mode)) {\n\t\t\t\t\t\tsnprintf(s, sizeof(s), \"-> \");\n\t\t\t\t\t\tif (-1 == readlink(buf, &s[3], sizeof(s) - 3))\n\t\t\t\t\t\t\ts[0] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tprintf(\"%s%s%c%s\\n\", p, namelist[i]->d_name, t, s);\n\t\t\t\tif (t == '\/')\n\t\t\t\t\tresult += descend(buf, show_perms, dir);\n\n\t\t\t\tfree(namelist[i]);\n\t\t\t}\n\n\t\t\tfree(namelist);\n\t\t}\n\t} else {\n\t\terrno = ENOTDIR;\n\t\tresult = -1;\n\t}\n\n\treturn result;\n}\n\nint tree(char *path, int show_perms)\n{\n\tprintf(\"[%s]\\n\", path);\n\treturn descend(path, show_perms, \"\");\n}\n\n\/**\n * Local Variables:\n *  indent-tabs-mode: t\n *  c-file-style: \"linux\"\n * End:\n *\/\n","pos":1}}
