{"c.line_comments":{"pos":1,"text":"#include <curses.h>\n#include <stdlib.h>\n\n#define STARTX 9\n#define STARTY 3\n#define WIDTH  6\n#define HEIGHT 4\n\n#define TRACE_VALUE TRACE_MAXIMUM\n\nvoid board(\tWINDOW *win, int starty, int startx, int lines, int cols,\n\t\tint tile_width, int tile_height);\nvoid magic(int **, int);\nvoid print(int **, int);\nvoid magic_board(int **a,int n);\n\nint main(int argc, char *argv[])\n{\n\n\tint **a,n,i;\n\n\tif(argc != 2)\n\t{\tprintf(\"Usage: %s <magic square order>\\n\", argv[0]);\n\t\texit(0);\n\t}\n\tn = atoi(argv[1]);\n\tif(n % 2 == 0)\n\t{\tprintf(\"Sorry !!! I don't know how to create magic square of even order\\n\");\n\t\tprintf(\"The order should be an odd number\\n\");\n\t\texit(0);\n\t}\n\ta = (int **) malloc(n * sizeof(int*));\n\tfor(i = 0;i < n;++i)\n\t\ta[i] = (int *)malloc(n * sizeof(int));\n\n\tmagic(a,n);\n\n\tinitscr();\n\tcurs_set(0);\n\tnoecho();\n\tmagic_board(a,n);\n\tgetch();\n\tendwin();\n\n\treturn;\n}\n\nvoid magic(int **a, int n)\n{\n\tint i,j,k;\n\tint row,col;\n\tfor(i = 0;i < n;++i)\n\t\tfor(j = 0;j < n;++j)\n\t\t\ta[i][j] = -1;\n\trow = 0;\n\tcol = n \/ 2;\n\n\tk = 1;\n\ta[row][col] = k;\n\n\twhile(k != n * n)\n\t{\n\t\tif(row == 0 && col != n - 1)\n\t\t{\trow = n - 1;\n\t\t\tcol ++;\n\t\t\ta[row][col] = ++k;\n\t\t}\n\t\telse if(row != 0 && col != n - 1)\n\t\t{\tif(a[row - 1][col + 1] == -1)\n\t\t\t{\trow --;\n\t\t\t\tcol ++;\n\t\t\t\ta[row][col] = ++k;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\trow ++;\n\t\t\t\ta[row][col] = ++k;\n\t\t\t}\n\t\t}\n\t\telse if(row != 0 && col == n - 1)\n\t\t{\n\t\t\trow --;\n\t\t\tcol = 0;\n\t\t\ta[row][col] = ++k;\n\t\t}\n\t\telse if(row == 0 && col == n - 1)\n\t\t{\trow ++;\n\t\t\ta[row][col] = ++k;\n\t\t}\n\n\t}\n\treturn;\n}\n\nvoid print(int **a,int n)\n{\tint i,j;\n\tint x,y;\n\tx = STARTX;\n\ty = STARTY;\n\tmvprintw(1,30,\"MAGIC SQUARE\");\n\tfor(i = 0;i < n;++i)\n\t{\tfor(j = 0;j < n;++j)\n\t\t{\tmvprintw(y,x,\"%d\",a[i][j]);\n\t\t\tif(n > 9)\n\t\t\t\tx += 4;\n\t\t\telse\n\t\t\t\tx += 6;\n\t\t}\n\t\tx = STARTX;\n\t\tif(n > 7)\n\t\t\ty += 2;\n\t\telse\n\t\t\ty += 3;\n\t}\n\trefresh();\n}\nvoid board(WINDOW *win, int starty, int startx, int lines, int cols,\n\t   int tile_width, int tile_height)\n{\tint endy, endx, i, j;\n\n\tendy = starty + lines * tile_height;\n\tendx = startx + cols  * tile_width;\n\n\tfor(j = starty; j <= endy; j += tile_height)\n\t\tfor(i = startx; i <= endx; ++i)\n\t\t\tmvwaddch(win, j, i, ACS_HLINE);\n\tfor(i = startx; i <= endx; i += tile_width)\n\t\tfor(j = starty; j <= endy; ++j)\n\t\t\tmvwaddch(win, j, i, ACS_VLINE);\n\tmvwaddch(win, starty, startx, ACS_ULCORNER);\n\tmvwaddch(win, endy, startx, ACS_LLCORNER);\n\tmvwaddch(win, starty, endx, ACS_URCORNER);\n\tmvwaddch(win, \tendy, endx, ACS_LRCORNER);\n\tfor(j = starty + tile_height; j <= endy - tile_height; j += tile_height)\n\t{\tmvwaddch(win, j, startx, ACS_LTEE);\n\t\tmvwaddch(win, j, endx, ACS_RTEE);\n\t\tfor(i = startx + tile_width; i <= endx - tile_width; i += tile_width)\n\t\t\tmvwaddch(win, j, i, ACS_PLUS);\n\t}\n\tfor(i = startx + tile_width; i <= endx - tile_width; i += tile_width)\n\t{\tmvwaddch(win, starty, i, ACS_TTEE);\n\t\tmvwaddch(win, endy, i, ACS_BTEE);\n\t}\n\twrefresh(win);\n}\n\nvoid magic_board(int **a,int n)\n{\tint i,j, deltax, deltay;\n\tint startx, starty;\n\n\tstarty = (LINES - n * HEIGHT) \/ 2;\n\tstartx = (COLS  - n * WIDTH) \/ 2;\n\tboard(stdscr, starty, startx, n, n, WIDTH, HEIGHT);\n\tdeltay = HEIGHT \/ 2;\n\tdeltax = WIDTH  \/ 2;\n\tfor(i = 0;i < n; ++i)\n\t\tfor(j = 0; j < n; ++j)\n\t\t\tmvprintw(starty + j * HEIGHT + deltay,\n\t\t\t\t startx + i * WIDTH  + deltax,\n\t\t\t\t \"%d\", a[i][j]);\n}\n"}}
