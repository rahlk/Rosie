{"c.dependencies":{"pos":1,"subs":[{"c.dependency":{"pos":1460,"subs":[{"c.header":{"pos":1470,"text":"config.h"}}],"text":"#include <config.h>"}},{"c.dependency":{"pos":1488,"subs":[{"c.header":{"pos":1498,"text":"errno.h"}}],"text":"#include <errno.h>"}},{"c.dependency":{"pos":1507,"subs":[{"c.header":{"pos":1517,"text":"stdio.h"}}],"text":"#include <stdio.h>"}},{"c.dependency":{"pos":1526,"subs":[{"c.header":{"pos":1536,"text":"stdlib.h"}}],"text":"#include <stdlib.h>"}},{"c.dependency":{"pos":1546,"subs":[{"c.header":{"pos":1556,"text":"string.h"}}],"text":"#include <string.h>"}},{"c.dependency":{"pos":1566,"subs":[{"c.header":{"pos":1576,"text":"strings.h"}}],"text":"#include <strings.h>"}},{"c.dependency":{"pos":1588,"subs":[{"c.header":{"pos":1598,"text":"color.h"}}],"text":"#include \"color.h\""}},{"c.dependency":{"pos":1608,"subs":[{"c.header":{"pos":1618,"text":"error.h"}}],"text":"#include \"error.h\""}},{"c.dependency":{"pos":1627,"subs":[{"c.header":{"pos":1637,"text":"gslist.h"}}],"text":"#include \"gslist.h\""}},{"c.dependency":{"pos":1647,"subs":[{"c.header":{"pos":1657,"text":"util.h"}}],"text":"#include \"util.h\""}},{"c.dependency":{"pos":1665,"subs":[{"c.header":{"pos":1675,"text":"xmalloc.h"}}],"text":"#include \"xmalloc.h\""}}],"text":"\/**\n * color.c -- functions related to custom color\n *    ______      ___\n *   \/ ____\/___  \/   | _____________  __________\n *  \/ \/ __\/ __ \\\/ \/| |\/ ___\/ ___\/ _ \\\/ ___\/ ___\/\n * \/ \/_\/ \/ \/_\/ \/ ___ \/ \/__\/ \/__\/  __(__  |__  )\n * \\____\/\\____\/_\/  |_\\___\/\\___\/\\___\/____\/____\/\n *\n * The MIT License (MIT)\n * Copyright (c) 2009-2016 Gerardo Orellana <hello @ goaccess.io>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\/\n\n#if HAVE_CONFIG_H\n#include <config.h>\n#endif\n\n#include <errno.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <strings.h>\n\n#include \"color.h\"\n\n#include \"error.h\"\n#include \"gslist.h\"\n#include \"util.h\"\n#include \"xmalloc.h\"\n\nstatic GSLList *color_list = NULL;\nstatic GSLList *pair_list = NULL;\n\n\/* *INDENT-OFF* *\/\nstatic GEnum CSTM_COLORS[] = {\n  {\"COLOR_MTRC_HITS\"     , COLOR_MTRC_HITS}     ,\n  {\"COLOR_MTRC_VISITORS\" , COLOR_MTRC_VISITORS} ,\n  {\"COLOR_MTRC_PERC\"     , COLOR_MTRC_PERC}     ,\n  {\"COLOR_MTRC_BW\"       , COLOR_MTRC_BW}       ,\n  {\"COLOR_MTRC_AVGTS\"    , COLOR_MTRC_AVGTS}    ,\n  {\"COLOR_MTRC_CUMTS\"    , COLOR_MTRC_CUMTS}    ,\n  {\"COLOR_MTRC_MAXTS\"    , COLOR_MTRC_MAXTS}    ,\n  {\"COLOR_MTRC_PROT\"     , COLOR_MTRC_PROT}     ,\n  {\"COLOR_MTRC_MTHD\"     , COLOR_MTRC_MTHD}     ,\n  {\"COLOR_MTRC_DATA\"     , COLOR_MTRC_DATA}     ,\n  {\"COLOR_MTRC_PERC_MAX\" , COLOR_MTRC_PERC_MAX} ,\n  {\"COLOR_PANEL_COLS\"    , COLOR_PANEL_COLS}    ,\n  {\"COLOR_BARS\"          , COLOR_BARS}          ,\n  {\"COLOR_ERROR\"         , COLOR_ERROR}         ,\n  {\"COLOR_SELECTED\"      , COLOR_SELECTED}      ,\n  {\"COLOR_PANEL_ACTIVE\"  , COLOR_PANEL_ACTIVE}  ,\n  {\"COLOR_PANEL_HEADER\"  , COLOR_PANEL_HEADER}  ,\n  {\"COLOR_PANEL_DESC\"    , COLOR_PANEL_DESC}  ,\n  {\"COLOR_OVERALL_LBLS\"  , COLOR_OVERALL_LBLS}  ,\n  {\"COLOR_OVERALL_VALS\"  , COLOR_OVERALL_VALS}  ,\n  {\"COLOR_OVERALL_PATH\"  , COLOR_OVERALL_PATH}  ,\n  {\"COLOR_ACTIVE_LABEL\"  , COLOR_ACTIVE_LABEL}  ,\n  {\"COLOR_BG\"            , COLOR_BG}            ,\n  {\"COLOR_DEFAULT\"       , COLOR_DEFAULT}       ,\n  {\"COLOR_PROGRESS\"      , COLOR_PROGRESS}      ,\n};\n\nstatic const char *colors256_mono[] = {\n  \"COLOR_MTRC_HITS     color7:color-1\",\n  \"COLOR_MTRC_VISITORS color8:color-1\",\n  \"COLOR_MTRC_DATA     color7:color-1\",\n  \"COLOR_MTRC_BW       color8:color-1\",\n  \"COLOR_MTRC_AVGTS    color8:color-1\",\n  \"COLOR_MTRC_CUMTS    color8:color-1\",\n  \"COLOR_MTRC_MAXTS    color8:color-1\",\n  \"COLOR_MTRC_PROT     color8:color-1\",\n  \"COLOR_MTRC_MTHD     color7:color-1\",\n  \"COLOR_MTRC_PERC     color0:color-1 bold\",\n  \"COLOR_MTRC_PERC     color1:color-1 bold VISITORS\",\n  \"COLOR_MTRC_PERC     color1:color-1 bold OS\",\n  \"COLOR_MTRC_PERC     color1:color-1 bold BROWSERS\",\n  \"COLOR_MTRC_PERC     color1:color-1 bold VISIT_TIMES\",\n  \"COLOR_MTRC_PERC_MAX color0:color-1 bold\",\n  \"COLOR_MTRC_PERC_MAX color3:color-1 bold VISITORS\",\n  \"COLOR_MTRC_PERC_MAX color3:color-1 bold OS\",\n  \"COLOR_MTRC_PERC_MAX color3:color-1 bold BROWSERS\",\n  \"COLOR_MTRC_PERC_MAX color3:color-1 bold VISIT_TIMES\",\n  \"COLOR_PANEL_COLS    color7:color-1\",\n  \"COLOR_BARS          color7:color-1\",\n  \"COLOR_ERROR         color7:color1\",\n  \"COLOR_SELECTED      color7:color8\",\n  \"COLOR_PANEL_ACTIVE  color0:color3\",\n  \"COLOR_PANEL_HEADER  color0:color7\",\n  \"COLOR_PANEL_DESC    color7:color-1\",\n  \"COLOR_OVERALL_LBLS  color7:color-1 bold\",\n  \"COLOR_OVERALL_VALS  color6:color-1 bold\",\n  \"COLOR_OVERALL_PATH  color3:color-1\",\n  \"COLOR_ACTIVE_LABEL  color4:color7\",\n  \"COLOR_BG            color7:color-1\",\n  \"COLOR_DEFAULT       color7:color-1\",\n  \"COLOR_PROGRESS      color0:color6\",\n};\n\nstatic const char *colors256_green[] = {\n  \"COLOR_MTRC_HITS     color7:color-1\",\n  \"COLOR_MTRC_VISITORS color8:color-1\",\n  \"COLOR_MTRC_DATA     color7:color-1\",\n  \"COLOR_MTRC_BW       color8:color-1\",\n  \"COLOR_MTRC_AVGTS    color8:color-1\",\n  \"COLOR_MTRC_CUMTS    color8:color-1\",\n  \"COLOR_MTRC_MAXTS    color8:color-1\",\n  \"COLOR_MTRC_PROT     color8:color-1\",\n  \"COLOR_MTRC_MTHD     color7:color-1\",\n  \"COLOR_MTRC_PERC     color0:color-1 bold\",\n  \"COLOR_MTRC_PERC     color1:color-1 bold VISITORS\",\n  \"COLOR_MTRC_PERC     color1:color-1 bold OS\",\n  \"COLOR_MTRC_PERC     color1:color-1 bold BROWSERS\",\n  \"COLOR_MTRC_PERC     color1:color-1 bold VISIT_TIMES\",\n  \"COLOR_MTRC_PERC_MAX color0:color-1 bold\",\n  \"COLOR_MTRC_PERC_MAX color3:color-1 bold VISITORS\",\n  \"COLOR_MTRC_PERC_MAX color3:color-1 bold OS\",\n  \"COLOR_MTRC_PERC_MAX color3:color-1 bold BROWSERS\",\n  \"COLOR_MTRC_PERC_MAX color3:color-1 bold VISIT_TIMES\",\n  \"COLOR_PANEL_COLS    color7:color-1\",\n  \"COLOR_BARS          color7:color-1\",\n  \"COLOR_ERROR         color7:color1\",\n  \"COLOR_SELECTED      color7:color8\",\n  \"COLOR_PANEL_ACTIVE  color0:color3\",\n  \"COLOR_PANEL_HEADER  color0:color35\",\n  \"COLOR_PANEL_DESC    color7:color-1\",\n  \"COLOR_OVERALL_LBLS  color7:color-1 bold\",\n  \"COLOR_OVERALL_VALS  color6:color-1 bold\",\n  \"COLOR_OVERALL_PATH  color3:color-1\",\n  \"COLOR_ACTIVE_LABEL  color7:color35\",\n  \"COLOR_BG            color7:color-1\",\n  \"COLOR_DEFAULT       color7:color-1\",\n  \"COLOR_PROGRESS      color0:color6\",\n};\n\nstatic const char *colors256_monokai[] = {\n  \"COLOR_MTRC_HITS     color197:color-1\",\n  \"COLOR_MTRC_VISITORS color148:color-1\",\n  \"COLOR_MTRC_DATA     color7:color-1\",\n  \"COLOR_MTRC_BW       color81:color-1\",\n  \"COLOR_MTRC_AVGTS    color247:color-1\",\n  \"COLOR_MTRC_CUMTS    color95:color-1\",\n  \"COLOR_MTRC_MAXTS    color186:color-1\",\n  \"COLOR_MTRC_PROT     color141:color-1\",\n  \"COLOR_MTRC_MTHD     color81:color-1\",\n  \"COLOR_MTRC_PERC     color186:color-1\",\n  \"COLOR_MTRC_PERC     color186:color-1 VISITORS\",\n  \"COLOR_MTRC_PERC     color186:color-1 OS\",\n  \"COLOR_MTRC_PERC     color186:color-1 BROWSERS\",\n  \"COLOR_MTRC_PERC     color186:color-1 VISIT_TIMES\",\n  \"COLOR_MTRC_PERC_MAX color208:color-1\",\n  \"COLOR_MTRC_PERC_MAX color208:color-1 VISITORS\",\n  \"COLOR_MTRC_PERC_MAX color208:color-1 OS\",\n  \"COLOR_MTRC_PERC_MAX color208:color-1 BROWSERS\",\n  \"COLOR_MTRC_PERC_MAX color208:color-1 VISIT_TIMES\",\n  \"COLOR_PANEL_COLS    color242:color-1\",\n  \"COLOR_BARS          color186:color-1\",\n  \"COLOR_ERROR         color231:color197\",\n  \"COLOR_SELECTED      color0:color215\",\n  \"COLOR_PANEL_ACTIVE  color7:color240\",\n  \"COLOR_PANEL_HEADER  color7:color237\",\n  \"COLOR_PANEL_DESC    color242:color-1\",\n  \"COLOR_OVERALL_LBLS  color251:color-1\",\n  \"COLOR_OVERALL_VALS  color148:color-1\",\n  \"COLOR_OVERALL_PATH  color186:color-1\",\n  \"COLOR_ACTIVE_LABEL  color7:color237\",\n  \"COLOR_BG            color7:color-1\",\n  \"COLOR_DEFAULT       color7:color-1\",\n  \"COLOR_PROGRESS      color7:color141\",\n};\n\nstatic const char *colors8_mono[] = {\n  \"COLOR_MTRC_HITS     color7:color-1\",\n  \"COLOR_MTRC_VISITORS color0:color-1 bold\",\n  \"COLOR_MTRC_DATA     color7:color-1\",\n  \"COLOR_MTRC_BW       color0:color-1 bold\",\n  \"COLOR_MTRC_AVGTS    color0:color-1 bold\",\n  \"COLOR_MTRC_CUMTS    color0:color-1 bold\",\n  \"COLOR_MTRC_MAXTS    color0:color-1 bold\",\n  \"COLOR_MTRC_PROT     color0:color-1 bold\",\n  \"COLOR_MTRC_MTHD     color7:color-1 \",\n  \"COLOR_MTRC_PERC     color0:color-1 bold\",\n  \"COLOR_MTRC_PERC     color1:color-1 bold VISITORS\",\n  \"COLOR_MTRC_PERC     color1:color-1 bold OS\",\n  \"COLOR_MTRC_PERC     color1:color-1 bold BROWSERS\",\n  \"COLOR_MTRC_PERC     color1:color-1 bold VISIT_TIMES\",\n  \"COLOR_MTRC_PERC_MAX color0:color-1 bold\",\n  \"COLOR_MTRC_PERC_MAX color3:color-1 bold VISITORS\",\n  \"COLOR_MTRC_PERC_MAX color3:color-1 bold OS\",\n  \"COLOR_MTRC_PERC_MAX color3:color-1 bold BROWSERS\",\n  \"COLOR_MTRC_PERC_MAX color3:color-1 bold VISIT_TIMES\",\n  \"COLOR_PANEL_COLS    color7:color-1\",\n  \"COLOR_BARS          color7:color-1\",\n  \"COLOR_ERROR         color7:color1\",\n  \"COLOR_SELECTED      color0:color7\",\n  \"COLOR_PANEL_ACTIVE  color0:color3\",\n  \"COLOR_PANEL_HEADER  color0:color7\",\n  \"COLOR_PANEL_DESC    color7:color-1\",\n  \"COLOR_OVERALL_LBLS  color7:color-1 bold\",\n  \"COLOR_OVERALL_VALS  color6:color-1\",\n  \"COLOR_OVERALL_PATH  color3:color-1\",\n  \"COLOR_ACTIVE_LABEL  color4:color7\",\n  \"COLOR_BG            color7:color-1\",\n  \"COLOR_DEFAULT       color7:color-1\",\n  \"COLOR_PROGRESS      color0:color6\",\n};\n\nstatic const char *colors8_green[] = {\n  \"COLOR_MTRC_HITS     color7:color-1\",\n  \"COLOR_MTRC_VISITORS color0:color-1 bold\",\n  \"COLOR_MTRC_DATA     color7:color-1\",\n  \"COLOR_MTRC_BW       color0:color-1 bold\",\n  \"COLOR_MTRC_AVGTS    color0:color-1 bold\",\n  \"COLOR_MTRC_CUMTS    color0:color-1 bold\",\n  \"COLOR_MTRC_MAXTS    color0:color-1 bold\",\n  \"COLOR_MTRC_PROT     color0:color-1 bold\",\n  \"COLOR_MTRC_MTHD     color7:color-1 \",\n  \"COLOR_MTRC_PERC     color0:color-1 bold\",\n  \"COLOR_MTRC_PERC     color1:color-1 bold VISITORS\",\n  \"COLOR_MTRC_PERC     color1:color-1 bold OS\",\n  \"COLOR_MTRC_PERC     color1:color-1 bold BROWSERS\",\n  \"COLOR_MTRC_PERC     color1:color-1 bold VISIT_TIMES\",\n  \"COLOR_MTRC_PERC_MAX color0:color-1 bold\",\n  \"COLOR_MTRC_PERC_MAX color3:color-1 bold VISITORS\",\n  \"COLOR_MTRC_PERC_MAX color3:color-1 bold OS\",\n  \"COLOR_MTRC_PERC_MAX color3:color-1 bold BROWSERS\",\n  \"COLOR_MTRC_PERC_MAX color3:color-1 bold VISIT_TIMES\",\n  \"COLOR_PANEL_COLS    color7:color-1\",\n  \"COLOR_BARS          color2:color-1\",\n  \"COLOR_ERROR         color7:color1\",\n  \"COLOR_SELECTED      color0:color7\",\n  \"COLOR_PANEL_ACTIVE  color0:color3\",\n  \"COLOR_PANEL_HEADER  color0:color2\",\n  \"COLOR_PANEL_DESC    color7:color-1\",\n  \"COLOR_OVERALL_LBLS  color7:color-1 bold\",\n  \"COLOR_OVERALL_VALS  color6:color-1\",\n  \"COLOR_OVERALL_PATH  color3:color-1\",\n  \"COLOR_ACTIVE_LABEL  color0:color2\",\n  \"COLOR_BG            color7:color-1\",\n  \"COLOR_DEFAULT       color7:color-1\",\n  \"COLOR_PROGRESS      color0:color6\",\n};\n\nstatic const char *nocolors[] = {\n  \"COLOR_MTRC_HITS     color0:color-1\",\n  \"COLOR_MTRC_VISITORS color0:color-1\",\n  \"COLOR_MTRC_DATA     color0:color-1\",\n  \"COLOR_MTRC_BW       color0:color-1\",\n  \"COLOR_MTRC_AVGTS    color0:color-1\",\n  \"COLOR_MTRC_CUMTS    color0:color-1\",\n  \"COLOR_MTRC_MAXTS    color0:color-1\",\n  \"COLOR_MTRC_PROT     color0:color-1\",\n  \"COLOR_MTRC_MTHD     color0:color-1\",\n  \"COLOR_MTRC_PERC     color0:color-1\",\n  \"COLOR_MTRC_PERC_MAX color0:color-1\",\n  \"COLOR_PANEL_COLS    color0:color-1\",\n  \"COLOR_BARS          color0:color-1\",\n  \"COLOR_ERROR         color0:color-1\",\n  \"COLOR_SELECTED      color0:color-1 reverse\",\n  \"COLOR_PANEL_ACTIVE  color0:color-1 reverse\",\n  \"COLOR_PANEL_HEADER  color0:color-1 reverse\",\n  \"COLOR_PANEL_DESC    color0:color-1\",\n  \"COLOR_OVERALL_LBLS  color0:color-1\",\n  \"COLOR_OVERALL_VALS  color0:color-1\",\n  \"COLOR_OVERALL_PATH  color0:color-1\",\n  \"COLOR_ACTIVE_LABEL  color0:color-1 reverse\",\n  \"COLOR_BG            color0:color-1\",\n  \"COLOR_DEFAULT       color0:color-1\",\n  \"COLOR_PROGRESS      color0:color-1 reverse\",\n};\n\n\/* *INDENT-ON* *\/\n\n\/* Allocate memory for color elements *\/\nstatic GColors *\nnew_gcolors (void)\n{\n  GColors *color = xcalloc (1, sizeof (GColors));\n  color->module = -1;\n\n  return color;\n}\n\n\/* Allocate memory for a color element properties *\/\nstatic GColorPair *\nnew_gcolorpair (void)\n{\n  GColorPair *pair = xcalloc (1, sizeof (GColorPair));\n  \/* Must be between 2 and COLOR_PAIRS-1.\n   * Starts at 2 since COLOR_NORMAL has already been set *\/\n  pair->idx = 2;\n\n  return pair;\n}\n\n\/* Free malloc'd memory for color elements *\/\nvoid\nfree_color_lists (void)\n{\n  if (pair_list)\n    list_remove_nodes (pair_list);\n  if (color_list)\n    list_remove_nodes (color_list);\n  color_list = NULL;\n  pair_list = NULL;\n}\n\n\/* Set a default color - COLOR_NORMAL, this will be used if\n * no colors are supported by the terminal *\/\nvoid\nset_normal_color (void)\n{\n  GColorPair *pair = new_gcolorpair ();\n  GColors *color = new_gcolors ();\n\n  pair->idx = 1;\n  pair->fg = COLOR_WHITE;\n  pair->bg = -1;\n\n  color->pair = pair;\n  color->item = COLOR_NORMAL;\n\n  pair_list = list_create (pair);\n  color_list = list_create (color);\n\n  init_pair (pair->idx, pair->fg, pair->bg);\n}\n\n\/* Get color properties for COLOR_OVERALL_LBLS *\/\nGColors *\ncolor_overall_lbls (void)\n{\n  return get_color (COLOR_OVERALL_LBLS);\n}\n\n\/* Get color properties for COLOR_OVERALL_VALS *\/\nGColors *\ncolor_overall_vals (void)\n{\n  return get_color (COLOR_OVERALL_VALS);\n}\n\n\/* Get color properties for COLOR_OVERALL_PATH *\/\nGColors *\ncolor_overall_path (void)\n{\n  return get_color (COLOR_OVERALL_PATH);\n}\n\n\/* Get color properties for COLOR_PANEL_HEADER *\/\nGColors *\ncolor_panel_header (void)\n{\n  return get_color (COLOR_PANEL_HEADER);\n}\n\n\/* Get color properties for COLOR_PANEL_DESC *\/\nGColors *\ncolor_panel_desc (void)\n{\n  return get_color (COLOR_PANEL_DESC);\n}\n\n\/* Get color properties for COLOR_PANEL_ACTIVE*\/\nGColors *\ncolor_panel_active (void)\n{\n  return get_color (COLOR_PANEL_ACTIVE);\n}\n\n\/* Get color properties for COLOR_SELECTED *\/\nGColors *\ncolor_selected (void)\n{\n  return get_color (COLOR_SELECTED);\n}\n\n\/* Get color properties for COLOR_PROGRESS *\/\nGColors *\ncolor_progress (void)\n{\n  return get_color (COLOR_PROGRESS);\n}\n\n\/* Get color properties for COLOR_DEFAULT *\/\nGColors *\ncolor_default (void)\n{\n  return get_color (COLOR_DEFAULT);\n}\n\n\/* Get color properties for COLOR_ERROR *\/\nGColors *\ncolor_error (void)\n{\n  return get_color (COLOR_ERROR);\n}\n\n\/* Get the enumerated color given its equivalent color string.\n *\n * On error, -1 is returned.\n * On success, the enumerated color is returned. *\/\nstatic int\nget_color_item_enum (const char *str)\n{\n  return str2enum (CSTM_COLORS, ARRAY_SIZE (CSTM_COLORS), str);\n}\n\n\/* Extract color number from the given config string.\n *\n * On error, -2 is returned. If color is greater than max colors, it aborts.\n * On success, the color number is returned. *\/\nstatic int\nextract_color (char *color)\n{\n  char *sEnd;\n  int col = 0;\n\n  if (strncasecmp (color, \"color\", 5) != 0)\n    return -2;\n\n  color += 5;\n  col = strtol (color, &sEnd, 10);\n  if (color == sEnd || *sEnd != '\\0' || errno == ERANGE)\n    return -2;\n  \/* ensure used color is supported by the terminal *\/\n  if (col > COLORS)\n    FATAL (\"Terminal doesn't support color: %d - max colors: %d\", col, COLORS);\n\n  return col;\n}\n\n\/* Assign the background and foreground color number from the given\n * config string to GColorPair.\n *\n * On error, 1 is returned.\n * On success, 0 is returned. *\/\nstatic int\nparse_bg_fg_color (GColorPair * pair, const char *value)\n{\n  char bgcolor[COLOR_STR_LEN] = \"\", fgcolor[COLOR_STR_LEN] = \"\";\n  int ret = 0;\n\n  if (sscanf (value, \"%8[^:]:%8[^ ]\", fgcolor, bgcolor) != 2)\n    return 1;\n\n  if ((pair->bg = extract_color (bgcolor)) == -2)\n    ret = 1;\n\n  if ((pair->fg = extract_color (fgcolor)) == -2)\n    ret = 1;\n\n  return ret;\n}\n\n\/* Assign color attributes from the given config string to GColors. *\/\nstatic void\nlocate_attr_color (GColors * color, const char *attr)\n{\n  if (strstr (attr, \"bold\"))\n    color->attr |= A_BOLD;\n  if (strstr (attr, \"underline\"))\n    color->attr |= A_UNDERLINE;\n  if (strstr (attr, \"normal\"))\n    color->attr |= A_NORMAL;\n  if (strstr (attr, \"reverse\"))\n    color->attr |= A_REVERSE;\n  if (strstr (attr, \"standout\"))\n    color->attr |= A_REVERSE;\n  if (strstr (attr, \"blink\"))\n    color->attr |= A_BLINK;\n}\n\n\/* Parse color attributes from the given config string.\n *\n * On error, 1 is returned.\n * On success, 0 is returned. *\/\nstatic int\nparse_attr_color (GColors * color, const char *value)\n{\n  char *line, *ptr, *start;\n  int ret = 0;\n\n  line = xstrdup (value);\n\n  start = strchr (line, ' ');\n  if ((!start) || (!*(start + 1))) {\n    LOG_DEBUG ((\"attempted to parse color attr: %s\\n\", value));\n    goto clean;\n  }\n\n  start++;\n  while (1) {\n    if ((ptr = strpbrk (start, \", \")) != NULL)\n      *ptr = 0;\n    locate_attr_color (color, start);\n    if (ptr == NULL)\n      break;\n    start = ptr + 1;\n  }\n\nclean:\n  free (line);\n\n  return ret;\n}\n\n\/* Parse color module from the given config string.\n *\n * On error, 1 is returned.\n * On success, 0 is returned. *\/\nstatic int\nparse_module_color (GColors * color, const char *value)\n{\n  char *line = xstrdup (value), *p;\n\n  p = strrchr (line, ' ');\n  if (!p || !*(p + 1)) {\n    LOG_DEBUG ((\"attempted to parse color module: %s\\n\", value));\n    goto clean;\n  }\n\n  if ((color->module = get_module_enum (p + 1)) == -1)\n    LOG_DEBUG ((\"attempted to parse color module: %s\\n\", value));\n\nclean:\n  free (line);\n\n  return 0;\n}\n\n\/* Find a color by item and module attributes on the list of already\n * parsed colors.\n *\n * If color exists, 1 is returned.\n * If color does not exist, 1 is returned. *\/\nstatic int\nfind_color_in_list (void *data, void *color)\n{\n  GColors *new_color = color;\n  GColors *old_color = data;\n\n  if (old_color->item != new_color->item)\n    return 0;\n  if (old_color->module != new_color->module)\n    return 0;\n  return 1;\n}\n\n\/* Find a color by foreground and background attributes on the list of\n * already parsed colors.\n *\n * If color exists, 1 is returned.\n * If color does not exist, 1 is returned. *\/\nstatic int\nfind_pair_in_list (void *data, void *color)\n{\n  GColorPair *new_color = color;\n  GColorPair *old_color = data;\n\n  if (old_color->fg != new_color->fg)\n    return 0;\n  if (old_color->bg != new_color->bg)\n    return 0;\n  return 1;\n}\n\n\/* Compare a color item (GColorItem) that has no module with the given needle\n * item.\n *\n * If the items match and with no module, 1 is returned.\n * If condition is not satisfied, 0 is returned. *\/\nstatic int\nfind_color_item_in_list (void *data, void *needle)\n{\n  GColors *color = data;\n  GColorItem *item = needle;\n\n  return color->item == (GColorItem) (*(int *) item) && color->module == -1;\n}\n\n\/* Compare a color item (GColorItem) and module with the given needle item.\n *\n * If the items match and with no module, 1 is returned.\n * If condition is not satisfied, 0 is returned. *\/\nstatic int\nfind_color_item_module_in_list (void *data, void *needle)\n{\n  GColors *color = data;\n  GColors *item = needle;\n\n  return color->item == item->item && color->module == item->module;\n}\n\n\/* Get color item properties given an item (enumerated).\n *\n * On error, it aborts.\n * On success, the color item properties are returned, or NULL if no match\n * found. *\/\nGColors *\nget_color (GColorItem item)\n{\n  GColorItem normal = COLOR_NORMAL;\n  GSLList *match = NULL;\n\n  if ((match = list_find (color_list, find_color_item_in_list, &item)))\n    return (GColors *) match->data;\n\n  if ((match = list_find (color_list, find_color_item_in_list, &normal)))\n    return (GColors *) match->data;\n\n  \/* should not get here *\/\n  FATAL (\"Unable to find color item %d\", item);\n}\n\n\/* Get color item properties given an item (enumerated) and its module.\n *\n * On error, it aborts.\n * On success, the color item properties are returned, or NULL if no match\n * found. *\/\nGColors *\nget_color_by_item_module (GColorItem item, GModule module)\n{\n  GColors *needle = new_gcolors (), *color = NULL;\n  GSLList *match = NULL;\n\n  needle->module = module;\n  needle->item = item;\n\n  \/* find color for specific item\/module pair *\/\n  if ((match = list_find (color_list, find_color_item_module_in_list, needle)))\n    color = match->data;\n\n  \/* attempt to find color by item (fallback) *\/\n  if (!color)\n    color = get_color (item);\n  free (needle);\n\n  return color;\n}\n\n\/* Parse a color definition line from the config file.\n *\n * On error, it aborts.\n * On success, the color properties are assigned *\/\nstatic void\nparse_color_line (GColorPair * pair, GColors * color, char *line)\n{\n  char *val;\n  int item = 0;\n  size_t idx;\n\n  \/* key *\/\n  idx = strcspn (line, \" \\t\");\n  if (strlen (line) == idx)\n    FATAL (\"Malformed color key at line: %s\", line);\n\n  line[idx] = '\\0';\n  if ((item = get_color_item_enum (line)) == -1)\n    FATAL (\"Unable to find color key: %s\", line);\n\n  \/* value *\/\n  val = line + (idx + 1);\n  idx = strspn (val, \" \\t\");\n  if (strlen (line) == idx)\n    FATAL (\"Malformed color value at line: %s\", line);\n  val = val + idx;\n\n  \/* get background\/foreground color *\/\n  if (parse_bg_fg_color (pair, val) == 1)\n    FATAL (\"Invalid bg\/fg color pairs at: %s %s\", line, val);\n\n  if (parse_attr_color (color, val) == 1)\n    FATAL (\"Invalid color attrs at: %s %s\", line, val);\n\n  if (parse_module_color (color, val) == 1)\n    FATAL (\"Invalid color module at: %s %s\", line, val);\n\n  color->item = item;\n}\n\n\/* Parse a color definition line from the config file and store it on a signle\n * linked-list.\n *\n * On error, it aborts.\n * On success, the color properties are stored *\/\nstatic void\nparse_color (char *line)\n{\n  GSLList *match = NULL;\n  GColors *color = NULL;\n  GColorPair *pair = NULL;\n\n  color = new_gcolors ();\n  pair = new_gcolorpair ();\n\n  parse_color_line (pair, color, line);\n\n  if (pair_list == NULL) {\n    pair_list = list_create (pair);\n  } else if ((match = list_find (pair_list, find_pair_in_list, pair))) {\n    free (pair);\n    pair = (GColorPair *) match->data;\n  } else {\n    pair->idx += list_count (pair_list);\n    pair_list = list_insert_prepend (pair_list, pair);\n  }\n  color->pair = pair;\n\n  if (color_list == NULL)\n    color_list = list_create (color);\n  else if (list_find (color_list, find_color_in_list, color))\n    free (color);\n  else\n    color_list = list_insert_prepend (color_list, color);\n\n  if (!match) {\n    init_pair (color->pair->idx, color->pair->fg, color->pair->bg);\n  }\n\n  free (line);\n}\n\n\/* Iterate over all color definitions in the config file.\n *\n * On error, it aborts.\n * On success, the color properties are parsed and stored *\/\nstatic void\nparse_colors (const char *colors[], size_t n)\n{\n  char *line;\n  size_t i;\n\n  for (i = 0; i < n; ++i) {\n    line = strdup (colors[i]);\n    \/* did not find a valid format *\/\n    if (strchr (line, ':') == NULL) {\n      free (line);\n      continue;\n    }\n    parse_color (line);\n  }\n}\n\n\/* Use default color definitions if necessary. *\/\nstatic void\nadd_default_colors (void)\n{\n  \/* no colors *\/\n  if (COLORS < 8)\n    parse_colors (nocolors, ARRAY_SIZE (nocolors));\n\n  \/* 256 colors, and no color scheme set or set to monokai *\/\n  if (COLORS == 256 && (!conf.color_scheme || conf.color_scheme == MONOKAI))\n    parse_colors (colors256_monokai, ARRAY_SIZE (colors256_monokai));\n  \/* otherwise use 16 colors scheme *\/\n  else if (COLORS > 16) {\n    if (conf.color_scheme == STD_GREEN)\n      parse_colors (colors256_green, ARRAY_SIZE (colors256_green));\n    else\n      parse_colors (colors256_mono, ARRAY_SIZE (colors256_mono));\n  }\n\n  \/* 8 colors *\/\n  if (COLORS >= 8 && COLORS <= 16) {\n    if (conf.color_scheme == STD_GREEN)\n      parse_colors (colors8_green, ARRAY_SIZE (colors8_green));\n    else\n      parse_colors (colors8_mono, ARRAY_SIZE (colors8_mono));\n  }\n\n}\n\n\/* Entry point to parse color definitions or use default colors *\/\nvoid\nset_colors (int force)\n{\n  errno = 0;\n  if (conf.color_idx > 0 && !force)\n    parse_colors (conf.colors, conf.color_idx);\n  else\n    add_default_colors ();\n}\n"}}
