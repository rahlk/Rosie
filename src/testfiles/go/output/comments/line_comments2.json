{"go.line_comments":{"text":"package gin\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"time\"\n\n\t\"github.com\/mattn\/go-isatty\"\n)\n\nvar (\n\tgreen   = string([]byte{27, 91, 57, 55, 59, 52, 50, 109})\n\twhite   = string([]byte{27, 91, 57, 48, 59, 52, 55, 109})\n\tyellow  = string([]byte{27, 91, 57, 55, 59, 52, 51, 109})\n\tred     = string([]byte{27, 91, 57, 55, 59, 52, 49, 109})\n\tblue    = string([]byte{27, 91, 57, 55, 59, 52, 52, 109})\n\tmagenta = string([]byte{27, 91, 57, 55, 59, 52, 53, 109})\n\tcyan    = string([]byte{27, 91, 57, 55, 59, 52, 54, 109})\n\treset   = string([]byte{27, 91, 48, 109})\n)\n\nfunc ErrorLogger() HandlerFunc {\n\treturn ErrorLoggerT(ErrorTypeAny)\n}\n\nfunc ErrorLoggerT(typ ErrorType) HandlerFunc {\n\treturn func(c *Context) {\n\t\tc.Next()\n\t\terrors := c.Errors.ByType(typ)\n\t\tif len(errors) > 0 {\n\t\t\tc.JSON(-1, errors)\n\t\t}\n\t}\n}\n\nfunc Logger() HandlerFunc {\n\treturn LoggerWithWriter(DefaultWriter)\n}\n\nfunc LoggerWithWriter(out io.Writer, notlogged ...string) HandlerFunc {\n\tisTerm := true\n\n\tif w, ok := out.(*os.File); !ok || !isatty.IsTerminal(w.Fd()) {\n\t\tisTerm = false\n\t}\n\n\tvar skip map[string]struct{}\n\n\tif length := len(notlogged); length > 0 {\n\t\tskip = make(map[string]struct{}, length)\n\n\t\tfor _, path := range notlogged {\n\t\t\tskip[path] = struct{}{}\n\t\t}\n\t}\n\n\treturn func(c *Context) {\n\t\tstart := time.Now()\n\t\tpath := c.Request.URL.Path\n\n\n\t\tc.Next()\n\n\t\tif _, ok := skip[path]; !ok {\n\t\t\tend := time.Now()\n\t\t\tlatency := end.Sub(start)\n\n\t\t\tclientIP := c.ClientIP()\n\t\t\tmethod := c.Request.Method\n\t\t\tstatusCode := c.Writer.Status()\n\t\t\tvar statusColor, methodColor string\n\t\t\tif isTerm {\n\t\t\t\tstatusColor = colorForStatus(statusCode)\n\t\t\t\tmethodColor = colorForMethod(method)\n\t\t\t}\n\t\t\tcomment := c.Errors.ByType(ErrorTypePrivate).String()\n\n\t\t\tfmt.Fprintf(out, \"[GIN] %v |%s %3d %s| %13v | %s |%s  %s %-7s %s\\n%s\",\n\t\t\t\tend.Format(\"2006\/01\/02 - 15:04:05\"),\n\t\t\t\tstatusColor, statusCode, reset,\n\t\t\t\tlatency,\n\t\t\t\tclientIP,\n\t\t\t\tmethodColor, reset, method,\n\t\t\t\tpath,\n\t\t\t\tcomment,\n\t\t\t)\n\t\t}\n\t}\n}\n\nfunc colorForStatus(code int) string {\n\tswitch {\n\tcase code >= 200 && code < 300:\n\t\treturn green\n\tcase code >= 300 && code < 400:\n\t\treturn white\n\tcase code >= 400 && code < 500:\n\t\treturn yellow\n\tdefault:\n\t\treturn red\n\t}\n}\n\nfunc colorForMethod(method string) string {\n\tswitch method {\n\tcase \"GET\":\n\t\treturn blue\n\tcase \"POST\":\n\t\treturn cyan\n\tcase \"PUT\":\n\t\treturn yellow\n\tcase \"DELETE\":\n\t\treturn red\n\tcase \"PATCH\":\n\t\treturn green\n\tcase \"HEAD\":\n\t\treturn magenta\n\tcase \"OPTIONS\":\n\t\treturn white\n\tdefault:\n\t\treturn reset\n\t}\n}","pos":1}}
