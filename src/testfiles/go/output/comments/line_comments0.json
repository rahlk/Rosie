{"go.line_comments":{"pos":1,"subs":[{"go.line_comment":{"pos":179,"subs":[{"go.line_comment_context":{"pos":179,"text":"type Client struct { "}},{"go.line_comment_body":{"pos":200,"subs":[{"go.line_comment_text":{"pos":202,"text":" Client struct"}}],"text":"\/\/ Client struct"}}],"text":"type Client struct { \/\/ Client struct"}},{"go.line_comment":{"pos":303,"subs":[{"go.line_comment_context":{"pos":303,"text":""}},{"go.line_comment_body":{"pos":303,"subs":[{"go.line_comment_text":{"pos":305,"text":" MakeRpc function"}}],"text":"\/\/ MakeRpc function"}}],"text":"\/\/ MakeRpc function"}}],"text":"\/* This file is sourced under MIT license from siddontang\/go. This is an example\nof block comments in go *\/\n\npackage rpc\n\nimport (\n\t\"container\/list\"\n\t\"fmt\"\n\t\"reflect\"\n\t\"sync\"\n)\n\ntype Client struct { \/\/ Client struct\n\tsync.Mutex\n\n\tnetwork string\n\taddr    string\n\n\tmaxIdleConns int\n\n\tconns *list.List\n}\n\n\/\/ MakeRpc function\nfunc (c *Client) MakeRpc(rpcName string, fptr interface{}) (err error) {\n\tdefer func() {\n\t\tif e := recover(); e != nil {\n\t\t\terr = fmt.Errorf(\"make rpc error\")\n\t\t}\n\t}()\n\n\tfn := reflect.ValueOf(fptr).Elem()\n\n\tnOut := fn.Type().NumOut()\n\tif nOut == 0 || fn.Type().Out(nOut-1).Kind() != reflect.Interface {\n\t\terr = fmt.Errorf(\"%s return final output param must be error interface\", rpcName)\n\t\treturn\n\t}\n\n\t_, b := fn.Type().Out(nOut - 1).MethodByName(\"Error\")\n\tif !b {\n\t\terr = fmt.Errorf(\"%s return final output param must be error interface\", rpcName)\n\t\treturn\n\t}\n\n\tf := func(in []reflect.Value) []reflect.Value {\n\t\treturn c.call(fn, rpcName, in)\n\t}\n\n\tv := reflect.MakeFunc(fn.Type(), f)\n\tfn.Set(v)\n\n\treturn\n}\n"}}
