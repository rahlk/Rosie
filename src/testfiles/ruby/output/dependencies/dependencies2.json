{"rb.dependencies":{"pos":1,"subs":[{"rb.dependency":{"pos":56,"subs":[{"rb.module":{"pos":64,"text":"File.dirname(__FILE__) + '\/test_helper'"}}],"text":"require File.dirname(__FILE__) + '\/test_helper'\n"}},{"rb.dependency":{"pos":716,"subs":[{"rb.module":{"pos":724,"text":"File.dirname(__FILE__) + '\/..\/example\/controllers\/cablecar\/users_controller'"}}],"text":"require File.dirname(__FILE__) + '\/..\/example\/controllers\/cablecar\/users_controller'\n"}}],"text":"# Code sourced under MIT license from kovacs\/sortable\n\nrequire File.dirname(__FILE__) + '\/test_helper'\nActiveRecord::Base.establish_connection(:adapter => \"sqlite3\", :dbfile => \":memory:\")\n\ndef setup_sortable_db\n  old_stdout = $stdout\n\n  # AR keeps printing annoying schema statements\n  $stdout = StringIO.new\n\n  ActiveRecord::Base.logger\n  ActiveRecord::Schema.define(:version => 1) do\n    create_table :cablecar_users do |t|\n      t.column :username, :string\n      t.column :status, :string\n      t.column :contact_info_id, :integer\n    end\n\n    create_table :cablecar_contact_infos do |t|\n      t.column :name, :string\n      t.column :phone, :string\n    end\n  end\n\n  $stdout = old_stdout\nend\n\nsetup_sortable_db\n\nrequire File.dirname(__FILE__) + '\/..\/example\/controllers\/cablecar\/users_controller'\n\n# Re-raise errors caught by the controller.\nclass Cablecar::UsersController\n  def rescue_action(e) raise e end\nend\n\n\nclass UsersControllerTest < Test::Unit::TestCase\n\n  def teardown_db\n    ActiveRecord::Base.connection.tables.each do |table|\n      ActiveRecord::Base.connection.drop_table(table)\n    end\n  end\n\n  #fixtures :widgets\n\n  def setup\n    @controller = Cablecar::UsersController.new\n    @request    = ActionController::TestRequest.new\n    @response   = ActionController::TestResponse.new\n\n    30.times do |n|\n      c = Cablecar::ContactInfo.new(:name => \"name#{n}\")\n      c.user = Cablecar::User.new(:username => \"user#{n}\")\n      c.save!\n    end\n  end\n\n  def teardown\n    teardown_db\n  end\n\n  def test_should_show_paginated_table_using_default_action\n    get :index, :use_default => true\n    assert_equal 10, assigns(:objects).size\n\n    verify_sortable_table_html\n    verify_pagination_html\n  end\n\n  def test_should_show_paginated_table\n    get :index\n    assert_equal 10, assigns(:objects).size\n\n    verify_sortable_table_html\n    verify_pagination_html\n  end\n\n  def test_should_show_sorable_table_without_pagination\n    get :index, :no_pagination => true\n    assert_equal 10, assigns(:objects).size\n\n    verify_sortable_table_html\n    assert_select 'div.pagination', false\n  end\n\n  def test_should_show_paginated_table_with_overrides_and_related_columns\n    get :index, :complex_example => true\n    assert_equal 15, assigns(:objects).size\n    assert_select 'thead' do\n      assert_select 'tr' do\n        assert_select 'td', :count => 3\n        assert_select 'td.sortdown', 'Name'\n        assert_select 'td.sortdown' do\n          assert_select 'a[href=\/cablecar\/users?sort=name]', 'Name'\n          assert_select 'a[title=Sort by this field]', 'Name'\n        end\n      end\n    end\n    assert_select 'tbody' do\n      assert_select 'tr', :count => 15\n      verify_name_user_row_data(11, 22)\n    end\n    verify_pagination_html(2)\n  end\n\n  def test_should_sortdown_up_by_related_field\n    get :index, :sort => 'name', :complex_example => true\n    assert_equal 15, assigns(:objects).size\n    assert_select 'thead' do\n      assert_select 'tr' do\n        assert_select 'td', :count => 3\n        assert_select 'td.sortup', 'Name'\n        assert_select 'td.sortup' do\n          assert_select 'a[href=\/cablecar\/users?sort=name_reverse]', 'Name'\n          assert_select 'a[title=Sort by this field]', 'Name'\n        end\n      end\n    end\n    assert_select 'tbody' do\n      assert_select 'tr', :count => 15\n      verify_name_user_row_data(4, 10)\n      verify_name_user_row_data(23, 30)\n    end\n    verify_pagination_html(2)\n  end\n\n  def test_should_sortup_up_by_field_with_desc_default_sort\n    get :index, :sort => 'name_reverse', :complex_example => true\n    assert_equal 15, assigns(:objects).size\n    assert_select 'thead' do\n      assert_select 'tr' do\n        assert_select 'td', :count => 3\n        assert_select 'td.sortdown', 'Name'\n        assert_select 'td.sortdown' do\n          assert_select 'a[href=\/cablecar\/users?sort=name]', 'Name'\n          assert_select 'a[title=Sort by this field]', 'Name'\n        end\n      end\n    end\n    assert_select 'tbody' do\n      assert_select 'tr', :count => 15\n      verify_name_user_row_data(11, 22)\n    end\n    verify_pagination_html(2)\n  end\n\n  def test_should_sortup_up_by_field_with_asc_default_sort\n    get :index, :sort => 'status_reverse', :complex_example => true\n    assert_equal 15, assigns(:objects).size\n    assert_select 'thead' do\n      assert_select 'tr' do\n        assert_select 'td', :count => 3\n        assert_select 'td.sortdown', 'Status'\n        assert_select 'td.sortdown' do\n          assert_select 'a[href=\/cablecar\/users?sort=status]', 'Status'\n          assert_select 'a[title=Sort by this field]', 'Status'\n        end\n      end\n    end\n    assert_select 'tbody' do\n      assert_select 'tr', :count => 15\n      verify_name_user_row_data(1, 15)\n    end\n    verify_pagination_html(2)\n  end\n\n  def test_should_sortup_up_by_field_with_more_than_one_sort_param\n    get :index, :sort => 'username_reverse', :complex_example => true\n    assert_equal 15, assigns(:objects).size\n    assert_select 'thead' do\n      assert_select 'tr' do\n        assert_select 'td', :count => 3\n        assert_select 'td.sortdown', 'Username'\n        assert_select 'td.sortdown' do\n          assert_select 'a[href=\/cablecar\/users?sort=username]', 'Username'\n          assert_select 'a[title=Sort by this field]', 'Username'\n        end\n      end\n    end\n    assert_select 'tbody' do\n      assert_select 'tr', :count => 15\n      verify_name_user_row_data(1, 15)\n    end\n    verify_pagination_html(2)\n  end\n\n  def test_should_fail_to_sort_with_invalid_sort_param\n    assert_raise Exception do |ex|\n      get :index, :sort => 'username_invalid', :complex_example => true\n    end\n  end\n\n  def test_should_override_class_defaults\n    Cablecar::UsersController.class_eval do\n      sortable_table Cablecar::User, {:include_relations => [:contact_info],\n                               :table_headings => [['Username', 'username'], ['Status', 'status'], ['Name', 'name']],\n                               :sort_map => {:username => [['cablecar_users.username', 'DESC'], ['cablecar_users.status', 'DESC']],\n                                             :status => ['cablecar_users.status', 'ASC'],\n                                             :name => ['cablecar_contact_infos.name', 'DESC']},\n                               :default_sort => ['name', 'ASC'],\n                               :per_page => 15}\n    end\n    get :index, :sort => 'name_reverse'\n    assert_equal 15, assigns(:objects).size\n    assert_select 'thead' do\n      assert_select 'tr' do\n        assert_select 'td', :count => 3\n        assert_select 'td.sortdown', 'Name'\n        assert_select 'td.sortdown' do\n          assert_select 'a[href=\/cablecar\/users?sort=name]', 'Name'\n          assert_select 'a[title=Sort by this field]', 'Name'\n        end\n      end\n    end\n    assert_select 'tbody' do\n      assert_select 'tr', :count => 15\n      verify_name_user_row_data(11, 22)\n    end\n    verify_pagination_html(2)\n\n    Cablecar::UsersController.class_eval do\n      sortable_table Cablecar::User # put things back where you found them\n    end\n  end\n\n  def verify_name_user_row_data(start, finish)\n    start.upto(finish) do |n|\n      assert_select \"tr#cablecar_user_#{n}\" do\n        assert_select 'td', :count => 3\n        assert_select 'td', {:minimum => 1}, \"name#{n}\" # test that the name value is there\n        assert_select 'td', {:minimum => 1}, \"user#{n}\"\n      end\n    end\n  end\n\n  def verify_sortable_table_html(count=10)\n    verify_sortable_table_header\n    assert_select 'tbody' do\n      assert_select 'tr', :count => count\n      30.downto(21) do |n|\n        assert_select \"tr#cablecar_user_#{n}\" do\n          assert_select 'td', :count => 4\n          assert_select 'td', {:minimum => 1}, n # test that the id value is there\n        end\n      end\n    end\n  end\n\n  def verify_sortable_table_header(href='\/cablecar\/users?sort=id_reverse')\n    assert_select 'thead' do\n      assert_select 'tr' do\n        assert_select 'td', :count => 4\n        assert_select 'td.sortup', 'Id'\n        assert_select 'td.sortup' do\n          assert_select \"a[href=#{href}]\", 'Id'\n          assert_select 'a[title=Sort by this field]', 'Id'\n        end\n      end\n    end\n  end\n\n  def verify_pagination_html(pages=3)\n    assert_select 'div.pagination' do\n      assert_select 'span', :count => 2\n      assert_select 'a', :count => pages\n    end\n  end\n\n  def test_truth\n    true\n  end\n\n  def test_should_search\n    get :index, :q => 'user3'\n    assert_equal 1, assigns(:objects).size\n\n    verify_sortable_table_header('\/cablecar\/users?q=user3&amp;sort=id_reverse')\n\n    assert_select 'tbody' do\n      assert_select 'tr', :count => 1\n        assert_select \"tr#cablecar_user_4\" do\n          assert_select 'td', :count => 4\n          assert_select 'td', {:minimum => 1}, 4 # test that the id value is there\n        end\n    end\n  end\n\n  def test_should_search_and_return_multiple_results\n    get :index, :q => 'user4'\n    assert_equal 2, assigns(:objects).size\n\n    verify_sortable_table_header('\/cablecar\/users?q=user4&amp;sort=id_reverse')\n    assert_select 'tbody' do\n      assert_select 'tr', :count => 2\n        assert_select \"tr#cablecar_user_5\" do\n          assert_select 'td', :count => 4\n          assert_select 'td', {:minimum => 1}, 4 # test that the id value is there\n        end\n    end\n\n  end\n\n  def create_a_dupe_user\n    c = Cablecar::ContactInfo.new(:name => \"dupe_name4\")\n    c.user = Cablecar::User.new(:username => \"dupe_user4\")\n    c.user.status = 'active'\n    c.save!\n  end\n\n  def test_should_search_and_filter_results\n    create_a_dupe_user\n    # This tests the ability to search as well as apply an additional filter that is used in conjunction with the\n    # search conditions\n    get :index, :q => 'user4', :active => 'true', :filter_example => true\n    assert_equal 1, assigns(:objects).size\n\n    verify_sortable_table_header('\/cablecar\/users?q=user4&amp;sort=id_reverse')\n    assert_select 'tbody' do\n      assert_select 'tr', :count => 1\n        assert_select \"tr#cablecar_user_31\" do\n          assert_select 'td', :count => 4\n          assert_select 'td', {:minimum => 1}, 4 # test that the id value is there\n        end\n    end\n\n  end\n\n  def test_should_search_and_return_multiple_results\n    create_a_dupe_user\n\n    get :index, :q => 'user4'\n    assert_equal 2, assigns(:objects).size\n\n    verify_sortable_table_header('\/cablecar\/users?q=user4&amp;sort=id_reverse')\n    assert_select 'tbody' do\n      assert_select 'tr', :count => 2\n        assert_select \"tr#cablecar_user_5\" do\n          assert_select 'td', :count => 4\n          assert_select 'td', {:minimum => 1}, 4 # test that the id value is there\n        end\n    end\n\n  end\n\nend\n"}}
